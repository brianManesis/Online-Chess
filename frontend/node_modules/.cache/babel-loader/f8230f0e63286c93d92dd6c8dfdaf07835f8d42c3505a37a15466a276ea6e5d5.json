{"ast":null,"code":"import { PawnModel } from \"./PawnModel\";\nimport { RookModel } from \"./RookModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { rowValues } from \"../Constants\";\nimport { colValues } from \"../Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.playerColor = playerColor;\n    let col = playerColor == \"white\" ? rowValues.reverse() : rowValues;\n    let row = playerColor == \"white\" ? colValues : colValues.reverse();\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let pos = col[j] + row[i];\n        let color = (j + i + 2) % 2 == 0 ? \"white\" : \"black\";\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n    console.log(this.chessBoard);\n  }\n  genChessBoard() {\n    return this.chessBoard;\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PawnModel(\"Pawn\", \"white\");\n    } else if (row == 7) {\n      return new PawnModel(\"Pawn\", \"black\");\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(\"Rook\", \"white\");\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(\"Rook\", \"black\");\n      }\n    } else {\n      return undefined;\n    }\n  }\n}","map":{"version":3,"names":["PawnModel","RookModel","SquareModel","rowValues","colValues","ChessBoardModel","constructor","playerColor","chessBoard","col","reverse","row","i","j","pos","color","piece","genPiece","push","console","log","genChessBoard","undefined"],"sources":["/home/brian/Desktop/Projects/ChessApp/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PawnModel } from \"./PawnModel\";\nimport { PieceModel } from \"./PieceModel\";\nimport { RookModel } from \"./RookModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { rowValues } from \"../Constants\";\nimport { colValues } from \"../Constants\";\n\nexport class ChessBoardModel{\n    private chessBoard: Array<Array<SquareModel>>;\n    private playerColor:string;\n\n    public constructor(playerColor:string){\n        this.playerColor = playerColor;\n\n        let col = playerColor ==\"white\"?\n        rowValues.reverse():rowValues;\n\n        let row = playerColor == \"white\"?\n        colValues:colValues.reverse();\n\n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i<8; i++){\n            for(let j = 0; j<8; j++){\n\n                let pos:string = col[j]+row[i];\n                let color = (j+i+2) % 2 == 0? \"white\":\"black\"\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n        console.log(this.chessBoard);\n    }\n\n    public genChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PawnModel(\"Pawn\",\"white\");\n        }\n        else if(row == 7){\n            return new PawnModel(\"Pawn\",\"black\");\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(\"Rook\",\"white\");\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(\"Rook\",\"black\");\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAEvC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,SAAS,QAAQ,cAAc;AAExC,OAAO,MAAMC,eAAe;EAIjBC,WAAWA,CAACC,WAAkB,EAAC;IAAA,KAH9BC,UAAU;IAAA,KACVD,WAAW;IAGf,IAAI,CAACA,WAAW,GAAGA,WAAW;IAE9B,IAAIE,GAAG,GAAGF,WAAW,IAAG,OAAO,GAC/BJ,SAAS,CAACO,OAAO,CAAC,CAAC,GAACP,SAAS;IAE7B,IAAIQ,GAAG,GAAGJ,WAAW,IAAI,OAAO,GAChCH,SAAS,GAACA,SAAS,CAACM,OAAO,CAAC,CAAC;IAE7B,IAAI,CAACF,UAAU,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;IAC3C,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;MACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;QAEpB,IAAIC,GAAU,GAAGL,GAAG,CAACI,CAAC,CAAC,GAACF,GAAG,CAACC,CAAC,CAAC;QAC9B,IAAIG,KAAK,GAAG,CAACF,CAAC,GAACD,CAAC,GAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAE,OAAO,GAAC,OAAO;QAC7C,IAAII,KAA4B,GAAG,IAAI,CAACC,QAAQ,CAACR,GAAG,CAACI,CAAC,CAAC,EAACF,GAAG,CAACC,CAAC,CAAC,CAAC;QAE/D,IAAGI,KAAK,EAAC;UACL,IAAI,CAACR,UAAU,CAACI,CAAC,CAAC,CAACM,IAAI,CACnB,IAAIhB,WAAW,CAACa,KAAK,EAACD,GAAG,EAACE,KAAK,CACnC,CAAC;QACL,CAAC,MAAI;UACD,IAAI,CAACR,UAAU,CAACI,CAAC,CAAC,CAACM,IAAI,CACnB,IAAIhB,WAAW,CAACa,KAAK,EAACD,GAAG,CAC7B,CAAC;QACL;MACJ;IACJ;IACAK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,UAAU,CAAC;EAChC;EAEOa,aAAaA,CAAA,EAA4B;IAC5C,OAAO,IAAI,CAACb,UAAU;EAC1B;EACQS,QAAQA,CAACR,GAAU,EAACE,GAAU,EAAyB;IAC3D,IAAGA,GAAG,IAAI,CAAC,EAAC;MACR,OAAO,IAAIX,SAAS,CAAC,MAAM,EAAC,OAAO,CAAC;IACxC,CAAC,MACI,IAAGW,GAAG,IAAI,CAAC,EAAC;MACb,OAAO,IAAIX,SAAS,CAAC,MAAM,EAAC,OAAO,CAAC;IACxC,CAAC,MACI,IAAGW,GAAG,IAAI,CAAC,EAAC;MACb,IAAGF,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QACxB,OAAO,IAAIR,SAAS,CAAC,MAAM,EAAC,OAAO,CAAC;MACxC;IACJ,CAAC,MACI,IAAGU,GAAG,IAAI,CAAC,EAAC;MACb,IAAGF,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QACxB,OAAO,IAAIR,SAAS,CAAC,MAAM,EAAC,OAAO,CAAC;MACxC;IACJ,CAAC,MACG;MACA,OAAOqB,SAAS;IACpB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}