{"ast":null,"code":"export function possiblePawnMoves(square, playerColor) {\n  //need to add way of calculating possible moves depending on playerColor\n  let pawn = square.getPiece();\n  let pos = square.getPos();\n  const direction = (pawn === null || pawn === void 0 ? void 0 : pawn.getColor()) == playerColor ? 1 : -1;\n  const boundry = playerColor;\n  let col = pos.charAt(0);\n  let row = parseInt(pos.charAt(1));\n  let possibleMoves = new Set();\n  console.log(col, row);\n  if (pawn && pawn.beenMoved && row < 8) {\n    possibleMoves.add(col + (row + direction));\n  } else if (pawn && !pawn.beenMoved && row < 8) {\n    possibleMoves.add(col + (row + direction));\n    console.log(pawn && !pawn.beenMoved && row < 8);\n    if (row + 2 <= 8) {\n      possibleMoves.add(col + (row + 2 * direction));\n    }\n  }\n  return possibleMoves;\n}","map":{"version":3,"names":["possiblePawnMoves","square","playerColor","pawn","getPiece","pos","getPos","direction","getColor","boundry","col","charAt","row","parseInt","possibleMoves","Set","console","log","beenMoved","add"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/PossibleMoves.ts"],"sourcesContent":["import { SquareModel } from \"./SquareModel\";\n\nexport function possiblePawnMoves(square:SquareModel, playerColor:string){\n    //need to add way of calculating possible moves depending on playerColor\n    let pawn = square.getPiece();\n    let pos = square.getPos();\n    const direction = pawn?.getColor() == playerColor? 1:-1;\n    const boundry = playerColor\n    let col = pos.charAt(0);\n    let row = parseInt(pos.charAt(1));\n    let possibleMoves:Set<string> = new Set();\n    console.log(col,row);\n    if(pawn && pawn.beenMoved && row < 8){\n        possibleMoves.add(col+(row+direction));\n    }\n    else if(pawn && !pawn.beenMoved && (row < 8)){\n        possibleMoves.add(col+(row+direction));\n        console.log(pawn && (!pawn.beenMoved) && (row < 8));\n        if(row+2 <= 8){\n            possibleMoves.add(col+(row+2*direction));\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AAEA,OAAO,SAASA,iBAAiBA,CAACC,MAAkB,EAAEC,WAAkB,EAAC;EACrE;EACA,IAAIC,IAAI,GAAGF,MAAM,CAACG,QAAQ,CAAC,CAAC;EAC5B,IAAIC,GAAG,GAAGJ,MAAM,CAACK,MAAM,CAAC,CAAC;EACzB,MAAMC,SAAS,GAAG,CAAAJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,QAAQ,CAAC,CAAC,KAAIN,WAAW,GAAE,CAAC,GAAC,CAAC,CAAC;EACvD,MAAMO,OAAO,GAAGP,WAAW;EAC3B,IAAIQ,GAAG,GAAGL,GAAG,CAACM,MAAM,CAAC,CAAC,CAAC;EACvB,IAAIC,GAAG,GAAGC,QAAQ,CAACR,GAAG,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC;EACjC,IAAIG,aAAyB,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzCC,OAAO,CAACC,GAAG,CAACP,GAAG,EAACE,GAAG,CAAC;EACpB,IAAGT,IAAI,IAAIA,IAAI,CAACe,SAAS,IAAIN,GAAG,GAAG,CAAC,EAAC;IACjCE,aAAa,CAACK,GAAG,CAACT,GAAG,IAAEE,GAAG,GAACL,SAAS,CAAC,CAAC;EAC1C,CAAC,MACI,IAAGJ,IAAI,IAAI,CAACA,IAAI,CAACe,SAAS,IAAKN,GAAG,GAAG,CAAE,EAAC;IACzCE,aAAa,CAACK,GAAG,CAACT,GAAG,IAAEE,GAAG,GAACL,SAAS,CAAC,CAAC;IACtCS,OAAO,CAACC,GAAG,CAACd,IAAI,IAAK,CAACA,IAAI,CAACe,SAAU,IAAKN,GAAG,GAAG,CAAE,CAAC;IACnD,IAAGA,GAAG,GAAC,CAAC,IAAI,CAAC,EAAC;MACVE,aAAa,CAACK,GAAG,CAACT,GAAG,IAAEE,GAAG,GAAC,CAAC,GAACL,SAAS,CAAC,CAAC;IAC5C;EACJ;EACA,OAAOO,aAAa;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}