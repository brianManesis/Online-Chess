{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\nlet user = null;\nconst userJson = localStorage.getItem('user');\nif (userJson) {\n  try {\n    user = JSON.parse(userJson);\n  } catch (err) {\n    console.error('Error parsing user data from localStorage:', err);\n    localStorage.removeItem('user');\n  }\n}\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","userJson","localStorage","getItem","JSON","parse","err","console","error","removeItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","response","data","toString","rejectWithValue","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/lib/auth/authSlice.ts"],"sourcesContent":["import {createSlice, createAsyncThunk} from  '@reduxjs/toolkit';\nimport authService from './authService';\n\nlet user = null;\nconst userJson = localStorage.getItem('user');\nif (userJson) {\n  try {\n    user = JSON.parse(userJson);\n  } catch (err) {\n    console.error('Error parsing user data from localStorage:', err);\n    localStorage.removeItem('user');\n  }\n}\n\nconst initialState = {\n    user: user? user:null,\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: ''\n}\n\nexport const register = createAsyncThunk('auth/register', async (user:any, thunkAPI) => {\n    try{\n        return await authService.register(user);\n    } catch(err:any){\n        const message = (err.response && err.response.data && err.response.data.message) ||\n                        err.message || err.toString();\n        return thunkAPI.rejectWithValue(message);\n    }\n})\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers:{\n        reset: (state)=>{\n            state.isLoading = false;\n            state.isError = false;\n            state.isSuccess = false;\n            state.message = \"\"\n        }\n    },\n    extraReducers:(builder) => {\n        builder\n        .addCase(register.pending,(state) =>{\n            state.isLoading = true\n        })\n        .addCase(register.fulfilled, (state,action) => {\n            state.isLoading = false\n            state.isSuccess = true\n            state.user = action.payload\n        })\n        .addCase(register.rejected, (state,action:any)=>{\n            state.isLoading = false\n            state.isError = true\n            state.message = action.payload\n            state.user = null\n        })\n    }\n})\n\nexport const {reset} = authSlice.actions\nexport default authSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAC/D,OAAOC,WAAW,MAAM,eAAe;AAEvC,IAAIC,IAAI,GAAG,IAAI;AACf,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;AAC7C,IAAIF,QAAQ,EAAE;EACZ,IAAI;IACFD,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC;EAC7B,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEF,GAAG,CAAC;IAChEJ,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;EACjC;AACF;AAEA,MAAMC,YAAY,GAAG;EACjBV,IAAI,EAAEA,IAAI,GAAEA,IAAI,GAAC,IAAI;EACrBW,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGjB,gBAAgB,CAAC,eAAe,EAAE,OAAOE,IAAQ,EAAEgB,QAAQ,KAAK;EACpF,IAAG;IACC,OAAO,MAAMjB,WAAW,CAACgB,QAAQ,CAACf,IAAI,CAAC;EAC3C,CAAC,CAAC,OAAMM,GAAO,EAAC;IACZ,MAAMQ,OAAO,GAAIR,GAAG,CAACW,QAAQ,IAAIX,GAAG,CAACW,QAAQ,CAACC,IAAI,IAAIZ,GAAG,CAACW,QAAQ,CAACC,IAAI,CAACJ,OAAO,IAC/DR,GAAG,CAACQ,OAAO,IAAIR,GAAG,CAACa,QAAQ,CAAC,CAAC;IAC7C,OAAOH,QAAQ,CAACI,eAAe,CAACN,OAAO,CAAC;EAC5C;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMO,SAAS,GAAGxB,WAAW,CAAC;EACjCyB,IAAI,EAAE,MAAM;EACZZ,YAAY;EACZa,QAAQ,EAAC;IACLC,KAAK,EAAGC,KAAK,IAAG;MACZA,KAAK,CAACZ,SAAS,GAAG,KAAK;MACvBY,KAAK,CAACd,OAAO,GAAG,KAAK;MACrBc,KAAK,CAACb,SAAS,GAAG,KAAK;MACvBa,KAAK,CAACX,OAAO,GAAG,EAAE;IACtB;EACJ,CAAC;EACDY,aAAa,EAAEC,OAAO,IAAK;IACvBA,OAAO,CACNC,OAAO,CAACb,QAAQ,CAACc,OAAO,EAAEJ,KAAK,IAAI;MAChCA,KAAK,CAACZ,SAAS,GAAG,IAAI;IAC1B,CAAC,CAAC,CACDe,OAAO,CAACb,QAAQ,CAACe,SAAS,EAAE,CAACL,KAAK,EAACM,MAAM,KAAK;MAC3CN,KAAK,CAACZ,SAAS,GAAG,KAAK;MACvBY,KAAK,CAACb,SAAS,GAAG,IAAI;MACtBa,KAAK,CAACzB,IAAI,GAAG+B,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC,CACDJ,OAAO,CAACb,QAAQ,CAACkB,QAAQ,EAAE,CAACR,KAAK,EAACM,MAAU,KAAG;MAC5CN,KAAK,CAACZ,SAAS,GAAG,KAAK;MACvBY,KAAK,CAACd,OAAO,GAAG,IAAI;MACpBc,KAAK,CAACX,OAAO,GAAGiB,MAAM,CAACC,OAAO;MAC9BP,KAAK,CAACzB,IAAI,GAAG,IAAI;IACrB,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACwB;AAAK,CAAC,GAAGH,SAAS,CAACa,OAAO;AACxC,eAAeb,SAAS,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}