{"ast":null,"code":"import { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE } from \"../Constants\";\nimport { possiblePawnMoves } from \"./PossibleMoves\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.posMap = new Map();\n    this.playerColor = playerColor;\n    let col =\n    //playerColor ==\"White\"?\n    ROW_VALUES; //:[...ROW_VALUES].reverse();\n\n    let row =\n    //playerColor == \"White\"?\n    [...COL_VALUES].reverse(); //:COL_VALUES;\n\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let pos = col[j] + row[i];\n        this.posMap.set(pos, {\n          i: i,\n          j: j\n        });\n        let color = (j + i + 2) % 2 == 0 ? PlayerColor.WHITE : PlayerColor.BLACK;\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n  }\n  getChessBoard() {\n    return this.chessBoard;\n  }\n  getPosMap() {\n    return this.posMap;\n  }\n  pieceMove(fromSquare, toSquare) {\n    if (fromSquare && toSquare) {\n      let pieceOnFromSquare = fromSquare.getPiece();\n      if (pieceOnFromSquare) {\n        fromSquare.setPiece(undefined);\n        toSquare.setPiece(pieceOnFromSquare);\n      }\n    }\n  }\n  posToArrayPos(pos) {\n    return this.posMap.get(pos);\n  }\n  validPawnMove(square, playerColor) {\n    const pos = square.getPos();\n    return possiblePawnMoves(this, square, playerColor).has(pos);\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.WHITE);\n    } else if (row == 7) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.BLACK);\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.WHITE);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.WHITE);\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.BLACK);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.BLACK);\n      }\n    } else {\n      return undefined;\n    }\n  }\n  clone() {\n    const clone = new ChessBoardModel(this.playerColor);\n    clone.chessBoard = this.chessBoard.map(row => row.map(square => {\n      const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n      const piece = square.getPiece();\n      if (piece) {\n        // const clonedPiece = new PieceModel(piece.getType(), piece.getColor());\n        const clonedPiece = Object.assign({}, piece);\n        clonedSquare.setPiece(clonedPiece);\n      }\n      return clonedSquare;\n    }));\n    clone.posMap = new Map(this.posMap);\n    return clone;\n  }\n}","map":{"version":3,"names":["PawnModel","RookModel","KnightModel","BishopModel","QueenModel","KingModel","SquareModel","ROW_VALUES","COL_VALUES","PlayerColor","PieceType","BOARD_SIZE","possiblePawnMoves","ChessBoardModel","constructor","playerColor","chessBoard","posMap","Map","col","row","reverse","i","j","pos","set","color","WHITE","BLACK","piece","genPiece","push","getChessBoard","getPosMap","pieceMove","fromSquare","toSquare","pieceOnFromSquare","getPiece","setPiece","undefined","posToArrayPos","get","validPawnMove","square","getPos","has","PAWN","ROOK","KNIGHT","BISHOP","QUEEN","KING","clone","map","clonedSquare","getColor","clonedPiece","Object","assign"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./pieces/PieceModel\";\nimport { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE} from \"../Constants\";\nimport { possiblePawnMoves } from \"./PossibleMoves\";\n\nexport class ChessBoardModel{\n    public chessBoard: Array<Array<SquareModel>>;\n    private playerColor:PlayerColor;\n    private posMap:Map<string,{i:number,j:number}> = new Map();\n\n    public constructor(playerColor:PlayerColor){\n        this.playerColor = playerColor;\n        let col = //playerColor ==\"White\"?\n        ROW_VALUES;//:[...ROW_VALUES].reverse();\n\n        let row = //playerColor == \"White\"?\n        [...COL_VALUES].reverse();//:COL_VALUES;\n       \n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i< BOARD_SIZE; i++){\n            for(let j = 0; j< BOARD_SIZE; j++){\n\n                let pos:string = col[j]+row[i];\n                this.posMap.set(pos,{i:i, j:j});\n                let color = (j+i+2) % 2 == 0? PlayerColor.WHITE:PlayerColor.BLACK\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n    }\n\n    public getChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    public getPosMap():Map<string,{i:number,j:number}>{\n        return this.posMap;\n    }\n    public pieceMove(fromSquare:SquareModel, toSquare:SquareModel){\n        if(fromSquare && toSquare){\n            let pieceOnFromSquare: PieceModel | undefined = fromSquare.getPiece();\n            if(pieceOnFromSquare){\n                fromSquare.setPiece(undefined);\n                toSquare.setPiece(pieceOnFromSquare);\n            }\n        }\n    }\n    public posToArrayPos(pos: string){\n        return this.posMap.get(pos);\n    }\n    public validPawnMove(square:SquareModel, playerColor:PlayerColor){\n        const pos = square.getPos();\n\n        return possiblePawnMoves(this,square,playerColor).has(pos);\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PawnModel(PieceType.PAWN,PlayerColor.WHITE);\n        }\n        else if(row == 7){\n            return new PawnModel(PieceType.PAWN,PlayerColor.BLACK);\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.WHITE);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.WHITE);\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.BLACK);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.BLACK);\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n\n    public clone():ChessBoardModel{\n        const clone = new ChessBoardModel(this.playerColor);\n\n        clone.chessBoard = this.chessBoard.map((row) =>\n            row.map((square) => {\n            const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n            const piece = square.getPiece();\n            if (piece) {\n               // const clonedPiece = new PieceModel(piece.getType(), piece.getColor());\n               const clonedPiece = Object.assign({},piece);\n                clonedSquare.setPiece(clonedPiece);\n            }\n            return clonedSquare;\n            })\n        );\n\n        clone.posMap = new Map(this.posMap);\n        return clone;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}