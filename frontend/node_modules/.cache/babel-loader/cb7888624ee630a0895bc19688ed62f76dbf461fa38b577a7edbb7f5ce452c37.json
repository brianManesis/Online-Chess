{"ast":null,"code":"import { PlayerColor } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nexport class PawnModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.updatePossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const pawn = square.getPiece();\n    this.possibleMoves.clear();\n    if (pawn) {\n      const board = boardModel.getChessBoard();\n      const pieceDirections = this.pawnDirections(pawn);\n      const chessNotation = square.getPos();\n      const posArray = boardModel.posToArrayPos(chessNotation);\n      if (posArray) {\n        let fowardI = posArray.i + pieceDirections.dy;\n        let fowardJ = posArray.j + pieceDirections.dx;\n        if (this.withinBoard(fowardI, fowardJ)) {\n          let forwardSquare = board[fowardI][fowardJ];\n          let forwardSquarePiece = forwardSquare.getPiece();\n          if (forwardSquarePiece === undefined) {\n            this.possibleMoves.add(forwardSquare.getPos());\n          }\n          if (!pawn.beenMoved && forwardSquarePiece === undefined) {\n            let fowardI = posArray.i + 2 * pieceDirections.dy;\n            let fowardJ = posArray.j + 2 * pieceDirections.dx;\n            if (this.withinBoard(fowardI, fowardJ)) {\n              let forwardSquare = board[fowardI][fowardJ];\n              let forwardSquarePiece = forwardSquare.getPiece();\n              if (forwardSquarePiece === undefined) {\n                this.possibleMoves.add(forwardSquare.getPos());\n              }\n            }\n          }\n        }\n        let leftTakes = pieceDirections.takes.left;\n        let leftI = posArray.i + leftTakes.dy;\n        let leftJ = posArray.j + leftTakes.dx;\n        if (this.withinBoard(leftI, leftJ)) {\n          let leftSquare = board[leftI][leftJ];\n          let leftSquarePiece = leftSquare.getPiece();\n          if (leftSquarePiece && leftSquarePiece.getColor() !== playerColor) {\n            this.possibleMoves.add(leftSquare.getPos());\n          }\n        }\n        let rightTakes = pieceDirections.takes.right;\n        let rightI = posArray.i + rightTakes.dy;\n        let rightJ = posArray.j + rightTakes.dx;\n        if (this.withinBoard(rightI, rightJ)) {\n          let rightSquare = board[rightI][rightJ];\n          let rightSquarePiece = rightSquare.getPiece();\n          if (rightSquarePiece && rightSquarePiece.getColor() !== playerColor) {\n            this.possibleMoves.add(rightSquare.getPos());\n          }\n        }\n      }\n    }\n    return this.possibleMoves;\n  }\n  pawnDirections(pawn) {\n    return pawn.getColor() === PlayerColor.WHITE ? {\n      dx: 0,\n      dy: -1,\n      takes: {\n        left: {\n          dx: -1,\n          dy: -1\n        },\n        right: {\n          dx: 1,\n          dy: -1\n        }\n      }\n    } : {\n      dx: 0,\n      dy: 1,\n      takes: {\n        left: {\n          dx: -1,\n          dy: 1\n        },\n        right: {\n          dx: 1,\n          dy: 1\n        }\n      }\n    };\n  }\n}","map":{"version":3,"names":["PlayerColor","PieceModel","PawnModel","constructor","type","color","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","updatePossibleMoves","has","square","pawn","getPiece","possibleMoves","clear","board","getChessBoard","pieceDirections","pawnDirections","chessNotation","posArray","posToArrayPos","fowardI","i","dy","fowardJ","j","dx","withinBoard","forwardSquare","forwardSquarePiece","undefined","add","beenMoved","leftTakes","takes","left","leftI","leftJ","leftSquare","leftSquarePiece","getColor","rightTakes","right","rightI","rightJ","rightSquare","rightSquarePiece","WHITE"],"sources":["/home/brian/Desktop/Chess/frontend/src/model/pieces/PawnModel.ts"],"sourcesContent":["import { ChessBoardModel } from \"../ChessBoardModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\n\nexport class PawnModel extends PieceModel{\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n                    endSquare:SquareModel, playerColor:PlayerColor): boolean {\n        const pos = endSquare.getPos();\n        return this.updatePossibleMoves(boardModel,startSquare,playerColor).has(pos);    \n    }\n\n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const pawn = square.getPiece();\n        this.possibleMoves.clear();\n\n        if(pawn){\n            const board = boardModel.getChessBoard();\n            const pieceDirections = this.pawnDirections(pawn);\n            const chessNotation = square.getPos();\n            const posArray = boardModel.posToArrayPos(chessNotation);\n\n            if(posArray){\n                let fowardI = posArray.i+pieceDirections.dy;\n                let fowardJ = posArray.j+pieceDirections.dx;\n                if(this.withinBoard(fowardI,fowardJ)){\n                    let forwardSquare = board[fowardI][fowardJ];\n                    let forwardSquarePiece = forwardSquare.getPiece();\n                    if(forwardSquarePiece === undefined){\n                        this.possibleMoves.add(forwardSquare.getPos());\n                    }\n                    if(!pawn.beenMoved && forwardSquarePiece === undefined){\n                        let fowardI = posArray.i+2*pieceDirections.dy;\n                        let fowardJ = posArray.j+2*pieceDirections.dx;\n                        if(this.withinBoard(fowardI,fowardJ)){\n                            let forwardSquare = board[fowardI][fowardJ];\n                            let forwardSquarePiece = forwardSquare.getPiece();\n                            if(forwardSquarePiece === undefined){\n                                this.possibleMoves.add(forwardSquare.getPos());\n                            }\n                        }\n                    }\n                }\n                \n                let leftTakes = pieceDirections.takes.left;\n                let leftI = posArray.i+leftTakes.dy;\n                let leftJ = posArray.j+leftTakes.dx;\n                if(this.withinBoard(leftI,leftJ)){\n                    let leftSquare = board[leftI][leftJ];\n                    let leftSquarePiece = leftSquare.getPiece();\n                    if(leftSquarePiece && leftSquarePiece.getColor() !== playerColor){\n                        this.possibleMoves.add(leftSquare.getPos());\n                    }\n                }\n\n                let rightTakes = pieceDirections.takes.right;\n                let rightI = posArray.i+rightTakes.dy;\n                let rightJ = posArray.j+rightTakes.dx;\n                if(this.withinBoard(rightI,rightJ)){\n                    let rightSquare = board[rightI][rightJ];\n                    let rightSquarePiece = rightSquare.getPiece();\n                    if(rightSquarePiece && rightSquarePiece.getColor() !== playerColor){\n                        this.possibleMoves.add(rightSquare.getPos());\n                    }\n                }\n            }\n        }\n        return this.possibleMoves;\n    }\n    private pawnDirections(pawn:PieceModel){\n        return pawn.getColor() === PlayerColor.WHITE?\n        {\n            dx: 0,\n            dy: -1,\n            takes: {\n                left:{\n                    dx: -1,\n                    dy: -1\n                },\n                right:{\n                    dx: 1,\n                    dy: -1\n                }\n            }\n        }:\n        {\n            dx: 0,\n            dy: 1,\n            takes: {\n                left:{\n                    dx: -1,\n                    dy: 1\n                },\n                right:{\n                    dx: 1,\n                    dy: 1\n                }\n            }\n        }\n    }\n    \n}"],"mappings":"AAEA,SAASA,WAAW,QAAmB,uBAAuB;AAC9D,SAASC,UAAU,QAAQ,cAAc;AAEzC,OAAO,MAAMC,SAAS,SAASD,UAAU;EAC9BE,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IACnD,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;EACtB;EAEOC,SAASA,CAACC,UAA0B,EAAEC,WAAuB,EACpDC,SAAqB,EAAEC,WAAuB,EAAW;IACrE,MAAMC,GAAG,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC;IAC9B,OAAO,IAAI,CAACC,mBAAmB,CAACN,UAAU,EAACC,WAAW,EAACE,WAAW,CAAC,CAACI,GAAG,CAACH,GAAG,CAAC;EAChF;EAEQE,mBAAmBA,CAACN,UAA0B,EAAEQ,MAAkB,EAAEL,WAAuB,EAAa;IAC5G,MAAMM,IAAI,GAAGD,MAAM,CAACE,QAAQ,CAAC,CAAC;IAC9B,IAAI,CAACC,aAAa,CAACC,KAAK,CAAC,CAAC;IAE1B,IAAGH,IAAI,EAAC;MACJ,MAAMI,KAAK,GAAGb,UAAU,CAACc,aAAa,CAAC,CAAC;MACxC,MAAMC,eAAe,GAAG,IAAI,CAACC,cAAc,CAACP,IAAI,CAAC;MACjD,MAAMQ,aAAa,GAAGT,MAAM,CAACH,MAAM,CAAC,CAAC;MACrC,MAAMa,QAAQ,GAAGlB,UAAU,CAACmB,aAAa,CAACF,aAAa,CAAC;MAExD,IAAGC,QAAQ,EAAC;QACR,IAAIE,OAAO,GAAGF,QAAQ,CAACG,CAAC,GAACN,eAAe,CAACO,EAAE;QAC3C,IAAIC,OAAO,GAAGL,QAAQ,CAACM,CAAC,GAACT,eAAe,CAACU,EAAE;QAC3C,IAAG,IAAI,CAACC,WAAW,CAACN,OAAO,EAACG,OAAO,CAAC,EAAC;UACjC,IAAII,aAAa,GAAGd,KAAK,CAACO,OAAO,CAAC,CAACG,OAAO,CAAC;UAC3C,IAAIK,kBAAkB,GAAGD,aAAa,CAACjB,QAAQ,CAAC,CAAC;UACjD,IAAGkB,kBAAkB,KAAKC,SAAS,EAAC;YAChC,IAAI,CAAClB,aAAa,CAACmB,GAAG,CAACH,aAAa,CAACtB,MAAM,CAAC,CAAC,CAAC;UAClD;UACA,IAAG,CAACI,IAAI,CAACsB,SAAS,IAAIH,kBAAkB,KAAKC,SAAS,EAAC;YACnD,IAAIT,OAAO,GAAGF,QAAQ,CAACG,CAAC,GAAC,CAAC,GAACN,eAAe,CAACO,EAAE;YAC7C,IAAIC,OAAO,GAAGL,QAAQ,CAACM,CAAC,GAAC,CAAC,GAACT,eAAe,CAACU,EAAE;YAC7C,IAAG,IAAI,CAACC,WAAW,CAACN,OAAO,EAACG,OAAO,CAAC,EAAC;cACjC,IAAII,aAAa,GAAGd,KAAK,CAACO,OAAO,CAAC,CAACG,OAAO,CAAC;cAC3C,IAAIK,kBAAkB,GAAGD,aAAa,CAACjB,QAAQ,CAAC,CAAC;cACjD,IAAGkB,kBAAkB,KAAKC,SAAS,EAAC;gBAChC,IAAI,CAAClB,aAAa,CAACmB,GAAG,CAACH,aAAa,CAACtB,MAAM,CAAC,CAAC,CAAC;cAClD;YACJ;UACJ;QACJ;QAEA,IAAI2B,SAAS,GAAGjB,eAAe,CAACkB,KAAK,CAACC,IAAI;QAC1C,IAAIC,KAAK,GAAGjB,QAAQ,CAACG,CAAC,GAACW,SAAS,CAACV,EAAE;QACnC,IAAIc,KAAK,GAAGlB,QAAQ,CAACM,CAAC,GAACQ,SAAS,CAACP,EAAE;QACnC,IAAG,IAAI,CAACC,WAAW,CAACS,KAAK,EAACC,KAAK,CAAC,EAAC;UAC7B,IAAIC,UAAU,GAAGxB,KAAK,CAACsB,KAAK,CAAC,CAACC,KAAK,CAAC;UACpC,IAAIE,eAAe,GAAGD,UAAU,CAAC3B,QAAQ,CAAC,CAAC;UAC3C,IAAG4B,eAAe,IAAIA,eAAe,CAACC,QAAQ,CAAC,CAAC,KAAKpC,WAAW,EAAC;YAC7D,IAAI,CAACQ,aAAa,CAACmB,GAAG,CAACO,UAAU,CAAChC,MAAM,CAAC,CAAC,CAAC;UAC/C;QACJ;QAEA,IAAImC,UAAU,GAAGzB,eAAe,CAACkB,KAAK,CAACQ,KAAK;QAC5C,IAAIC,MAAM,GAAGxB,QAAQ,CAACG,CAAC,GAACmB,UAAU,CAAClB,EAAE;QACrC,IAAIqB,MAAM,GAAGzB,QAAQ,CAACM,CAAC,GAACgB,UAAU,CAACf,EAAE;QACrC,IAAG,IAAI,CAACC,WAAW,CAACgB,MAAM,EAACC,MAAM,CAAC,EAAC;UAC/B,IAAIC,WAAW,GAAG/B,KAAK,CAAC6B,MAAM,CAAC,CAACC,MAAM,CAAC;UACvC,IAAIE,gBAAgB,GAAGD,WAAW,CAAClC,QAAQ,CAAC,CAAC;UAC7C,IAAGmC,gBAAgB,IAAIA,gBAAgB,CAACN,QAAQ,CAAC,CAAC,KAAKpC,WAAW,EAAC;YAC/D,IAAI,CAACQ,aAAa,CAACmB,GAAG,CAACc,WAAW,CAACvC,MAAM,CAAC,CAAC,CAAC;UAChD;QACJ;MACJ;IACJ;IACA,OAAO,IAAI,CAACM,aAAa;EAC7B;EACQK,cAAcA,CAACP,IAAe,EAAC;IACnC,OAAOA,IAAI,CAAC8B,QAAQ,CAAC,CAAC,KAAK9C,WAAW,CAACqD,KAAK,GAC5C;MACIrB,EAAE,EAAE,CAAC;MACLH,EAAE,EAAE,CAAC,CAAC;MACNW,KAAK,EAAE;QACHC,IAAI,EAAC;UACDT,EAAE,EAAE,CAAC,CAAC;UACNH,EAAE,EAAE,CAAC;QACT,CAAC;QACDmB,KAAK,EAAC;UACFhB,EAAE,EAAE,CAAC;UACLH,EAAE,EAAE,CAAC;QACT;MACJ;IACJ,CAAC,GACD;MACIG,EAAE,EAAE,CAAC;MACLH,EAAE,EAAE,CAAC;MACLW,KAAK,EAAE;QACHC,IAAI,EAAC;UACDT,EAAE,EAAE,CAAC,CAAC;UACNH,EAAE,EAAE;QACR,CAAC;QACDmB,KAAK,EAAC;UACFhB,EAAE,EAAE,CAAC;UACLH,EAAE,EAAE;QACR;MACJ;IACJ,CAAC;EACL;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}