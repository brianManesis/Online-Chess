{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../Constants';\nimport React from 'react';\nimport { findModelSquareFromView } from '../../../../utils/View-ModelLocater';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(props) {\n  _s();\n  const playerColor = props.playerColor;\n  const chessBoard = new ChessBoardModel(playerColor);\n  const boardViewRef = useRef(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [boardModel, setBoardModel] = useState(chessBoard);\n  const boardView = [[], [], [], [], [], [], [], []];\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      boardView[i].push( /*#__PURE__*/_jsxDEV(Square, {\n        squareModel: boardModel.getChessBoard()[i][j]\n      }, i + \"\" + j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }, this));\n    }\n  }\n  console.log(boardView);\n  function handleClick(event) {\n    if (activePiece) {\n      movePiece(event);\n    } else {\n      selectPiece(event);\n    }\n  }\n  function selectPiece(event) {\n    const element = event.target;\n    const currentBoard = boardViewRef.current;\n    if (element.classList.contains(\"piece\") && currentBoard && !activePiece) {\n      setActivePiece(element);\n    }\n  }\n  function movePiece(event) {\n    const element = event.target;\n    if (activePiece && boardViewRef.current) {\n      let startSquare = activePiece.parentElement;\n      let endSquare = element;\n      let activePieceColor = activePiece.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n      if (endSquare.classList.contains(\"piece\")) {\n        let endPieceColor = endSquare.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n        if (endPieceColor === activePieceColor) {\n          setActivePiece(endSquare);\n          return;\n        }\n        endSquare = endSquare.parentElement;\n      }\n      if (startSquare && endSquare) {\n        if (endSquare.children.length > 0) {\n          endSquare.innerHTML = \"\";\n        }\n        if (startSquare.children.length > 0) {\n          startSquare.removeChild(activePiece);\n        }\n        let start = findModelSquareFromView(startSquare, boardModel);\n        let end = findModelSquareFromView(endSquare, boardModel);\n        boardModel.pieceMove(start, end);\n\n        // Create a copy of the updated model\n        const updatedBoardModel = Object.assign({}, boardModel);\n\n        // Update the state with the new model\n        setBoardModel(updatedBoardModel);\n        endSquare.appendChild(activePiece);\n      }\n      setActivePiece(null);\n    }\n  }\n\n  // function movePiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     if(activePiece && boardViewRef.current){\n  //         //need to update model\n  //         let startSquare = activePiece.parentElement;\n  //         let endSquare: HTMLElement | null = element;\n  //         let activePieceColor:string = activePiece.id.includes(\"White\")?\n  //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n  //         if(endSquare.classList.contains(\"piece\")){\n  //             let endPieceColor = endSquare.id.includes(\"White\")?\n  //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n  //             if(endPieceColor == activePieceColor){\n  //                 setActivePiece(endSquare);\n  //                 return;\n  //             }\n  //             endSquare = endSquare.parentElement;\n  //         }\n\n  //         if(startSquare && endSquare){\n  //             if(endSquare.children.length > 0){\n  //                 endSquare.innerHTML = '';\n  //             }\n  //             if(startSquare.children.length > 0){\n  //                 startSquare.removeChild(activePiece);\n\n  //             }\n  //             let start = findModelSquareFromView(startSquare,boardModel);\n  //             let end = findModelSquareFromView(endSquare, boardModel);\n  //             console.log(start,end);\n  //             boardModel.pieceMove(start,end);\n  //             setBoardModel(boardModel);\n  //             endSquare.appendChild(activePiece);\n  //         }\n  //         setActivePiece(null);\n  //     }\n  // }\n  // function grabPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     const currentBoard = boardViewRef.current;\n  //     setGrabPiecePos(element.parentElement?.id+\"\");\n  //     console.log(element.parentElement?.id);\n  //     if(element.classList.contains(\"piece\") && currentBoard){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n  //         element.style.position = \"absolute\";\n  //         element.style.left = `${x}px`;\n  //         element.style.top = `${y}px`;\n  //         setActivePiece(element);\n  //     }\n  // }\n\n  // function movePiece(event: React.MouseEvent){\n  //     if(activePiece && boardViewRef.current){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n  //         const minX = boardViewRef.current.offsetLeft;\n  //         const minY = boardViewRef.current.offsetTop;\n  //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n  //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n  //         if (x < minX) {\n  //             activePiece.style.left = `${minX}px`;\n  //         }\n  //         else if (x > maxX) {\n  //             activePiece.style.left = `${maxX}px`;\n  //         }\n  //         else {\n  //             activePiece.style.left = `${x}px`;\n  //         }\n\n  //         if (y < minY) {\n  //             activePiece.style.top = `${minY}px`;\n  //         }\n  //         else if (y > maxY) {\n  //             activePiece.style.top = `${maxY}px`;\n  //         }\n  //         else {\n  //             activePiece.style.top = `${y}px`;\n  //         }\n  //     }\n  // }\n\n  // function dropPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     console.log(event);\n  //     if(activePiece && boardViewRef.current){\n  //         setActivePiece(null);\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    onClick: event => handleClick(event),\n    ref: boardViewRef,\n    children: boardView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n}\n_s(Chessboard, \"+9e7hqiQew6Ce+ryDC2INpwfC+M=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Square","ChessBoardModel","useRef","useState","BOARD_SIZE","PlayerColor","React","findModelSquareFromView","jsxDEV","_jsxDEV","Chessboard","props","_s","playerColor","chessBoard","boardViewRef","activePiece","setActivePiece","boardModel","setBoardModel","boardView","i","j","push","squareModel","getChessBoard","fileName","_jsxFileName","lineNumber","columnNumber","console","log","handleClick","event","movePiece","selectPiece","element","target","currentBoard","current","classList","contains","startSquare","parentElement","endSquare","activePieceColor","id","includes","WHITE","BLACK","endPieceColor","children","length","innerHTML","removeChild","start","end","pieceMove","updatedBoardModel","Object","assign","appendChild","onClick","ref","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../Constants';\nimport React from 'react';\nimport { possiblePawnMoves } from '../../../../model/PossibleMoves';\nimport { findModelSquareFromView } from '../../../../utils/View-ModelLocater';\nimport { SquareModel } from '../../../../model/SquareModel';\nexport default function Chessboard(props:{playerColor:string}){\n    const playerColor = props.playerColor;\n    const chessBoard:ChessBoardModel = new ChessBoardModel(playerColor);\n    const boardViewRef = useRef<HTMLDivElement>(null);\n    const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n    const [boardModel,setBoardModel] = useState(chessBoard);\n    const boardView:any = [[],[],[],[],[],[],[],[]];\n\n        for(let i = 0; i<BOARD_SIZE; i++){\n            for(let j = 0; j<BOARD_SIZE; j++){\n                boardView[i].push(\n                    <Square key={i+\"\"+j} squareModel={boardModel.getChessBoard()[i][j]}></Square>\n                );\n            }\n        }\n            console.log(boardView);\n    function handleClick(event: React.MouseEvent){\n        if(activePiece){\n            movePiece(event);\n        }\n        else{\n            selectPiece(event);\n        }\n    }\n    function selectPiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        const currentBoard = boardViewRef.current;\n        if(element.classList.contains(\"piece\") && currentBoard && !activePiece){\n            setActivePiece(element); \n        }       \n    }\n    function movePiece(event: React.MouseEvent) {\n        const element = event.target as HTMLElement;\n        if (activePiece && boardViewRef.current) {\n          let startSquare = activePiece.parentElement;\n          let endSquare: HTMLElement | null = element;\n          let activePieceColor: string = activePiece.id.includes(\"White\")\n            ? PlayerColor.WHITE\n            : PlayerColor.BLACK;\n      \n          if (endSquare.classList.contains(\"piece\")) {\n            let endPieceColor = endSquare.id.includes(\"White\")\n              ? PlayerColor.WHITE\n              : PlayerColor.BLACK;\n      \n            if (endPieceColor === activePieceColor) {\n              setActivePiece(endSquare);\n              return;\n            }\n            endSquare = endSquare.parentElement;\n          }\n      \n          if (startSquare && endSquare) {\n            if (endSquare.children.length > 0) {\n              endSquare.innerHTML = \"\";\n            }\n            if (startSquare.children.length > 0) {\n              startSquare.removeChild(activePiece);\n            }\n            let start = findModelSquareFromView(startSquare, boardModel);\n            let end = findModelSquareFromView(endSquare, boardModel);\n            boardModel.pieceMove(start, end);\n      \n            // Create a copy of the updated model\n            const updatedBoardModel = Object.assign({}, boardModel);\n      \n            // Update the state with the new model\n            setBoardModel(updatedBoardModel);\n      \n            endSquare.appendChild(activePiece);\n          }\n          setActivePiece(null);\n        }\n      }\n      \n    // function movePiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     if(activePiece && boardViewRef.current){\n    //         //need to update model\n    //         let startSquare = activePiece.parentElement;\n    //         let endSquare: HTMLElement | null = element;\n    //         let activePieceColor:string = activePiece.id.includes(\"White\")?\n    //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n    //         if(endSquare.classList.contains(\"piece\")){\n    //             let endPieceColor = endSquare.id.includes(\"White\")?\n    //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n    //             if(endPieceColor == activePieceColor){\n    //                 setActivePiece(endSquare);\n    //                 return;\n    //             }\n    //             endSquare = endSquare.parentElement;\n    //         }\n\n\n    //         if(startSquare && endSquare){\n    //             if(endSquare.children.length > 0){\n    //                 endSquare.innerHTML = '';\n    //             }\n    //             if(startSquare.children.length > 0){\n    //                 startSquare.removeChild(activePiece);\n\n    //             }\n    //             let start = findModelSquareFromView(startSquare,boardModel);\n    //             let end = findModelSquareFromView(endSquare, boardModel);\n    //             console.log(start,end);\n    //             boardModel.pieceMove(start,end);\n    //             setBoardModel(boardModel);\n    //             endSquare.appendChild(activePiece);\n    //         }\n    //         setActivePiece(null);\n    //     }\n    // }\n    // function grabPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     const currentBoard = boardViewRef.current;\n    //     setGrabPiecePos(element.parentElement?.id+\"\");\n    //     console.log(element.parentElement?.id);\n    //     if(element.classList.contains(\"piece\") && currentBoard){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n    //         element.style.position = \"absolute\";\n    //         element.style.left = `${x}px`;\n    //         element.style.top = `${y}px`;\n    //         setActivePiece(element);\n    //     }\n    // }\n    \n    // function movePiece(event: React.MouseEvent){\n    //     if(activePiece && boardViewRef.current){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n    //         const minX = boardViewRef.current.offsetLeft;\n    //         const minY = boardViewRef.current.offsetTop;\n    //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n    //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n    //         if (x < minX) {\n    //             activePiece.style.left = `${minX}px`;\n    //         }\n    //         else if (x > maxX) {\n    //             activePiece.style.left = `${maxX}px`;\n    //         }\n    //         else {\n    //             activePiece.style.left = `${x}px`;\n    //         }\n    \n    //         if (y < minY) {\n    //             activePiece.style.top = `${minY}px`;\n    //         }\n    //         else if (y > maxY) {\n    //             activePiece.style.top = `${maxY}px`;\n    //         }\n    //         else {\n    //             activePiece.style.top = `${y}px`;\n    //         }\n    //     }\n    // }\n    \n    // function dropPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     console.log(event);\n    //     if(activePiece && boardViewRef.current){\n    //         setActivePiece(null);\n    //     }\n    // }\n    return(\n        <div id = \"chessboard\"\n        onClick={event=>handleClick(event)}\n        ref={boardViewRef}>\n            {boardView}\n        </div>\n    );\n}"],"mappings":"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C,SAAS,EAAE1B,UAAU,CAAC;QACxDA,UAAU,CAACuC,SAAS,CAACF,KAAK,EAAEC,GAAG,CAAC;;QAEhC;QACA,MAAME,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE1C,UAAU,CAAC;;QAEvD;QACAC,aAAa,CAACuC,iBAAiB,CAAC;QAEhCd,SAAS,CAACiB,WAAW,CAAC7C,WAAW,CAAC;MACpC;MACAC,cAAc,CAAC,IAAI,CAAC;IACtB;EACF;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACIR,OAAA;IAAKqC,EAAE,EAAG,YAAY;IACtBgB,OAAO,EAAE7B,KAAK,IAAED,WAAW,CAACC,KAAK,CAAE;IACnC8B,GAAG,EAAEhD,YAAa;IAAAoC,QAAA,EACb/B;EAAS;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd;AAACjB,EAAA,CAnLuBF,UAAU;AAAAsD,EAAA,GAAVtD,UAAU;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}