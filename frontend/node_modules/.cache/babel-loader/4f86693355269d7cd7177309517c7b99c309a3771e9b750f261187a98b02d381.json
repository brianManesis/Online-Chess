{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { rowValues, colValues } from \"../Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.playerColor = playerColor;\n    let col = playerColor == \"White\" ? rowValues : [...rowValues].reverse();\n    let row = playerColor == \"White\" ? [...colValues].reverse() : colValues;\n    console.log(row);\n    console.log(col);\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let pos = col[j] + row[i];\n        let color = (j + i + 2) % 2 == 0 ? \"white\" : \"black\";\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n    console.log(this.chessBoard);\n  }\n  genChessBoard() {\n    return this.chessBoard;\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PieceModel(\"Pawn\", \"White\");\n    } else if (row == 7) {\n      return new PieceModel(\"Pawn\", \"Black\");\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new PieceModel(\"Rook\", \"White\");\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new PieceModel(\"Rook\", \"Black\");\n      }\n    } else {\n      return undefined;\n    }\n  }\n}","map":{"version":3,"names":["PieceModel","SquareModel","rowValues","colValues","ChessBoardModel","constructor","playerColor","chessBoard","col","reverse","row","console","log","i","j","pos","color","piece","genPiece","push","genChessBoard","undefined"],"sources":["/home/brian/Desktop/Projects/ChessApp/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { rowValues, colValues } from \"../Constants\";\n\nexport class ChessBoardModel{\n    private chessBoard: Array<Array<SquareModel>>;\n    private playerColor:string;\n\n    public constructor(playerColor:string){\n        this.playerColor = playerColor;\n        let col = playerColor ==\"White\"?\n        rowValues:[...rowValues].reverse();\n\n        let row = playerColor == \"White\"?\n        [...colValues].reverse():colValues;\n        console.log(row);\n        console.log(col);\n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i<8; i++){\n            for(let j = 0; j<8; j++){\n\n                let pos:string = col[j]+row[i];\n                let color = (j+i+2) % 2 == 0? \"white\":\"black\"\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n        console.log(this.chessBoard);\n    }\n\n    public genChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PieceModel(\"Pawn\",\"White\");\n        }\n        else if(row == 7){\n            return new PieceModel(\"Pawn\",\"Black\");\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new PieceModel(\"Rook\",\"White\");\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new PieceModel(\"Rook\",\"Black\");\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n}"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,EAAEC,SAAS,QAAQ,cAAc;AAEnD,OAAO,MAAMC,eAAe;EAIjBC,WAAWA,CAACC,WAAkB,EAAC;IAAA,KAH9BC,UAAU;IAAA,KACVD,WAAW;IAGf,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAIE,GAAG,GAAGF,WAAW,IAAG,OAAO,GAC/BJ,SAAS,GAAC,CAAC,GAAGA,SAAS,CAAC,CAACO,OAAO,CAAC,CAAC;IAElC,IAAIC,GAAG,GAAGJ,WAAW,IAAI,OAAO,GAChC,CAAC,GAAGH,SAAS,CAAC,CAACM,OAAO,CAAC,CAAC,GAACN,SAAS;IAClCQ,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChBC,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;IAChB,IAAI,CAACD,UAAU,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;IAC3C,KAAI,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;MACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;QAEpB,IAAIC,GAAU,GAAGP,GAAG,CAACM,CAAC,CAAC,GAACJ,GAAG,CAACG,CAAC,CAAC;QAC9B,IAAIG,KAAK,GAAG,CAACF,CAAC,GAACD,CAAC,GAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAE,OAAO,GAAC,OAAO;QAC7C,IAAII,KAA4B,GAAG,IAAI,CAACC,QAAQ,CAACV,GAAG,CAACM,CAAC,CAAC,EAACJ,GAAG,CAACG,CAAC,CAAC,CAAC;QAE/D,IAAGI,KAAK,EAAC;UACL,IAAI,CAACV,UAAU,CAACM,CAAC,CAAC,CAACM,IAAI,CACnB,IAAIlB,WAAW,CAACe,KAAK,EAACD,GAAG,EAACE,KAAK,CACnC,CAAC;QACL,CAAC,MAAI;UACD,IAAI,CAACV,UAAU,CAACM,CAAC,CAAC,CAACM,IAAI,CACnB,IAAIlB,WAAW,CAACe,KAAK,EAACD,GAAG,CAC7B,CAAC;QACL;MACJ;IACJ;IACAJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,UAAU,CAAC;EAChC;EAEOa,aAAaA,CAAA,EAA4B;IAC5C,OAAO,IAAI,CAACb,UAAU;EAC1B;EACQW,QAAQA,CAACV,GAAU,EAACE,GAAU,EAAyB;IAC3D,IAAGA,GAAG,IAAI,CAAC,EAAC;MACR,OAAO,IAAIV,UAAU,CAAC,MAAM,EAAC,OAAO,CAAC;IACzC,CAAC,MACI,IAAGU,GAAG,IAAI,CAAC,EAAC;MACb,OAAO,IAAIV,UAAU,CAAC,MAAM,EAAC,OAAO,CAAC;IACzC,CAAC,MACI,IAAGU,GAAG,IAAI,CAAC,EAAC;MACb,IAAGF,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QACxB,OAAO,IAAIR,UAAU,CAAC,MAAM,EAAC,OAAO,CAAC;MACzC;IACJ,CAAC,MACI,IAAGU,GAAG,IAAI,CAAC,EAAC;MACb,IAAGF,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QACxB,OAAO,IAAIR,UAAU,CAAC,MAAM,EAAC,OAAO,CAAC;MACzC;IACJ,CAAC,MACG;MACA,OAAOqB,SAAS;IACpB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}