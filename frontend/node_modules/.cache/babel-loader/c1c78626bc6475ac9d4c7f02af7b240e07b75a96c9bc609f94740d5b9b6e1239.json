{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE } from \"../Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.playerColor = playerColor;\n    let col = playerColor == \"White\" ? ROW_VALUES : [...ROW_VALUES].reverse();\n    let row = playerColor == \"White\" ? [...COL_VALUES].reverse() : COL_VALUES;\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let pos = col[j] + row[i];\n        let color = (j + i + 2) % 2 == 0 ? PlayerColor.WHITE : PlayerColor.BLACK;\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n  }\n  getChessBoard() {\n    return this.chessBoard;\n  }\n  pieceMove(fromSquare, toSquare) {\n    if (fromSquare && toSquare) {\n      let fromSquarePos = fromSquare.getPos();\n      let toSquarePos = toSquare.getPos();\n      let pieceOnFromSquare = fromSquare.getPiece();\n      let pieceOnToSquare = toSquare.getPiece();\n\n      // if(pieceOnFromSquare && pieceOnToSquare){\n      //     fromSquare.setPiece(undefined);\n      //     toSquare.setPiece(pieceOnFromSquare);\n      // }else if(pieceOnFromSquare && !pieceOnToSquare){\n      //     fromSquare.setPiece(undefined);\n      //     toSquare.setPiece(pieceOnFromSquare);\n      //     console.log(fromSquare,toSquare);\n\n      // }\n      fromSquare.setPiece(undefined);\n      toSquare.setPiece(pieceOnFromSquare);\n    }\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PieceModel(PieceType.PAWN, \"White\");\n    } else if (row == 7) {\n      return new PieceModel(PieceType.PAWN, \"Black\");\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new PieceModel(PieceType.ROOK, \"White\");\n      } else if (col == 'b' || col == 'g') {\n        return new PieceModel(PieceType.KNIGHT, \"White\");\n      } else if (col == 'c' || col == 'f') {\n        return new PieceModel(PieceType.BISHOP, \"White\");\n      } else if (col == 'd') {\n        return new PieceModel(PieceType.QUEEN, \"White\");\n      } else {\n        return new PieceModel(PieceType.KING, \"White\");\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new PieceModel(PieceType.ROOK, \"Black\");\n      } else if (col == 'b' || col == 'g') {\n        return new PieceModel(PieceType.KNIGHT, \"Black\");\n      } else if (col == 'c' || col == 'f') {\n        return new PieceModel(PieceType.BISHOP, \"Black\");\n      } else if (col == 'd') {\n        return new PieceModel(PieceType.QUEEN, \"Black\");\n      } else {\n        return new PieceModel(PieceType.KING, \"Black\");\n      }\n    } else {\n      return undefined;\n    }\n  }\n}","map":{"version":3,"names":["PieceModel","SquareModel","ROW_VALUES","COL_VALUES","PlayerColor","PieceType","BOARD_SIZE","ChessBoardModel","constructor","playerColor","chessBoard","col","reverse","row","i","j","pos","color","WHITE","BLACK","piece","genPiece","push","getChessBoard","pieceMove","fromSquare","toSquare","fromSquarePos","getPos","toSquarePos","pieceOnFromSquare","getPiece","pieceOnToSquare","setPiece","undefined","PAWN","ROOK","KNIGHT","BISHOP","QUEEN","KING"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE} from \"../Constants\";\n\nexport class ChessBoardModel{\n    private chessBoard: Array<Array<SquareModel>>;\n    private playerColor:string;\n\n    public constructor(playerColor:string){\n        this.playerColor = playerColor;\n        let col = playerColor ==\"White\"?\n        ROW_VALUES:[...ROW_VALUES].reverse();\n\n        let row = playerColor == \"White\"?\n        [...COL_VALUES].reverse():COL_VALUES;\n       \n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i< BOARD_SIZE; i++){\n            for(let j = 0; j< BOARD_SIZE; j++){\n\n                let pos:string = col[j]+row[i];\n                let color = (j+i+2) % 2 == 0? PlayerColor.WHITE:PlayerColor.BLACK\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n    }\n\n    public getChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    public pieceMove(fromSquare:SquareModel | undefined, toSquare:SquareModel | undefined){\n        if(fromSquare && toSquare){\n            let fromSquarePos:string = fromSquare.getPos();\n            let toSquarePos:string = toSquare.getPos();\n            let pieceOnFromSquare: PieceModel | undefined = fromSquare.getPiece();\n            let pieceOnToSquare: PieceModel | undefined = toSquare.getPiece();\n\n            // if(pieceOnFromSquare && pieceOnToSquare){\n            //     fromSquare.setPiece(undefined);\n            //     toSquare.setPiece(pieceOnFromSquare);\n            // }else if(pieceOnFromSquare && !pieceOnToSquare){\n            //     fromSquare.setPiece(undefined);\n            //     toSquare.setPiece(pieceOnFromSquare);\n            //     console.log(fromSquare,toSquare);\n\n            // }\n                 fromSquare.setPiece(undefined);\n                toSquare.setPiece(pieceOnFromSquare);\n        }\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PieceModel(PieceType.PAWN,\"White\");\n        }\n        else if(row == 7){\n            return new PieceModel(PieceType.PAWN,\"Black\");\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new PieceModel(PieceType.ROOK,\"White\");\n            }\n            else if(col== 'b' || col == 'g'){\n                return new PieceModel(PieceType.KNIGHT, \"White\");\n            }\n            else if(col== 'c' || col == 'f'){\n                return new PieceModel(PieceType.BISHOP, \"White\");\n            }\n            else if(col == 'd'){\n                return new PieceModel(PieceType.QUEEN, \"White\");\n            }\n            else{\n                return new PieceModel(PieceType.KING, \"White\");\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new PieceModel(PieceType.ROOK,\"Black\");\n            }\n            else if(col== 'b' || col == 'g'){\n                return new PieceModel(PieceType.KNIGHT, \"Black\");\n            }\n            else if(col== 'c' || col == 'f'){\n                return new PieceModel(PieceType.BISHOP, \"Black\");\n            }\n            else if(col == 'd'){\n                return new PieceModel(PieceType.QUEEN, \"Black\");\n            }\n            else{\n                return new PieceModel(PieceType.KING, \"Black\");\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n}"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,UAAU,EAAEC,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,cAAc;AAExF,OAAO,MAAMC,eAAe;EAIjBC,WAAWA,CAACC,WAAkB,EAAC;IAAA,KAH9BC,UAAU;IAAA,KACVD,WAAW;IAGf,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAIE,GAAG,GAAGF,WAAW,IAAG,OAAO,GAC/BP,UAAU,GAAC,CAAC,GAAGA,UAAU,CAAC,CAACU,OAAO,CAAC,CAAC;IAEpC,IAAIC,GAAG,GAAGJ,WAAW,IAAI,OAAO,GAChC,CAAC,GAAGN,UAAU,CAAC,CAACS,OAAO,CAAC,CAAC,GAACT,UAAU;IAEpC,IAAI,CAACO,UAAU,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;IAC3C,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAER,UAAU,EAAEQ,CAAC,EAAE,EAAC;MAC9B,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAET,UAAU,EAAES,CAAC,EAAE,EAAC;QAE9B,IAAIC,GAAU,GAAGL,GAAG,CAACI,CAAC,CAAC,GAACF,GAAG,CAACC,CAAC,CAAC;QAC9B,IAAIG,KAAK,GAAG,CAACF,CAAC,GAACD,CAAC,GAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAEV,WAAW,CAACc,KAAK,GAACd,WAAW,CAACe,KAAK;QACjE,IAAIC,KAA4B,GAAG,IAAI,CAACC,QAAQ,CAACV,GAAG,CAACI,CAAC,CAAC,EAACF,GAAG,CAACC,CAAC,CAAC,CAAC;QAE/D,IAAGM,KAAK,EAAC;UACL,IAAI,CAACV,UAAU,CAACI,CAAC,CAAC,CAACQ,IAAI,CACnB,IAAIrB,WAAW,CAACgB,KAAK,EAACD,GAAG,EAACI,KAAK,CACnC,CAAC;QACL,CAAC,MAAI;UACD,IAAI,CAACV,UAAU,CAACI,CAAC,CAAC,CAACQ,IAAI,CACnB,IAAIrB,WAAW,CAACgB,KAAK,EAACD,GAAG,CAC7B,CAAC;QACL;MACJ;IACJ;EACJ;EAEOO,aAAaA,CAAA,EAA4B;IAC5C,OAAO,IAAI,CAACb,UAAU;EAC1B;EACOc,SAASA,CAACC,UAAkC,EAAEC,QAAgC,EAAC;IAClF,IAAGD,UAAU,IAAIC,QAAQ,EAAC;MACtB,IAAIC,aAAoB,GAAGF,UAAU,CAACG,MAAM,CAAC,CAAC;MAC9C,IAAIC,WAAkB,GAAGH,QAAQ,CAACE,MAAM,CAAC,CAAC;MAC1C,IAAIE,iBAAyC,GAAGL,UAAU,CAACM,QAAQ,CAAC,CAAC;MACrE,IAAIC,eAAuC,GAAGN,QAAQ,CAACK,QAAQ,CAAC,CAAC;;MAEjE;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACKN,UAAU,CAACQ,QAAQ,CAACC,SAAS,CAAC;MAC/BR,QAAQ,CAACO,QAAQ,CAACH,iBAAiB,CAAC;IAC5C;EACJ;EACQT,QAAQA,CAACV,GAAU,EAACE,GAAU,EAAyB;IAC3D,IAAGA,GAAG,IAAI,CAAC,EAAC;MACR,OAAO,IAAIb,UAAU,CAACK,SAAS,CAAC8B,IAAI,EAAC,OAAO,CAAC;IACjD,CAAC,MACI,IAAGtB,GAAG,IAAI,CAAC,EAAC;MACb,OAAO,IAAIb,UAAU,CAACK,SAAS,CAAC8B,IAAI,EAAC,OAAO,CAAC;IACjD,CAAC,MACI,IAAGtB,GAAG,IAAI,CAAC,EAAC;MACb,IAAGF,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QACxB,OAAO,IAAIX,UAAU,CAACK,SAAS,CAAC+B,IAAI,EAAC,OAAO,CAAC;MACjD,CAAC,MACI,IAAGzB,GAAG,IAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QAC5B,OAAO,IAAIX,UAAU,CAACK,SAAS,CAACgC,MAAM,EAAE,OAAO,CAAC;MACpD,CAAC,MACI,IAAG1B,GAAG,IAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QAC5B,OAAO,IAAIX,UAAU,CAACK,SAAS,CAACiC,MAAM,EAAE,OAAO,CAAC;MACpD,CAAC,MACI,IAAG3B,GAAG,IAAI,GAAG,EAAC;QACf,OAAO,IAAIX,UAAU,CAACK,SAAS,CAACkC,KAAK,EAAE,OAAO,CAAC;MACnD,CAAC,MACG;QACA,OAAO,IAAIvC,UAAU,CAACK,SAAS,CAACmC,IAAI,EAAE,OAAO,CAAC;MAClD;IACJ,CAAC,MACI,IAAG3B,GAAG,IAAI,CAAC,EAAC;MACb,IAAGF,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QACxB,OAAO,IAAIX,UAAU,CAACK,SAAS,CAAC+B,IAAI,EAAC,OAAO,CAAC;MACjD,CAAC,MACI,IAAGzB,GAAG,IAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QAC5B,OAAO,IAAIX,UAAU,CAACK,SAAS,CAACgC,MAAM,EAAE,OAAO,CAAC;MACpD,CAAC,MACI,IAAG1B,GAAG,IAAG,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAC;QAC5B,OAAO,IAAIX,UAAU,CAACK,SAAS,CAACiC,MAAM,EAAE,OAAO,CAAC;MACpD,CAAC,MACI,IAAG3B,GAAG,IAAI,GAAG,EAAC;QACf,OAAO,IAAIX,UAAU,CAACK,SAAS,CAACkC,KAAK,EAAE,OAAO,CAAC;MACnD,CAAC,MACG;QACA,OAAO,IAAIvC,UAAU,CAACK,SAAS,CAACmC,IAAI,EAAE,OAAO,CAAC;MAClD;IACJ,CAAC,MACG;MACA,OAAON,SAAS;IACpB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}