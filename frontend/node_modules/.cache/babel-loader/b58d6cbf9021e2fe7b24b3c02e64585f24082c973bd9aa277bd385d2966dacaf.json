{"ast":null,"code":"import { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE } from \"../utils/Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.posMap = new Map();\n    this.moveList = [];\n    this.playerColor = playerColor;\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    this.initBoard();\n  }\n  getChessBoard() {\n    return this.chessBoard;\n  }\n  getMoveList() {\n    return this.moveList;\n  }\n  getPosMap() {\n    return this.posMap;\n  }\n  move(fromSquare, toSquare) {\n    if (fromSquare && toSquare) {\n      let pieceOnFromSquare = fromSquare.getPiece();\n      if (!pieceOnFromSquare) return;\n      let pieceColor = pieceOnFromSquare.getColor();\n      if (this.castleMove(fromSquare, toSquare)) return;\n      if (this.queeningMove(fromSquare, toSquare)) return;\n      if (this.enPassant(fromSquare, toSquare)) return;\n      if (!this.validMove(fromSquare, toSquare, pieceColor)) return;\n      pieceOnFromSquare.beenMoved = true;\n      fromSquare.setPiece(undefined);\n      toSquare.setPiece(pieceOnFromSquare);\n      this.moveList.push({\n        fromSquare: fromSquare.getPos(),\n        toSquare: toSquare.getPos()\n      });\n    }\n  }\n  validMove(startSquare, endSquare, playerColor) {\n    const pieceMove = startSquare.getPiece();\n    if (pieceMove && pieceMove.validMove(this, startSquare, endSquare, playerColor)) {\n      return true;\n    }\n    return false;\n  }\n  castleMove(startSquare, endSquare) {\n    const king = startSquare.getPiece();\n    let rookSquare = null;\n    let newRookSquare = null;\n    const endSquarePos = endSquare.getPos();\n    if (!king || king.getType() !== PieceType.KING) return false;\n    if (king.beenMoved) return false;\n    if (endSquarePos !== \"c1\" && endSquarePos !== \"g1\" && endSquarePos !== \"c8\" && endSquarePos !== \"g8\") return false;\n    const kingColor = king.getColor();\n    const row = kingColor === PlayerColor.WHITE ? 7 : 0;\n    if (endSquarePos.charAt(0) === \"g\") {\n      rookSquare = this.chessBoard[row][7];\n      if (this.chessBoard[row][6].getPiece() || king.kingInCheck(this, this.chessBoard[row][6].getPos()) || this.chessBoard[row][5].getPiece() || king.kingInCheck(this, this.chessBoard[row][5].getPos())) return false;\n      newRookSquare = this.chessBoard[row][5];\n    } else {\n      rookSquare = this.chessBoard[row][0];\n      if (this.chessBoard[row][3].getPiece() || king.kingInCheck(this, this.chessBoard[row][3].getPos()) || this.chessBoard[row][2].getPiece() || king.kingInCheck(this, this.chessBoard[row][2].getPos()) || this.chessBoard[row][1].getPiece() || king.kingInCheck(this, this.chessBoard[row][1].getPos())) return false;\n      newRookSquare = this.chessBoard[row][3];\n    }\n    const rook = rookSquare.getPiece();\n    if (!rook || rook.getType() !== PieceType.ROOK) return false;\n    if (rook.beenMoved) return false;\n    rookSquare.setPiece(undefined);\n    startSquare.setPiece(undefined);\n    newRookSquare.setPiece(rook);\n    endSquare.setPiece(king);\n    king.beenMoved = true;\n    rook.beenMoved = true;\n    this.moveList.push({\n      fromSquare: startSquare.getPos(),\n      toSquare: endSquare.getPos()\n    });\n    return true;\n  }\n  queeningMove(startSquare, endSquare) {\n    const pawn = startSquare.getPiece();\n    const endSquarePos = this.posToArrayPos(endSquare.getPos());\n    if (!pawn || pawn.getType() !== PieceType.PAWN) return false;\n    if (!endSquarePos) return false;\n    const pawnColor = pawn.getColor();\n    let endRow = pawnColor === PlayerColor.WHITE ? 0 : 7;\n    let endSquareRow = endSquarePos.i;\n    if (pawnColor === PlayerColor.WHITE && endSquareRow !== endRow) return false;else if (pawnColor === PlayerColor.BLACK && endSquareRow !== endRow) return false;\n    startSquare.setPiece(undefined);\n    endSquare.setPiece(new QueenModel(PieceType.QUEEN, pawnColor));\n    this.moveList.push({\n      fromSquare: startSquare.getPos(),\n      toSquare: endSquare.getPos()\n    });\n    return true;\n  }\n  enPassant(startSquare, endSquare) {\n    const board = this.chessBoard;\n    const pawn = startSquare.getPiece();\n    const startSquarePos = this.posToArrayPos(startSquare.getPos());\n    if (this.moveList.length === 0) return false;\n    const lastMove = this.getMoveList().slice(-1)[0];\n    const pieceLastMovedNewPos = this.posToArrayPos(lastMove.toSquare);\n    const pieceLastMovedOldPos = this.posToArrayPos(lastMove.fromSquare);\n    if (!pawn || pawn.getType() !== PieceType.PAWN) return false;\n    if (!startSquarePos) return false;\n    if (!pieceLastMovedNewPos || !pieceLastMovedOldPos) return false;\n    let direction = PawnModel.pawnDirections(pawn.getColor());\n    const pieceLastMoved = board[pieceLastMovedNewPos.i][pieceLastMovedNewPos.j];\n    let pieceLeft;\n    let pieceRight;\n    if (ChessBoardModel.withinBoard(startSquarePos.i, startSquarePos.j - 1)) {\n      pieceLeft = board[startSquarePos.i][startSquarePos.j - 1];\n    }\n    if (ChessBoardModel.withinBoard(startSquarePos.i, startSquarePos.j + 1)) {\n      pieceRight = board[startSquarePos.i][startSquarePos.j + 1];\n    }\n    let pieceLeftTakes = board[startSquarePos.i + direction.takes.left.dy][startSquarePos.j + direction.takes.left.dx];\n    let pieceRightTakes = board[startSquarePos.i + direction.takes.right.dy][startSquarePos.j + direction.takes.right.dx];\n    let pieceLastMovedDx = Math.abs(pieceLastMovedNewPos.j - pieceLastMovedOldPos.j);\n    let pieceLastMovedDy = Math.abs(pieceLastMovedNewPos.i - pieceLastMovedOldPos.i);\n    if (pieceLastMoved == pieceLeft && pieceLastMovedDx === 0 && pieceLastMovedDy === 2 && endSquare === pieceLeftTakes) {\n      startSquare.setPiece(undefined);\n      pieceLeft.setPiece(undefined);\n      pieceLeftTakes.setPiece(pawn);\n      this.moveList.push({\n        fromSquare: startSquare.getPos(),\n        toSquare: endSquare.getPos()\n      });\n      return true;\n    }\n    if (pieceLastMoved == pieceRight && pieceLastMovedDx === 0 && pieceLastMovedDy === 2 && endSquare === pieceRightTakes) {\n      startSquare.setPiece(undefined);\n      pieceRight.setPiece(undefined);\n      pieceRightTakes.setPiece(pawn);\n      this.moveList.push({\n        fromSquare: startSquare.getPos(),\n        toSquare: endSquare.getPos()\n      });\n      return true;\n    }\n    return false;\n  }\n  isKingInCheck(kingColor) {\n    const kingLocation = this.searchBoardForPiece(PieceType.KING, kingColor);\n    const kingPos = kingLocation.pos;\n    if (!kingPos) return false;\n    const king = kingLocation.piece;\n    if (!king) return false;\n    return king.kingInCheck(this, kingPos);\n  }\n  searchBoardForPiece(pieceType, pieceColor) {\n    for (let row of this.chessBoard) {\n      for (let square of row) {\n        const piece = square.getPiece();\n        if (piece && piece.getType() === pieceType && piece.getColor() === pieceColor) return {\n          pos: square.getPos(),\n          piece: piece\n        };\n      }\n    }\n    return {\n      pos: undefined,\n      piece: undefined\n    };\n  }\n  searchBoardFromPos(ignorePiece, startPos, directions, pieceType, callback) {\n    const board = this.getChessBoard();\n    const posArray = this.posToArrayPos(startPos);\n    if (!posArray) return false;\n    for (const [key, value] of Object.entries(directions)) {\n      let i = posArray.i;\n      let j = posArray.j;\n      let result = callback(board, ignorePiece, i, j, value, pieceType);\n      if (result) return true;\n    }\n    return false;\n  }\n  findPiece(board, ignorePiece, i, j, direction, pieceType) {\n    i += direction.dy;\n    j += direction.dx;\n    if (ChessBoardModel.withinBoard(i, j)) {\n      const currentPiece = board[i][j].getPiece();\n      if (currentPiece && currentPiece.getColor() !== ignorePiece.getColor()) {\n        if (currentPiece.getType() == pieceType) {\n          return true;\n        } else {\n          return false;\n        }\n      } else if (currentPiece && currentPiece.getColor() === ignorePiece.getColor() && currentPiece !== ignorePiece) {\n        return false;\n      }\n    }\n    return false;\n  }\n  findPieceInDirection(board, ignorePiece, i, j, direction, pieceType) {\n    let flag = true;\n    while (flag) {\n      i += direction.dy;\n      j += direction.dx;\n      if (ChessBoardModel.withinBoard(i, j)) {\n        const currentPiece = board[i][j].getPiece();\n        if (currentPiece && currentPiece.getColor() !== ignorePiece.getColor()) {\n          if (currentPiece.getType() == pieceType) {\n            return true;\n          } else {\n            flag = false;\n          }\n        } else if (currentPiece && currentPiece.getColor() === ignorePiece.getColor() && currentPiece !== ignorePiece) {\n          flag = false;\n        }\n      } else flag = false;\n    }\n    return false;\n  }\n  findPawnAttack(ignorePiece, kingPos) {\n    let pawnDirection = PawnModel.pawnDirections(ignorePiece.getColor());\n    const posArray = this.posToArrayPos(kingPos);\n    if (!posArray) return false;\n    let leftTakes = pawnDirection.takes.left;\n    let rightTakes = pawnDirection.takes.right;\n    return this.findPiece(this.chessBoard, ignorePiece, posArray.i, posArray.j, leftTakes, PieceType.PAWN) || this.findPiece(this.chessBoard, ignorePiece, posArray.i, posArray.j, rightTakes, PieceType.PAWN);\n  }\n  posToArrayPos(pos) {\n    return this.posMap.get(pos);\n  }\n  getSquareByPos(pos) {\n    let arrayPos = this.posMap.get(pos);\n    if (!arrayPos) return null;\n    let iPos = arrayPos.i;\n    let jPos = arrayPos.j;\n    if (!iPos || !jPos) return null;\n    return this.chessBoard[iPos][jPos];\n  }\n  static withinBoard(i, j) {\n    return i >= 0 && i < BOARD_SIZE && j >= 0 && j < BOARD_SIZE;\n  }\n  initBoard() {\n    let col = ROW_VALUES;\n    let row = [...COL_VALUES].reverse();\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let pos = col[j] + row[i];\n        this.posMap.set(pos, {\n          i: i,\n          j: j\n        });\n        let color = (j + i + 2) % 2 == 0 ? PlayerColor.WHITE : PlayerColor.BLACK;\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.WHITE);\n    } else if (row == 7) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.BLACK);\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.WHITE);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.WHITE);\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.BLACK);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.BLACK);\n      }\n    } else {\n      return undefined;\n    }\n  }\n  clone() {\n    const clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    clone.chessBoard = this.chessBoard.map(row => row.map(square => {\n      const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n      const piece = square.getPiece();\n      if (piece) {\n        const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece);\n        clonedSquare.setPiece(clonedPiece);\n      }\n      return clonedSquare;\n    }));\n    clone.posMap = new Map(this.posMap);\n    return clone;\n  }\n}","map":{"version":3,"names":["PawnModel","RookModel","KnightModel","BishopModel","QueenModel","KingModel","SquareModel","ROW_VALUES","COL_VALUES","PlayerColor","PieceType","BOARD_SIZE","ChessBoardModel","constructor","playerColor","chessBoard","posMap","Map","moveList","initBoard","getChessBoard","getMoveList","getPosMap","move","fromSquare","toSquare","pieceOnFromSquare","getPiece","pieceColor","getColor","castleMove","queeningMove","enPassant","validMove","beenMoved","setPiece","undefined","push","getPos","startSquare","endSquare","pieceMove","king","rookSquare","newRookSquare","endSquarePos","getType","KING","kingColor","row","WHITE","charAt","kingInCheck","rook","ROOK","pawn","posToArrayPos","PAWN","pawnColor","endRow","endSquareRow","i","BLACK","QUEEN","board","startSquarePos","length","lastMove","slice","pieceLastMovedNewPos","pieceLastMovedOldPos","direction","pawnDirections","pieceLastMoved","j","pieceLeft","pieceRight","withinBoard","pieceLeftTakes","takes","left","dy","dx","pieceRightTakes","right","pieceLastMovedDx","Math","abs","pieceLastMovedDy","isKingInCheck","kingLocation","searchBoardForPiece","kingPos","pos","piece","pieceType","square","searchBoardFromPos","ignorePiece","startPos","directions","callback","posArray","key","value","Object","entries","result","findPiece","currentPiece","findPieceInDirection","flag","findPawnAttack","pawnDirection","leftTakes","rightTakes","get","getSquareByPos","arrayPos","iPos","jPos","col","reverse","set","color","genPiece","KNIGHT","BISHOP","clone","assign","create","getPrototypeOf","map","clonedSquare","clonedPiece"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./pieces/PieceModel\";\nimport { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE} from \"../utils/Constants\";\n\nexport class ChessBoardModel{\n    private chessBoard: Array<Array<SquareModel>>;\n    private playerColor:PlayerColor;\n    private posMap:Map<string,{i:number,j:number}> = new Map();\n    private moveList:Array<{fromSquare:string, toSquare:string}>=[];\n\n    public constructor(playerColor:PlayerColor){\n        this.playerColor = playerColor;\n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        this.initBoard();\n    }\n\n    public getChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    public getMoveList(){\n        return this.moveList;\n    }\n    public getPosMap():Map<string,{i:number,j:number}>{\n        return this.posMap;\n    }\n    public move(fromSquare:SquareModel, toSquare:SquareModel){\n        if(fromSquare && toSquare){\n            let pieceOnFromSquare: PieceModel | undefined = fromSquare.getPiece();\n            if(!pieceOnFromSquare) return;\n\n            let pieceColor = pieceOnFromSquare.getColor();\n            if(this.castleMove(fromSquare,toSquare)) return;\n            if(this.queeningMove(fromSquare,toSquare)) return;\n            if(this.enPassant(fromSquare,toSquare)) return;\n            if(!this.validMove(fromSquare,toSquare,pieceColor)) return;\n\n            pieceOnFromSquare.beenMoved = true;\n            fromSquare.setPiece(undefined);\n            toSquare.setPiece(pieceOnFromSquare);\n            this.moveList.push({fromSquare:fromSquare.getPos(),toSquare:toSquare.getPos()});\n        }\n    }\n    public validMove(startSquare:SquareModel, endSquare:SquareModel, playerColor:PlayerColor){\n        const pieceMove = startSquare.getPiece();\n        if(pieceMove &&\n           pieceMove.validMove(this,startSquare,endSquare,playerColor)){\n           return true;\n        }\n        return false;\n    }\n\n    public castleMove(startSquare:SquareModel, endSquare:SquareModel){\n        const king = startSquare.getPiece() as KingModel;\n        let rookSquare = null;\n        let newRookSquare = null;\n        const endSquarePos = endSquare.getPos();\n\n        if(!king || king.getType() !== PieceType.KING) return false;\n        if(king.beenMoved) return false;\n        if( endSquarePos !== \"c1\" && endSquarePos !== \"g1\" &&\n            endSquarePos !== \"c8\" && endSquarePos !== \"g8\") return false;\n        const kingColor = king.getColor();\n        const row = kingColor === PlayerColor.WHITE? 7:0;\n\n        if(endSquarePos.charAt(0) === \"g\"){\n            rookSquare = this.chessBoard[row][7];\n            if( this.chessBoard[row][6].getPiece() || king.kingInCheck(this,this.chessBoard[row][6].getPos())||\n                this.chessBoard[row][5].getPiece() || king.kingInCheck(this,this.chessBoard[row][5].getPos())\n            ) return false;\n            newRookSquare = this.chessBoard[row][5];\n        }\n        else{\n            rookSquare = this.chessBoard[row][0]; \n            if( this.chessBoard[row][3].getPiece() || king.kingInCheck(this,this.chessBoard[row][3].getPos())||\n                this.chessBoard[row][2].getPiece() || king.kingInCheck(this,this.chessBoard[row][2].getPos())||\n                this.chessBoard[row][1].getPiece() || king.kingInCheck(this,this.chessBoard[row][1].getPos())\n            ) return false;\n            newRookSquare = this.chessBoard[row][3];\n        }\n        const rook = rookSquare.getPiece();\n        if(!rook || rook.getType() !== PieceType.ROOK) return false;\n        if(rook.beenMoved) return false;\n\n        rookSquare.setPiece(undefined);\n        startSquare.setPiece(undefined);\n        newRookSquare.setPiece(rook);\n        endSquare.setPiece(king);\n        king.beenMoved = true;\n        rook.beenMoved = true;\n        this.moveList.push({fromSquare:startSquare.getPos(),toSquare:endSquare.getPos()});\n        return true;\n    }\n    private queeningMove(startSquare:SquareModel, endSquare:SquareModel){\n        const pawn = startSquare.getPiece();\n        const endSquarePos = this.posToArrayPos(endSquare.getPos());\n        if(!pawn || pawn.getType() !== PieceType.PAWN) return false;\n        if(!endSquarePos) return false;\n        \n        const pawnColor = pawn.getColor();\n        let endRow = pawnColor === PlayerColor.WHITE? 0:7;\n        let endSquareRow = endSquarePos.i;\n        \n        if(pawnColor===PlayerColor.WHITE && endSquareRow!==endRow) return false;\n        else if(pawnColor===PlayerColor.BLACK && endSquareRow!==endRow) return false;\n\n        startSquare.setPiece(undefined);\n        endSquare.setPiece(new QueenModel(PieceType.QUEEN,pawnColor));\n        this.moveList.push({fromSquare:startSquare.getPos(),toSquare:endSquare.getPos()});\n        return true;\n    }\n    private enPassant(startSquare:SquareModel, endSquare:SquareModel){\n        const board = this.chessBoard;\n        const pawn = startSquare.getPiece();\n        const startSquarePos = this.posToArrayPos(startSquare.getPos());\n        if(this.moveList.length === 0) return false;\n\n        const lastMove = this.getMoveList().slice(-1)[0];\n        const pieceLastMovedNewPos = this.posToArrayPos(lastMove.toSquare);\n        const pieceLastMovedOldPos = this.posToArrayPos(lastMove.fromSquare);\n\n        if(!pawn || pawn.getType() !== PieceType.PAWN) return false;\n        if(!startSquarePos) return false;\n        if(!pieceLastMovedNewPos || !pieceLastMovedOldPos) return false;\n\n        let direction = PawnModel.pawnDirections(pawn.getColor());\n        \n        const pieceLastMoved = board[pieceLastMovedNewPos.i][pieceLastMovedNewPos.j];\n\n        let pieceLeft;\n        let pieceRight;\n        if(ChessBoardModel.withinBoard(startSquarePos.i,startSquarePos.j-1)){\n            pieceLeft = board[startSquarePos.i][startSquarePos.j-1];\n        }\n        if(ChessBoardModel.withinBoard(startSquarePos.i,startSquarePos.j+1)){\n            pieceRight = board[startSquarePos.i][startSquarePos.j+1];\n        }\n        let pieceLeftTakes = board[startSquarePos.i+direction.takes.left.dy][startSquarePos.j+direction.takes.left.dx];\n        let pieceRightTakes = board[startSquarePos.i+direction.takes.right.dy][startSquarePos.j+direction.takes.right.dx];\n        let pieceLastMovedDx = Math.abs(pieceLastMovedNewPos.j-pieceLastMovedOldPos.j);\n        let pieceLastMovedDy = Math.abs(pieceLastMovedNewPos.i-pieceLastMovedOldPos.i);\n        if(pieceLastMoved == pieceLeft && pieceLastMovedDx===0 && pieceLastMovedDy===2 && endSquare === pieceLeftTakes){\n            startSquare.setPiece(undefined);\n            pieceLeft.setPiece(undefined);\n            pieceLeftTakes.setPiece(pawn);\n            this.moveList.push({fromSquare:startSquare.getPos(),toSquare:endSquare.getPos()});\n            return true;\n        }\n        if(pieceLastMoved == pieceRight && pieceLastMovedDx===0 && pieceLastMovedDy===2 && endSquare === pieceRightTakes){\n            startSquare.setPiece(undefined);\n            pieceRight.setPiece(undefined);\n            pieceRightTakes.setPiece(pawn);\n            this.moveList.push({fromSquare:startSquare.getPos(),toSquare:endSquare.getPos()});\n            return true;\n        }\n        return false;\n    }\n    public isKingInCheck(kingColor:PlayerColor): boolean {\n        const kingLocation = this.searchBoardForPiece(PieceType.KING, kingColor)\n        const kingPos = kingLocation.pos;\n        if(!kingPos) return false;\n\n        const king = kingLocation.piece as KingModel;\n        if(!king) return false;\n\n        return king.kingInCheck(this,kingPos);\n    }\n    public searchBoardForPiece(pieceType:PieceType,pieceColor:PlayerColor):{pos:string | undefined, piece:PieceModel | undefined}{\n        for(let row of this.chessBoard){\n            for(let square of row){\n                const piece = square.getPiece();\n                if(piece && \n                   piece.getType() === pieceType &&\n                   piece.getColor() === pieceColor\n                   ) return {pos: square.getPos(), piece: piece};\n            }\n        }\n        return {pos:undefined, piece:undefined};\n    }\n    public searchBoardFromPos(ignorePiece:PieceModel,startPos:string, directions:Object, pieceType:PieceType, callback:Function){\n        const board = this.getChessBoard();\n        const posArray = this.posToArrayPos(startPos);\n        if(!posArray) return false;\n\n        for(const [key,value] of Object.entries(directions)){\n            let i = posArray.i;\n            let j = posArray.j;\n\n            let result = callback(board,ignorePiece,i,j,value,pieceType);\n            if(result) return true;\n        }\n\n        return false;\n    }\n    public findPiece(board: Array<Array<SquareModel>>,ignorePiece:PieceModel,i:number,j:number,direction:{dx:number,dy:number}, pieceType:PieceType){\n        i += direction.dy;\n        j += direction.dx;\n        if(ChessBoardModel.withinBoard(i,j)){\n            const currentPiece = board[i][j].getPiece();\n            if(currentPiece && currentPiece.getColor() !== ignorePiece.getColor()){\n                if( currentPiece.getType() == pieceType ){\n                        return true;\n                }\n                else{\n                    return false;\n                }\n            }else if( currentPiece && \n                        currentPiece.getColor() === ignorePiece.getColor() &&\n                        currentPiece !== ignorePiece){\n                return false;\n            }\n        }\n        return false;\n    }\n    public findPieceInDirection(board: Array<Array<SquareModel>>,ignorePiece:PieceModel,i:number,j:number,direction:{dx:number,dy:number}, pieceType:PieceType){\n        let flag = true;\n        while(flag){\n            i += direction.dy;\n            j += direction.dx;\n\n\n            if(ChessBoardModel.withinBoard(i,j)){\n                const currentPiece = board[i][j].getPiece();\n                if(currentPiece && currentPiece.getColor() !== ignorePiece.getColor()){\n                    if( currentPiece.getType() == pieceType){\n                            return true;\n                    }\n                    else{\n                        flag = false;\n                    }\n                }else if( currentPiece && \n                            currentPiece.getColor() === ignorePiece.getColor() &&\n                            currentPiece !== ignorePiece){\n                    flag = false;\n                }\n            }\n            else flag = false;\n        }       \n        return false;  \n    }\n    public findPawnAttack(ignorePiece:PieceModel,kingPos:string){\n        let pawnDirection = PawnModel.pawnDirections(ignorePiece.getColor());\n        const posArray = this.posToArrayPos(kingPos);\n        if(!posArray) return false;\n        let leftTakes = pawnDirection.takes.left;\n        let rightTakes = pawnDirection.takes.right;\n\n        return this.findPiece(this.chessBoard,ignorePiece,posArray.i,posArray.j,leftTakes,PieceType.PAWN) ||\n               this.findPiece(this.chessBoard,ignorePiece,posArray.i,posArray.j,rightTakes,PieceType.PAWN)\n    }\n    public posToArrayPos(pos: string){\n        return this.posMap.get(pos);\n    }\n\n    public getSquareByPos(pos: string){\n        let arrayPos = this.posMap.get(pos);\n        if(!arrayPos) return null;\n\n        let iPos = arrayPos.i;\n        let jPos = arrayPos.j;\n\n        if(!iPos || !jPos) return null;\n\n        return this.chessBoard[iPos][jPos];\n    }\n    public static withinBoard(i:number, j:number){\n        return i>=0 &&\n               i<BOARD_SIZE &&\n               j>=0 &&\n               j<BOARD_SIZE;\n    }\n\n    private initBoard(){\n        let col = ROW_VALUES;\n        let row = [...COL_VALUES].reverse();\n       \n        for(let i = 0; i< BOARD_SIZE; i++){\n            for(let j = 0; j< BOARD_SIZE; j++){\n\n                let pos:string = col[j]+row[i];\n                this.posMap.set(pos,{i:i, j:j});\n                let color = (j+i+2) % 2 == 0? PlayerColor.WHITE:PlayerColor.BLACK\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PawnModel(PieceType.PAWN,PlayerColor.WHITE);\n        }\n        else if(row == 7){\n            return new PawnModel(PieceType.PAWN,PlayerColor.BLACK);\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.WHITE);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.WHITE);\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.BLACK);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.BLACK);\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n\n    public clone():ChessBoardModel{\n        const clone =Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        clone.chessBoard = this.chessBoard.map((row) =>\n            row.map((square) => {\n            const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n            const piece = square.getPiece();\n            if (piece) {\n                const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece)\n                clonedSquare.setPiece(clonedPiece);\n            }\n            return clonedSquare;\n            })\n        );\n\n        clone.posMap = new Map(this.posMap);\n        return clone;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}