{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/pages/GameplayPage.tsx\",\n  _s = $RefreshSig$();\nimport { API_URL, PlayerColor } from \"../utils/Constants\";\nimport Chessboard from \"../components/chess/game/board/Chessboard\";\nimport './GamePlayPage.css';\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { socketConnection } from \"../lib/webSocket/socketConnection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameplayPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const [socket, setSocket] = useState(socketConnection);\n  const [playerColor, setPlayerColor] = useState(PlayerColor.WHITE);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if (!user) {\n      navigate('/login');\n    }\n  }, [user, navigate]);\n  useEffect(() => {\n    const gameString = localStorage.getItem('game');\n    if (!gameString) navigate('/');else {\n      const game = JSON.parse(gameString);\n      if (game.host) createGame(game.room);else joinGame(game.room);\n    }\n    socket.on('endGame', leaveGame);\n    socket.on(\"ready\", () => setLoaded(true));\n  }, []);\n  const createGame = room => {\n    axios.post(API_URL + \"/api/game/create\", {\n      room\n    }).then(res => {\n      socket.emit('joinGame', room);\n      setPlayerColor(PlayerColor.WHITE);\n      //setLoaded(true)\n    }).catch(err => {\n      navigate(\"/\");\n    });\n  };\n  const joinGame = room => {\n    axios.post(API_URL + \"/api/game/join\", {\n      room\n    }).then(res => {\n      socket.emit('joinGame', room);\n      socket.emit('startGame');\n      setPlayerColor(PlayerColor.BLACK);\n      //setLoaded(true)\n    }).catch(err => {\n      navigate(\"/\");\n      alert(\"Lobby does not exist\");\n    });\n  };\n  const leaveGame = () => {\n    socket.emit(\"leaveGame\");\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"gamePlayPage\",\n    children: loaded && /*#__PURE__*/_jsxDEV(Chessboard, {\n      socket: socket,\n      playerColor: playerColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(GameplayPage, \"krv0ZKLoxXSChBSwxf60JjUsVoQ=\", false, function () {\n  return [useNavigate, useSelector];\n});\n_c = GameplayPage;\nvar _c;\n$RefreshReg$(_c, \"GameplayPage\");","map":{"version":3,"names":["API_URL","PlayerColor","Chessboard","useEffect","useState","useNavigate","useSelector","axios","socketConnection","jsxDEV","_jsxDEV","GameplayPage","_s","navigate","user","state","auth","socket","setSocket","playerColor","setPlayerColor","WHITE","loaded","setLoaded","gameString","localStorage","getItem","game","JSON","parse","host","createGame","room","joinGame","on","leaveGame","post","then","res","emit","catch","err","BLACK","alert","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/pages/GameplayPage.tsx"],"sourcesContent":["import { API_URL,PlayerColor } from \"../utils/Constants\";\nimport Chessboard from \"../components/chess/game/board/Chessboard\";\nimport './GamePlayPage.css';\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\"\nimport { useSelector } from \"react-redux\"\nimport axios from \"axios\";\nimport { socketConnection } from \"../lib/webSocket/socketConnection\";\n\nexport default function GameplayPage(){\n\n    const navigate = useNavigate();\n\n    const {user} = useSelector((state:any) => state.auth);\n    const [socket, setSocket] = useState(socketConnection);\n    const [playerColor, setPlayerColor] = useState(PlayerColor.WHITE);\n    const [loaded, setLoaded] = useState(false);\n    useEffect(() =>{\n        if(!user){\n            navigate('/login')\n        }\n    },[user,navigate]);\n\n    useEffect(() => {\n        const gameString = localStorage.getItem('game');\n        if(!gameString) navigate('/');\n        else{\n            const game = JSON.parse(gameString);\n            if(game.host) createGame(game.room);\n            else joinGame(game.room);\n        }\n        socket.on('endGame', leaveGame);\n        socket.on(\"ready\", ()=> setLoaded(true))\n    }, []);\n\n    const createGame = (room:string)=>{\n        axios.post(API_URL+\"/api/game/create\",{room})\n        .then(res => {\n            socket.emit('joinGame',room);\n            setPlayerColor(PlayerColor.WHITE);\n            //setLoaded(true)\n        })\n        .catch(err => {\n            navigate(\"/\");\n        });\n    }\n    const joinGame = (room:string)=>{\n        axios.post(API_URL+\"/api/game/join\",{room})\n        .then(res => {\n            socket.emit('joinGame',room);\n            socket.emit('startGame');\n            setPlayerColor(PlayerColor.BLACK);\n            //setLoaded(true)\n        })\n        .catch(err => {\n            navigate(\"/\");\n            alert(\"Lobby does not exist\")\n        });\n    }\n\n    const leaveGame = ()=>{\n        socket.emit(\"leaveGame\");\n        navigate(\"/\");\n    }\n    return (\n        <div id=\"gamePlayPage\">\n            {loaded && <Chessboard socket={socket} playerColor={playerColor}></Chessboard>}\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}