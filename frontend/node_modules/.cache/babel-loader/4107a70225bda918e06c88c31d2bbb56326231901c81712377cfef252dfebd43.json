{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nexport class RookModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    return true;\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const rook = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (rook) {\n      const rookDirections = this.rookDirections();\n      const left = rookDirections.left;\n      const right = rookDirections.right;\n      const up = rookDirections.up;\n      const down = rookDirections.down;\n      const chessNotation = square.getPos();\n      const posArray = boardModel.posToArrayPos(chessNotation);\n      if (posArray) {\n        let i = posArray.i;\n        let j = posArray.j;\n        let flag = true;\n        while (flag) {\n          let leftI = i + left.dy;\n          let leftJ = j + left.dx;\n          if (this.withinBoard(leftI, leftJ)) {\n            const tempSquare = board[leftI][leftJ];\n          }\n        }\n      }\n    }\n    return new Set();\n  }\n  rookDirections() {\n    return {\n      left: {\n        dx: -1,\n        dy: 0\n      },\n      right: {\n        dx: 1,\n        dy: 0\n      },\n      up: {\n        dx: 0,\n        dy: -1\n      },\n      down: {\n        dx: 0,\n        dy: 1\n      }\n    };\n  }\n}","map":{"version":3,"names":["PieceModel","RookModel","constructor","type","color","validMove","boardModel","startSquare","endSquare","playerColor","updatePossibleMoves","square","rook","getPiece","board","getChessBoard","possibleMoves","clear","rookDirections","left","right","up","down","chessNotation","getPos","posArray","posToArrayPos","i","j","flag","leftI","dy","leftJ","dx","withinBoard","tempSquare","Set"],"sources":["/home/brian/Desktop/Chess/frontend/src/model/pieces/RookModel.ts"],"sourcesContent":["import { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\n\nexport class RookModel extends PieceModel{\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n        return true;\n    }\n\n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const rook = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(rook){\n            const rookDirections = this.rookDirections();\n            const left = rookDirections.left;\n            const right = rookDirections.right;\n            const up = rookDirections.up;\n            const down = rookDirections.down;\n\n            const chessNotation = square.getPos();\n            const posArray = boardModel.posToArrayPos(chessNotation);\n\n            if(posArray){\n                let i = posArray.i;\n                let j = posArray.j;\n                let flag = true;\n                while(flag){\n                    let leftI:number = i+left.dy;\n                    let leftJ:number = j+left.dx\n                    if(this.withinBoard(leftI,leftJ)){\n                        const tempSquare:SquareModel = board[leftI][leftJ];\n                    }\n                }\n            }\n        }\n        return new Set<string>();\n    }\n\n    private rookDirections(){\n        return {\n            left:{\n                dx:-1,\n                dy:0\n            },\n            right:{\n                dx:1,\n                dy:0\n            },\n            up:{\n                dx:0,\n                dy:-1\n            },\n            down:{\n                dx:0,\n                dy:1\n            }\n        }\n    }\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,cAAc;AAIzC,OAAO,MAAMC,SAAS,SAASD,UAAU;EAC9BE,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IACnD,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;EACtB;EAEOC,SAASA,CAACC,UAA0B,EAAEC,WAAuB,EAChEC,SAAqB,EAAEC,WAAuB,EAAW;IACzD,OAAO,IAAI;EACf;EAEQC,mBAAmBA,CAACJ,UAA0B,EAAEK,MAAkB,EAAEF,WAAuB,EAAa;IAC5G,MAAMG,IAAI,GAAGD,MAAM,CAACE,QAAQ,CAAC,CAAC;IAC9B,MAAMC,KAAK,GAAGR,UAAU,CAACS,aAAa,CAAC,CAAC;IACxC,IAAI,CAACC,aAAa,CAACC,KAAK,CAAC,CAAC;IAE1B,IAAGL,IAAI,EAAC;MACJ,MAAMM,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC,CAAC;MAC5C,MAAMC,IAAI,GAAGD,cAAc,CAACC,IAAI;MAChC,MAAMC,KAAK,GAAGF,cAAc,CAACE,KAAK;MAClC,MAAMC,EAAE,GAAGH,cAAc,CAACG,EAAE;MAC5B,MAAMC,IAAI,GAAGJ,cAAc,CAACI,IAAI;MAEhC,MAAMC,aAAa,GAAGZ,MAAM,CAACa,MAAM,CAAC,CAAC;MACrC,MAAMC,QAAQ,GAAGnB,UAAU,CAACoB,aAAa,CAACH,aAAa,CAAC;MAExD,IAAGE,QAAQ,EAAC;QACR,IAAIE,CAAC,GAAGF,QAAQ,CAACE,CAAC;QAClB,IAAIC,CAAC,GAAGH,QAAQ,CAACG,CAAC;QAClB,IAAIC,IAAI,GAAG,IAAI;QACf,OAAMA,IAAI,EAAC;UACP,IAAIC,KAAY,GAAGH,CAAC,GAACR,IAAI,CAACY,EAAE;UAC5B,IAAIC,KAAY,GAAGJ,CAAC,GAACT,IAAI,CAACc,EAAE;UAC5B,IAAG,IAAI,CAACC,WAAW,CAACJ,KAAK,EAACE,KAAK,CAAC,EAAC;YAC7B,MAAMG,UAAsB,GAAGrB,KAAK,CAACgB,KAAK,CAAC,CAACE,KAAK,CAAC;UACtD;QACJ;MACJ;IACJ;IACA,OAAO,IAAII,GAAG,CAAS,CAAC;EAC5B;EAEQlB,cAAcA,CAAA,EAAE;IACpB,OAAO;MACHC,IAAI,EAAC;QACDc,EAAE,EAAC,CAAC,CAAC;QACLF,EAAE,EAAC;MACP,CAAC;MACDX,KAAK,EAAC;QACFa,EAAE,EAAC,CAAC;QACJF,EAAE,EAAC;MACP,CAAC;MACDV,EAAE,EAAC;QACCY,EAAE,EAAC,CAAC;QACJF,EAAE,EAAC,CAAC;MACR,CAAC;MACDT,IAAI,EAAC;QACDW,EAAE,EAAC,CAAC;QACJF,EAAE,EAAC;MACP;IACJ,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}