{"ast":null,"code":"import { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE } from \"../utils/Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.posMap = new Map();\n    this.moveList = void 0;\n    this.playerColor = playerColor;\n    this.moveList = [];\n    let col = ROW_VALUES;\n    let row = [...COL_VALUES].reverse();\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let pos = col[j] + row[i];\n        this.posMap.set(pos, {\n          i: i,\n          j: j\n        });\n        let color = (j + i + 2) % 2 == 0 ? PlayerColor.WHITE : PlayerColor.BLACK;\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n  }\n  getChessBoard() {\n    return this.chessBoard;\n  }\n  getMoveList() {\n    return this.moveList;\n  }\n  getPosMap() {\n    return this.posMap;\n  }\n  pieceMove(fromSquare, toSquare) {\n    if (fromSquare && toSquare) {\n      let pieceOnFromSquare = fromSquare.getPiece();\n      if (pieceOnFromSquare) {\n        pieceOnFromSquare.beenMoved = true;\n        fromSquare.setPiece(undefined);\n        toSquare.setPiece(pieceOnFromSquare);\n      }\n    }\n  }\n  validMove(startSquare, endSquare, playerColor) {\n    const pieceMove = startSquare.getPiece();\n    if (pieceMove && pieceMove.validMove(this, startSquare, endSquare, playerColor)) {\n      return true;\n    }\n    return false;\n  }\n\n  // public isKingInCheck(king: PieceModel): boolean {\n  //     // let kingPos: string | undefined;\n  //     // const playerColor = king.getColor();\n  //     // const opponentColor = playerColor === PlayerColor.WHITE ? PlayerColor.BLACK : PlayerColor.WHITE;\n\n  //     // this.chessBoard.forEach((row) => {\n  //     //   row.forEach((square) => {\n  //     //     const piece = square.getPiece();\n  //     //     if (piece?.getType() === PieceType.KING && piece.getColor() === playerColor) {\n  //     //       kingPos = square.getPos();\n  //     //     }\n  //     //   });\n  //     // });\n\n  //     // if (kingPos) {\n  //     //     let kingSquare = this.getSquareByPos(kingPos);\n\n  //     //     for (let i = 0; i < BOARD_SIZE; i++) {\n  //     //         for (let j = 0; j < BOARD_SIZE; j++) {\n  //     //             const square = this.chessBoard[i][j];\n  //     //             const piece = square.getPiece();\n\n  //     //             if (piece && piece.getColor() !== playerColor && kingSquare &&\n  //     //                 this.validMove(square, kingSquare, opponentColor)) {\n  //     //                 return true;\n  //     //             }\n  //     //         }\n  //     //     }\n  //     // }\n\n  //     // return false;\n  // }\n  searchBoard(ignorePiece, startPos, directions, pieceType, callback) {\n    const board = this.getChessBoard();\n    const posArray = this.posToArrayPos(startPos);\n    console.log(this);\n    if (!posArray) return false;\n    for (const [key, value] of Object.entries(directions)) {\n      let i = posArray.i;\n      let j = posArray.j;\n      let result = callback(ignorePiece, i, j, value, pieceType);\n      if (result) return true;\n    }\n    return false;\n  }\n  findPiece(piece, i, j, direction, pieceType) {\n    i += direction.dy;\n    j += direction.dx;\n    const board = this.getChessBoard();\n    if (ChessBoardModel.withinBoard(i, j)) {\n      const currentPiece = board[i][j].getPiece();\n      if (currentPiece && currentPiece.getColor() !== piece.getColor()) {\n        if (currentPiece.getType() == pieceType) {\n          return true;\n        } else {\n          return false;\n        }\n      } else if (currentPiece && currentPiece.getColor() === piece.getColor() && currentPiece !== piece) {\n        return false;\n      }\n    }\n    return false;\n  }\n  findPieceInDirection(piece, i, j, direction, pieceType) {\n    let flag = true;\n    console.log(this);\n    const board = this.getChessBoard();\n    while (flag) {\n      i += direction.dy;\n      j += direction.dx;\n      if (ChessBoardModel.withinBoard(i, j)) {\n        const currentPiece = board[i][j].getPiece();\n        if (currentPiece && currentPiece.getColor() !== piece.getColor()) {\n          if (currentPiece.getType() == pieceType) {\n            return true;\n          } else {\n            flag = false;\n          }\n        } else if (currentPiece && currentPiece.getColor() === piece.getColor() && currentPiece !== piece) {\n          flag = false;\n        }\n      } else flag = false;\n    }\n    return false;\n  }\n  posToArrayPos(pos) {\n    return this.posMap.get(pos);\n  }\n  getSquareByPos(pos) {\n    let arrayPos = this.posMap.get(pos);\n    if (!arrayPos) return null;\n    let iPos = arrayPos.i;\n    let jPos = arrayPos.j;\n    if (!iPos || !jPos) return null;\n    return this.chessBoard[iPos][jPos];\n  }\n  static withinBoard(i, j) {\n    return i >= 0 && i < BOARD_SIZE && j >= 0 && j < BOARD_SIZE;\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.WHITE);\n    } else if (row == 7) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.BLACK);\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.WHITE);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.WHITE);\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.BLACK);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.BLACK);\n      }\n    } else {\n      return undefined;\n    }\n  }\n  clone() {\n    const clone = new ChessBoardModel(this.playerColor);\n    clone.chessBoard = this.chessBoard.map(row => row.map(square => {\n      const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n      const piece = square.getPiece();\n      if (piece) {\n        const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece);\n        clonedSquare.setPiece(clonedPiece);\n      }\n      return clonedSquare;\n    }));\n    clone.posMap = new Map(this.posMap);\n    return clone;\n  }\n}","map":{"version":3,"names":["PawnModel","RookModel","KnightModel","BishopModel","QueenModel","KingModel","SquareModel","ROW_VALUES","COL_VALUES","PlayerColor","PieceType","BOARD_SIZE","ChessBoardModel","constructor","playerColor","chessBoard","posMap","Map","moveList","col","row","reverse","i","j","pos","set","color","WHITE","BLACK","piece","genPiece","push","getChessBoard","getMoveList","getPosMap","pieceMove","fromSquare","toSquare","pieceOnFromSquare","getPiece","beenMoved","setPiece","undefined","validMove","startSquare","endSquare","searchBoard","ignorePiece","startPos","directions","pieceType","callback","board","posArray","posToArrayPos","console","log","key","value","Object","entries","result","findPiece","direction","dy","dx","withinBoard","currentPiece","getColor","getType","findPieceInDirection","flag","get","getSquareByPos","arrayPos","iPos","jPos","PAWN","ROOK","KNIGHT","BISHOP","QUEEN","KING","clone","map","square","clonedSquare","getPos","clonedPiece","assign","create","getPrototypeOf"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./pieces/PieceModel\";\nimport { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE} from \"../utils/Constants\";\n\nexport class ChessBoardModel{\n    private chessBoard: Array<Array<SquareModel>>;\n    private playerColor:PlayerColor;\n    private posMap:Map<string,{i:number,j:number}> = new Map();\n    private moveList:Array<{fromSquare:string, toSquare:string}>;\n\n    public constructor(playerColor:PlayerColor){\n        this.playerColor = playerColor;\n        this.moveList = [];\n        let col = ROW_VALUES;\n        let row = [...COL_VALUES].reverse();\n       \n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i< BOARD_SIZE; i++){\n            for(let j = 0; j< BOARD_SIZE; j++){\n\n                let pos:string = col[j]+row[i];\n                this.posMap.set(pos,{i:i, j:j});\n                let color = (j+i+2) % 2 == 0? PlayerColor.WHITE:PlayerColor.BLACK\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n    }\n\n    public getChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    public getMoveList(){\n        return this.moveList;\n    }\n    public getPosMap():Map<string,{i:number,j:number}>{\n        return this.posMap;\n    }\n    public pieceMove(fromSquare:SquareModel, toSquare:SquareModel){\n        if(fromSquare && toSquare){\n            let pieceOnFromSquare: PieceModel | undefined = fromSquare.getPiece();\n            if(pieceOnFromSquare){\n                pieceOnFromSquare.beenMoved = true;\n                fromSquare.setPiece(undefined);\n                toSquare.setPiece(pieceOnFromSquare);\n            }\n        }\n    }\n    public validMove(startSquare:SquareModel, endSquare:SquareModel, playerColor:PlayerColor){\n        const pieceMove = startSquare.getPiece();\n        if(pieceMove &&\n           pieceMove.validMove(this,startSquare,endSquare,playerColor)){\n           return true;\n        }\n        return false;\n    }\n\n    // public isKingInCheck(king: PieceModel): boolean {\n    //     // let kingPos: string | undefined;\n    //     // const playerColor = king.getColor();\n    //     // const opponentColor = playerColor === PlayerColor.WHITE ? PlayerColor.BLACK : PlayerColor.WHITE;\n\n    //     // this.chessBoard.forEach((row) => {\n    //     //   row.forEach((square) => {\n    //     //     const piece = square.getPiece();\n    //     //     if (piece?.getType() === PieceType.KING && piece.getColor() === playerColor) {\n    //     //       kingPos = square.getPos();\n    //     //     }\n    //     //   });\n    //     // });\n\n    //     // if (kingPos) {\n    //     //     let kingSquare = this.getSquareByPos(kingPos);\n\n    //     //     for (let i = 0; i < BOARD_SIZE; i++) {\n    //     //         for (let j = 0; j < BOARD_SIZE; j++) {\n    //     //             const square = this.chessBoard[i][j];\n    //     //             const piece = square.getPiece();\n                    \n    //     //             if (piece && piece.getColor() !== playerColor && kingSquare &&\n    //     //                 this.validMove(square, kingSquare, opponentColor)) {\n    //     //                 return true;\n    //     //             }\n    //     //         }\n    //     //     }\n    //     // }\n      \n    //     // return false;\n    // }\n    public searchBoard(ignorePiece:PieceModel,startPos:string, directions:Object, pieceType:PieceType, callback:Function){\n        const board = this.getChessBoard();\n        const posArray = this.posToArrayPos(startPos);\n        console.log(this);\n        if(!posArray) return false;\n\n        for(const [key,value] of Object.entries(directions)){\n            let i = posArray.i;\n            let j = posArray.j;\n\n            let result = callback(ignorePiece,i,j,value,pieceType);\n            if(result) return true;\n        }\n\n        return false;\n    }\n    public findPiece(piece:PieceModel,i:number,j:number,direction:any, pieceType:PieceType){\n        i += direction.dy;\n        j += direction.dx;\n        const board = this.getChessBoard();\n        if(ChessBoardModel.withinBoard(i,j)){\n            const currentPiece = board[i][j].getPiece();\n            if(currentPiece && currentPiece.getColor() !== piece.getColor()){\n                if( currentPiece.getType() == pieceType ){\n                        return true;\n                }\n                else{\n                    return false;\n                }\n            }else if( currentPiece && \n                        currentPiece.getColor() === piece.getColor() &&\n                        currentPiece !== piece){\n                return false;\n            }\n        }\n        return false;\n    }\n    public findPieceInDirection(piece:PieceModel,i:number,j:number,direction:any, pieceType:PieceType){\n        let flag = true;\n        console.log(this);\n        const board = this.getChessBoard();\n\n        while(flag){\n            i += direction.dy;\n            j += direction.dx;\n\n            if(ChessBoardModel.withinBoard(i,j)){\n                const currentPiece = board[i][j].getPiece();\n                if(currentPiece && currentPiece.getColor() !== piece.getColor()){\n                    if( currentPiece.getType() == pieceType){\n                            return true;\n                    }\n                    else{\n                        flag = false;\n                    }\n                }else if( currentPiece && \n                            currentPiece.getColor() === piece.getColor() &&\n                            currentPiece !== piece){\n                    flag = false;\n                }\n            }\n            else flag = false;\n        }       \n        return false;  \n    }\n    public posToArrayPos(pos: string){\n        return this.posMap.get(pos);\n    }\n\n    public getSquareByPos(pos: string){\n        let arrayPos = this.posMap.get(pos);\n        if(!arrayPos) return null;\n\n        let iPos = arrayPos.i;\n        let jPos = arrayPos.j;\n\n        if(!iPos || !jPos) return null;\n\n        return this.chessBoard[iPos][jPos];\n    }\n    public static withinBoard(i:number, j:number){\n        return i>=0 &&\n               i<BOARD_SIZE &&\n               j>=0 &&\n               j<BOARD_SIZE;\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PawnModel(PieceType.PAWN,PlayerColor.WHITE);\n        }\n        else if(row == 7){\n            return new PawnModel(PieceType.PAWN,PlayerColor.BLACK);\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.WHITE);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.WHITE);\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.BLACK);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.BLACK);\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n\n    public clone():ChessBoardModel{\n        const clone = new ChessBoardModel(this.playerColor);\n\n        clone.chessBoard = this.chessBoard.map((row) =>\n            row.map((square) => {\n            const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n            const piece = square.getPiece();\n            if (piece) {\n                const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece)\n                clonedSquare.setPiece(clonedPiece);\n            }\n            return clonedSquare;\n            })\n        );\n\n        clone.posMap = new Map(this.posMap);\n        return clone;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}