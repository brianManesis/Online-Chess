{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nexport class RookModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.updatePossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const rook = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (rook) {\n      const rookDirections = this.rookDirections();\n      const left = rookDirections.left;\n      const right = rookDirections.right;\n      const up = rookDirections.up;\n      const down = rookDirections.down;\n      const chessNotation = square.getPos();\n      const posArray = boardModel.posToArrayPos(chessNotation);\n      if (posArray) {\n        let flag = true;\n        let i = posArray.i;\n        let j = posArray.j;\n        this.checkSquare(board, i, j, left.dx, left.dy, playerColor);\n        this.checkSquare(board, i, j, right.dx, right.dy, playerColor);\n        this.checkSquare(board, i, j, up.dx, up.dy, playerColor);\n        this.checkSquare(board, i, j, down.dx, down.dy, playerColor);\n\n        // while(flag){\n        //     let leftI:number = i+left.dy;\n        //     let leftJ:number = j+left.dx;\n        //     if(this.withinBoard(leftI,leftJ)){\n        //         const tempSquare:SquareModel = board[leftI][leftJ];\n        //         if((tempSquare.getPiece() && tempSquare.getPiece()?.getColor() !== playerColor)\n        //             || !tempSquare.getPiece()){\n        //             this.possibleMoves.add(tempSquare.getPos());\n        //             i = leftI;\n        //             j = leftJ;\n        //             flag = true;\n        //         }\n        //         else{ flag = false }\n        //     }\n        // }\n        // while(flag){\n        //     let rightI:number = i+right.dy;\n        //     let rightJ:number = j+right.dx;\n        //     if(this.withinBoard(rightI,rightJ)){\n        //         const tempSquare:SquareModel = board[rightI][rightJ];\n        //         if((tempSquare.getPiece() && tempSquare.getPiece()?.getColor() !== playerColor)\n        //             || !tempSquare.getPiece()){\n        //             this.possibleMoves.add(tempSquare.getPos());\n        //             i = rightI;\n        //             j = rightJ;\n        //             flag = true;\n        //         }\n        //         else{ flag = false }\n        //     }\n\n        // }\n      }\n    }\n\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n  checkSquare(board, i, j, dx, dy, playerColor) {\n    let flag = true;\n    while (flag) {\n      let dI = i + dy;\n      let dJ = j + dx;\n      if (this.withinBoard(dI, dJ)) {\n        var _tempSquare$getPiece;\n        const tempSquare = board[dI][dJ];\n        if (tempSquare.getPiece() && ((_tempSquare$getPiece = tempSquare.getPiece()) === null || _tempSquare$getPiece === void 0 ? void 0 : _tempSquare$getPiece.getColor()) !== playerColor || !tempSquare.getPiece()) {\n          this.possibleMoves.add(tempSquare.getPos());\n          i = dI;\n          j = dJ;\n          flag = true;\n        } else {\n          flag = false;\n        }\n      } else {\n        flag = false;\n      }\n    }\n  }\n  rookDirections() {\n    return {\n      left: {\n        dx: -1,\n        dy: 0\n      },\n      right: {\n        dx: 1,\n        dy: 0\n      },\n      up: {\n        dx: 0,\n        dy: -1\n      },\n      down: {\n        dx: 0,\n        dy: 1\n      }\n    };\n  }\n}","map":{"version":3,"names":["PieceModel","RookModel","constructor","type","color","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","updatePossibleMoves","has","square","rook","getPiece","board","getChessBoard","possibleMoves","clear","rookDirections","left","right","up","down","chessNotation","posArray","posToArrayPos","flag","i","j","checkSquare","dx","dy","console","log","dI","dJ","withinBoard","_tempSquare$getPiece","tempSquare","getColor","add"],"sources":["/home/brian/Desktop/Chess/frontend/src/model/pieces/RookModel.ts"],"sourcesContent":["import { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\n\nexport class RookModel extends PieceModel{\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.updatePossibleMoves(boardModel,startSquare,playerColor).has(pos);    }\n\n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const rook = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(rook){\n            const rookDirections = this.rookDirections();\n            const left = rookDirections.left;\n            const right = rookDirections.right;\n            const up = rookDirections.up;\n            const down = rookDirections.down;\n\n            const chessNotation = square.getPos();\n            const posArray = boardModel.posToArrayPos(chessNotation);\n\n            if(posArray){\n                let flag = true;\n                let i = posArray.i;\n                let j = posArray.j; \n\n                this.checkSquare(board,i,j,left.dx,left.dy,playerColor);\n                this.checkSquare(board,i,j,right.dx,right.dy,playerColor);\n                this.checkSquare(board,i,j,up.dx,up.dy,playerColor);\n                this.checkSquare(board,i,j,down.dx,down.dy,playerColor);\n\n                // while(flag){\n                //     let leftI:number = i+left.dy;\n                //     let leftJ:number = j+left.dx;\n                //     if(this.withinBoard(leftI,leftJ)){\n                //         const tempSquare:SquareModel = board[leftI][leftJ];\n                //         if((tempSquare.getPiece() && tempSquare.getPiece()?.getColor() !== playerColor)\n                //             || !tempSquare.getPiece()){\n                //             this.possibleMoves.add(tempSquare.getPos());\n                //             i = leftI;\n                //             j = leftJ;\n                //             flag = true;\n                //         }\n                //         else{ flag = false }\n                //     }\n                // }\n                // while(flag){\n                //     let rightI:number = i+right.dy;\n                //     let rightJ:number = j+right.dx;\n                //     if(this.withinBoard(rightI,rightJ)){\n                //         const tempSquare:SquareModel = board[rightI][rightJ];\n                //         if((tempSquare.getPiece() && tempSquare.getPiece()?.getColor() !== playerColor)\n                //             || !tempSquare.getPiece()){\n                //             this.possibleMoves.add(tempSquare.getPos());\n                //             i = rightI;\n                //             j = rightJ;\n                //             flag = true;\n                //         }\n                //         else{ flag = false }\n                //     }\n\n                    \n                // }\n            }\n        }\n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n    private checkSquare(board:Array<Array<SquareModel>>,i:number,j:number,dx:number,\n                        dy:number, playerColor:PlayerColor){\n        let flag = true;\n        while(flag){\n            let dI:number = i+dy;\n            let dJ:number = j+dx;\n            if(this.withinBoard(dI,dJ)){\n                const tempSquare:SquareModel = board[dI][dJ];\n                if((tempSquare.getPiece() && tempSquare.getPiece()?.getColor() !== playerColor)\n                    || !tempSquare.getPiece()){\n                    this.possibleMoves.add(tempSquare.getPos());\n                    i = dI;\n                    j = dJ;\n                    flag = true;\n                }\n                else{ flag = false }\n            }\n            else{ flag = false; }\n        }\n    }\n\n    private rookDirections(){\n        return {\n            left:{\n                dx:-1,\n                dy:0\n            },\n            right:{\n                dx:1,\n                dy:0\n            },\n            up:{\n                dx:0,\n                dy:-1\n            },\n            down:{\n                dx:0,\n                dy:1\n            }\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}