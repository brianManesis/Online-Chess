{"ast":null,"code":"import { PlayerColor } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nexport class PawnModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n  }\n  validMove(boardModel, square, playerColor) {\n    const pos = square.getPos();\n    return this.possiblePawnMoves(boardModel, square, playerColor).has(pos);\n  }\n  possiblePawnMoves(boardModel, square, playerColor) {\n    const pawn = square.getPiece();\n    const possibleMoves = new Set();\n    if (pawn) {\n      const board = boardModel.getChessBoard();\n      const pieceDirections = this.pawnDirections(pawn);\n      const chessNotation = square.getPos();\n      const posArray = boardModel.posToArrayPos(chessNotation);\n      if (posArray) {\n        let forwardSquare = board[posArray.i + pieceDirections.dy][posArray.j + pieceDirections.dx];\n        let forwardSquarePiece = forwardSquare.getPiece();\n        if (forwardSquarePiece && forwardSquarePiece.getColor() !== playerColor) {\n          possibleMoves.add(forwardSquare.getPos());\n        }\n        let leftTakes = pieceDirections.takes.left;\n        let leftSquare = board[posArray.i + leftTakes.dy][posArray.j + leftTakes.dx];\n        let leftSquarePiece = leftSquare.getPiece();\n        if (leftSquarePiece && leftSquarePiece.getColor() !== playerColor) {\n          possibleMoves.add(leftSquare.getPos());\n        }\n        let rightTakes = pieceDirections.takes.right;\n        let rightSquare = board[posArray.i + rightTakes.dy][posArray.j + rightTakes.dx];\n        let rightSquarePiece = rightSquare.getPiece();\n        if (rightSquarePiece && rightSquarePiece.getColor() !== playerColor) {\n          possibleMoves.add(rightSquare.getPos());\n        }\n      }\n    }\n    return possibleMoves;\n  }\n  pawnDirections(pawn) {\n    return pawn.getColor() === PlayerColor.WHITE ? {\n      dx: 0,\n      dy: -1,\n      takes: {\n        left: {\n          dx: -1,\n          dy: -1\n        },\n        right: {\n          dx: 1,\n          dy: -1\n        }\n      }\n    } : {\n      dx: 0,\n      dy: 1,\n      takes: {\n        left: {\n          dx: -1,\n          dy: 1\n        },\n        right: {\n          dx: 1,\n          dy: 1\n        }\n      }\n    };\n  }\n}","map":{"version":3,"names":["PlayerColor","PieceModel","PawnModel","constructor","type","color","validMove","boardModel","square","playerColor","pos","getPos","possiblePawnMoves","has","pawn","getPiece","possibleMoves","Set","board","getChessBoard","pieceDirections","pawnDirections","chessNotation","posArray","posToArrayPos","forwardSquare","i","dy","j","dx","forwardSquarePiece","getColor","add","leftTakes","takes","left","leftSquare","leftSquarePiece","rightTakes","right","rightSquare","rightSquarePiece","WHITE"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/PawnModel.ts"],"sourcesContent":["import { ChessBoardModel } from \"../ChessBoardModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\n\nexport class PawnModel extends PieceModel{\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n    }\n\n    public validMove(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor): boolean {\n        const pos = square.getPos();\n\n        return this.possiblePawnMoves(boardModel,square,playerColor).has(pos);    \n    }\n\n    private possiblePawnMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const pawn = square.getPiece();\n        const possibleMoves = new Set<string>();\n    \n        if(pawn){\n            const board = boardModel.getChessBoard();\n            const pieceDirections = this.pawnDirections(pawn);\n            const chessNotation = square.getPos();\n            const posArray = boardModel.posToArrayPos(chessNotation);\n    \n            if(posArray){\n                let forwardSquare = board[posArray.i+pieceDirections.dy][posArray.j+pieceDirections.dx];\n                let forwardSquarePiece = forwardSquare.getPiece();\n                if(forwardSquarePiece && forwardSquarePiece.getColor() !== playerColor){\n                    possibleMoves.add(forwardSquare.getPos());\n                }\n                \n                let leftTakes = pieceDirections.takes.left;\n                let leftSquare = board[posArray.i+leftTakes.dy][posArray.j+leftTakes.dx];\n                let leftSquarePiece = leftSquare.getPiece();\n                if(leftSquarePiece && leftSquarePiece.getColor() !== playerColor){\n                    possibleMoves.add(leftSquare.getPos());\n                }\n    \n                let rightTakes = pieceDirections.takes.right;\n                let rightSquare = board[posArray.i+rightTakes.dy][posArray.j+rightTakes.dx];\n                let rightSquarePiece = rightSquare.getPiece();\n                if(rightSquarePiece && rightSquarePiece.getColor() !== playerColor){\n                    possibleMoves.add(rightSquare.getPos());\n                }\n            }\n        }\n        return possibleMoves;\n    }\n    private pawnDirections(pawn:PieceModel){\n        return pawn.getColor() === PlayerColor.WHITE?\n        {\n            dx: 0,\n            dy: -1,\n            takes: {\n                left:{\n                    dx: -1,\n                    dy: -1\n                },\n                right:{\n                    dx: 1,\n                    dy: -1\n                }\n            }\n        }:\n        {\n            dx: 0,\n            dy: 1,\n            takes: {\n                left:{\n                    dx: -1,\n                    dy: 1\n                },\n                right:{\n                    dx: 1,\n                    dy: 1\n                }\n            }\n        }\n    }\n    \n}"],"mappings":"AAEA,SAASA,WAAW,QAAmB,uBAAuB;AAC9D,SAASC,UAAU,QAAQ,cAAc;AAEzC,OAAO,MAAMC,SAAS,SAASD,UAAU;EAC9BE,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IACnD,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;EACtB;EAEOC,SAASA,CAACC,UAA0B,EAAEC,MAAkB,EAAEC,WAAuB,EAAW;IAC/F,MAAMC,GAAG,GAAGF,MAAM,CAACG,MAAM,CAAC,CAAC;IAE3B,OAAO,IAAI,CAACC,iBAAiB,CAACL,UAAU,EAACC,MAAM,EAACC,WAAW,CAAC,CAACI,GAAG,CAACH,GAAG,CAAC;EACzE;EAEQE,iBAAiBA,CAACL,UAA0B,EAAEC,MAAkB,EAAEC,WAAuB,EAAa;IAC1G,MAAMK,IAAI,GAAGN,MAAM,CAACO,QAAQ,CAAC,CAAC;IAC9B,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAS,CAAC;IAEvC,IAAGH,IAAI,EAAC;MACJ,MAAMI,KAAK,GAAGX,UAAU,CAACY,aAAa,CAAC,CAAC;MACxC,MAAMC,eAAe,GAAG,IAAI,CAACC,cAAc,CAACP,IAAI,CAAC;MACjD,MAAMQ,aAAa,GAAGd,MAAM,CAACG,MAAM,CAAC,CAAC;MACrC,MAAMY,QAAQ,GAAGhB,UAAU,CAACiB,aAAa,CAACF,aAAa,CAAC;MAExD,IAAGC,QAAQ,EAAC;QACR,IAAIE,aAAa,GAAGP,KAAK,CAACK,QAAQ,CAACG,CAAC,GAACN,eAAe,CAACO,EAAE,CAAC,CAACJ,QAAQ,CAACK,CAAC,GAACR,eAAe,CAACS,EAAE,CAAC;QACvF,IAAIC,kBAAkB,GAAGL,aAAa,CAACV,QAAQ,CAAC,CAAC;QACjD,IAAGe,kBAAkB,IAAIA,kBAAkB,CAACC,QAAQ,CAAC,CAAC,KAAKtB,WAAW,EAAC;UACnEO,aAAa,CAACgB,GAAG,CAACP,aAAa,CAACd,MAAM,CAAC,CAAC,CAAC;QAC7C;QAEA,IAAIsB,SAAS,GAAGb,eAAe,CAACc,KAAK,CAACC,IAAI;QAC1C,IAAIC,UAAU,GAAGlB,KAAK,CAACK,QAAQ,CAACG,CAAC,GAACO,SAAS,CAACN,EAAE,CAAC,CAACJ,QAAQ,CAACK,CAAC,GAACK,SAAS,CAACJ,EAAE,CAAC;QACxE,IAAIQ,eAAe,GAAGD,UAAU,CAACrB,QAAQ,CAAC,CAAC;QAC3C,IAAGsB,eAAe,IAAIA,eAAe,CAACN,QAAQ,CAAC,CAAC,KAAKtB,WAAW,EAAC;UAC7DO,aAAa,CAACgB,GAAG,CAACI,UAAU,CAACzB,MAAM,CAAC,CAAC,CAAC;QAC1C;QAEA,IAAI2B,UAAU,GAAGlB,eAAe,CAACc,KAAK,CAACK,KAAK;QAC5C,IAAIC,WAAW,GAAGtB,KAAK,CAACK,QAAQ,CAACG,CAAC,GAACY,UAAU,CAACX,EAAE,CAAC,CAACJ,QAAQ,CAACK,CAAC,GAACU,UAAU,CAACT,EAAE,CAAC;QAC3E,IAAIY,gBAAgB,GAAGD,WAAW,CAACzB,QAAQ,CAAC,CAAC;QAC7C,IAAG0B,gBAAgB,IAAIA,gBAAgB,CAACV,QAAQ,CAAC,CAAC,KAAKtB,WAAW,EAAC;UAC/DO,aAAa,CAACgB,GAAG,CAACQ,WAAW,CAAC7B,MAAM,CAAC,CAAC,CAAC;QAC3C;MACJ;IACJ;IACA,OAAOK,aAAa;EACxB;EACQK,cAAcA,CAACP,IAAe,EAAC;IACnC,OAAOA,IAAI,CAACiB,QAAQ,CAAC,CAAC,KAAK/B,WAAW,CAAC0C,KAAK,GAC5C;MACIb,EAAE,EAAE,CAAC;MACLF,EAAE,EAAE,CAAC,CAAC;MACNO,KAAK,EAAE;QACHC,IAAI,EAAC;UACDN,EAAE,EAAE,CAAC,CAAC;UACNF,EAAE,EAAE,CAAC;QACT,CAAC;QACDY,KAAK,EAAC;UACFV,EAAE,EAAE,CAAC;UACLF,EAAE,EAAE,CAAC;QACT;MACJ;IACJ,CAAC,GACD;MACIE,EAAE,EAAE,CAAC;MACLF,EAAE,EAAE,CAAC;MACLO,KAAK,EAAE;QACHC,IAAI,EAAC;UACDN,EAAE,EAAE,CAAC,CAAC;UACNF,EAAE,EAAE;QACR,CAAC;QACDY,KAAK,EAAC;UACFV,EAAE,EAAE,CAAC;UACLF,EAAE,EAAE;QACR;MACJ;IACJ,CAAC;EACL;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}