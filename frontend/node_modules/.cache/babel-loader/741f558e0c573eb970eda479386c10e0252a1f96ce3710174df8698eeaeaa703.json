{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../utils/Constants';\nimport React from 'react';\nimport UserHeader from '../../../common/UserHeader';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(props) {\n  _s();\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const playerColor = props.playerColor;\n  const socket = props.socket;\n  const boardViewRef = useRef(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [boardModel, setBoardModel] = useState(new ChessBoardModel());\n  const [boardView, setBoardView] = useState([[], [], [], [], [], [], [], []]);\n  useEffect(() => {\n    const handleMove = move => {\n      makeMove(move.start, move.end);\n    };\n    //socket.on('connecton', (socket:any)=>{console.log(socket.id)});\n    socket.on('move', handleMove);\n    return () => {\n      //socket.off('connecton');\n      socket.off('move', handleMove);\n    };\n  }, [boardModel]);\n  useEffect(() => {\n    makeChessBoard();\n  }, [boardModel]);\n  function makeChessBoard() {\n    const boardViewTemp = [[], [], [], [], [], [], [], []];\n    const currentBoardModel = boardModel.getChessBoard();\n    if (playerColor === PlayerColor.WHITE) {\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        for (let j = 0; j < BOARD_SIZE; j++) {\n          boardViewTemp[i].push( /*#__PURE__*/_jsxDEV(Square, {\n            squareModel: currentBoardModel[i][j]\n          }, i + \"\" + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    } else {\n      for (let i = BOARD_SIZE - 1; i >= 0; i--) {\n        let k = 0;\n        for (let j = BOARD_SIZE - 1; j >= 0; j--) {\n          boardViewTemp[k].push( /*#__PURE__*/_jsxDEV(Square, {\n            squareModel: currentBoardModel[i][j]\n          }, i + \"\" + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this));\n        }\n        k++;\n      }\n    }\n    setBoardView(() => boardViewTemp);\n  }\n  function handleClick(event) {\n    if (activePiece) {\n      movePiece(event);\n    } else {\n      selectPiece(event);\n    }\n  }\n  function selectPiece(event) {\n    const element = event.target;\n    const currentBoard = boardViewRef.current;\n    if (element.classList.contains(\"piece\") && currentBoard && !activePiece) {\n      let elementColor = element.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n      if (elementColor === playerColor) setActivePiece(element);\n    }\n  }\n  function movePiece(event) {\n    const element = event.target;\n    if (activePiece && boardViewRef.current) {\n      let startSquare = activePiece.parentElement;\n      let endSquare = element;\n      let activePieceColor = activePiece.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n      if (endSquare.classList.contains(\"piece\")) {\n        let endPieceColor = endSquare.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n        if (endPieceColor === activePieceColor) {\n          setActivePiece(endSquare);\n          return;\n        }\n        endSquare = endSquare.parentElement;\n      }\n      if (startSquare && endSquare) {\n        makeMove(startSquare.id, endSquare.id);\n        socket.emit(\"move\", {\n          start: startSquare.id,\n          end: endSquare.id\n        });\n      }\n      setActivePiece(null);\n    }\n  }\n  function makeMove(start, end) {\n    const updatedBoardModel = boardModel.clone();\n    updatedBoardModel.move(start, end);\n    setBoardModel(updatedBoardModel);\n  }\n  // function grabPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     const currentBoard = boardViewRef.current;\n  //     setGrabPiecePos(element.parentElement?.id+\"\");\n  //     console.log(element.parentElement?.id);\n  //     if(element.classList.contains(\"piece\") && currentBoard){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n  //         element.style.position = \"absolute\";\n  //         element.style.left = `${x}px`;\n  //         element.style.top = `${y}px`;\n  //         setActivePiece(element);\n  //     }\n  // }\n\n  // function movePiece(event: React.MouseEvent){\n  //     if(activePiece && boardViewRef.current){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n  //         const minX = boardViewRef.current.offsetLeft;\n  //         const minY = boardViewRef.current.offsetTop;\n  //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n  //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n  //         if (x < minX) {\n  //             activePiece.style.left = `${minX}px`;\n  //         }\n  //         else if (x > maxX) {\n  //             activePiece.style.left = `${maxX}px`;\n  //         }\n  //         else {\n  //             activePiece.style.left = `${x}px`;\n  //         }\n\n  //         if (y < minY) {\n  //             activePiece.style.top = `${minY}px`;\n  //         }\n  //         else if (y > maxY) {\n  //             activePiece.style.top = `${maxY}px`;\n  //         }\n  //         else {\n  //             activePiece.style.top = `${y}px`;\n  //         }\n  //     }\n  // }\n\n  // function dropPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     console.log(event);\n  //     if(activePiece && boardViewRef.current){\n  //         setActivePiece(null);\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(UserHeader, {\n      username: props.opponent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chessboard\",\n      onClick: event => handleClick(event),\n      ref: boardViewRef,\n      children: boardView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserHeader, {\n      username: user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n}\n_s(Chessboard, \"CAjkX4RSeqd5c5pxbC32p0dapZE=\", false, function () {\n  return [useSelector];\n});\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Square","ChessBoardModel","useEffect","useRef","useState","BOARD_SIZE","PlayerColor","React","UserHeader","useSelector","jsxDEV","_jsxDEV","Chessboard","props","_s","user","state","auth","playerColor","socket","boardViewRef","activePiece","setActivePiece","boardModel","setBoardModel","boardView","setBoardView","handleMove","move","makeMove","start","end","on","off","makeChessBoard","boardViewTemp","currentBoardModel","getChessBoard","WHITE","i","j","push","squareModel","fileName","_jsxFileName","lineNumber","columnNumber","k","handleClick","event","movePiece","selectPiece","element","target","currentBoard","current","classList","contains","elementColor","id","includes","BLACK","startSquare","parentElement","endSquare","activePieceColor","endPieceColor","emit","updatedBoardModel","clone","children","username","opponent","onClick","ref","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../utils/Constants';\nimport React from 'react';\nimport { SquareModel } from '../../../../model/SquareModel';\nimport UserHeader from '../../../common/UserHeader';\nimport { useSelector } from 'react-redux';\n\nexport default function Chessboard(props:{socket:any,playerColor:PlayerColor,opponent:string}){\n    const {user} = useSelector((state:any) => state.auth);\n    const playerColor = props.playerColor;\n    const socket = props.socket;\n    const boardViewRef = useRef<HTMLDivElement>(null);\n    const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n    const [boardModel,setBoardModel] = useState(new ChessBoardModel());\n    const [boardView, setBoardView] = useState([[],[],[],[],[],[],[],[]]);\n\n    useEffect(()=>{\n        const handleMove = (move:{start:string,end:string}) =>{\n            makeMove(move.start,move.end);\n        }\n        //socket.on('connecton', (socket:any)=>{console.log(socket.id)});\n        socket.on('move', handleMove);\n        return () => {\n            //socket.off('connecton');\n            socket.off('move', handleMove);\n          };\n     },[boardModel]);\n\n        \n    useEffect(()=>{\n        makeChessBoard();\n    },[boardModel]);\n    \n    function makeChessBoard(){\n        const boardViewTemp:any = [[],[],[],[],[],[],[],[]];\n        const currentBoardModel:Array<Array<SquareModel>> = boardModel.getChessBoard();\n        if(playerColor === PlayerColor.WHITE){\n            for(let i = 0; i<BOARD_SIZE; i++){\n                for(let j = 0; j<BOARD_SIZE; j++){\n                    boardViewTemp[i].push(\n                        <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n                    );\n                }\n            }\n        }\n        else{\n            for(let i = BOARD_SIZE-1; i>=0; i--){\n                let k = 0;\n                for(let j = BOARD_SIZE-1; j>=0; j--){\n                    boardViewTemp[k].push(\n                        <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n                    );\n                }\n                k++;\n            }\n        }\n        setBoardView(() => boardViewTemp);\n    }\n    \n    function handleClick(event: React.MouseEvent){\n        if(activePiece){\n            movePiece(event);\n        }\n        else{\n            selectPiece(event);\n        }\n    }\n    function selectPiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        const currentBoard = boardViewRef.current;\n        if( element.classList.contains(\"piece\") && \n            currentBoard && \n            !activePiece\n          )\n        {\n            let elementColor:PlayerColor = element.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n            \n            if(elementColor === playerColor) setActivePiece(element); \n        }       \n    }\n    function movePiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        if(activePiece && boardViewRef.current){\n            let startSquare = activePiece.parentElement;\n            let endSquare: HTMLElement | null = element;\n            let activePieceColor:PlayerColor = activePiece.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n            if(endSquare.classList.contains(\"piece\")){\n                let endPieceColor = endSquare.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n                if(endPieceColor === activePieceColor){\n                    setActivePiece(endSquare);\n                    return;\n                }\n                endSquare = endSquare.parentElement;\n            }\n\n\n            if(startSquare && endSquare){\n                makeMove(startSquare.id,endSquare.id);       \n                socket.emit(\"move\", {start:startSquare.id,end:endSquare.id});\n            }\n            setActivePiece(null);\n        }\n    }\n    function makeMove(start:string,end:string){\n        const updatedBoardModel = boardModel.clone();\n        updatedBoardModel.move(\n            start,\n            end\n        );        \n\n        setBoardModel(updatedBoardModel);\n    }\n    // function grabPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     const currentBoard = boardViewRef.current;\n    //     setGrabPiecePos(element.parentElement?.id+\"\");\n    //     console.log(element.parentElement?.id);\n    //     if(element.classList.contains(\"piece\") && currentBoard){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n    //         element.style.position = \"absolute\";\n    //         element.style.left = `${x}px`;\n    //         element.style.top = `${y}px`;\n    //         setActivePiece(element);\n    //     }\n    // }\n    \n    // function movePiece(event: React.MouseEvent){\n    //     if(activePiece && boardViewRef.current){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n    //         const minX = boardViewRef.current.offsetLeft;\n    //         const minY = boardViewRef.current.offsetTop;\n    //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n    //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n    //         if (x < minX) {\n    //             activePiece.style.left = `${minX}px`;\n    //         }\n    //         else if (x > maxX) {\n    //             activePiece.style.left = `${maxX}px`;\n    //         }\n    //         else {\n    //             activePiece.style.left = `${x}px`;\n    //         }\n    \n    //         if (y < minY) {\n    //             activePiece.style.top = `${minY}px`;\n    //         }\n    //         else if (y > maxY) {\n    //             activePiece.style.top = `${maxY}px`;\n    //         }\n    //         else {\n    //             activePiece.style.top = `${y}px`;\n    //         }\n    //     }\n    // }\n    \n    // function dropPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     console.log(event);\n    //     if(activePiece && boardViewRef.current){\n    //         setActivePiece(null);\n    //     }\n    // }\n    return(\n        <div>\n            <UserHeader username={props.opponent} />\n            <div id = \"chessboard\"\n            onClick={event=>handleClick(event)}\n            ref={boardViewRef}>\n                {boardView}\n            </div>\n            <UserHeader username={user.username} />\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}