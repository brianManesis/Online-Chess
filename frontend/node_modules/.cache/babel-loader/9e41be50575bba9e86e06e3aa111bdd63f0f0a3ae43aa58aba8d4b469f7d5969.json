{"ast":null,"code":"import { PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\nexport class KingModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n    this.isChecked = void 0;\n    this.isChecked = false;\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.updatePossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const king = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (!king) return this.possibleMoves;\n    const kingDirections = KingModel.kingDirections;\n    const chessNotation = square.getPos();\n    const posArray = boardModel.posToArrayPos(chessNotation);\n    if (!posArray) return this.possibleMoves;\n    let i = posArray.i;\n    let j = posArray.j;\n    for (const [key, value] of Object.entries(kingDirections)) {\n      this.checkSquare(board, i, j, value.dx, value.dy, playerColor);\n    }\n    console.log(this.possibleMoves);\n    this.possibleMoves.forEach(element => {\n      if (this.kingWillBeInCheck(boardModel, element)) {\n        this.possibleMoves.delete(element);\n      }\n    });\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n  kingWillBeInCheck(boardModel, kingPos) {\n    let lookForRookAndQueen = boardModel.iterateBoard(kingPos, RookModel.rookDirections, (board, i, j, value) => {\n      let flag = true;\n      while (flag) {\n        i += value.dy;\n        j += value.dx;\n        if (this.withinBoard(i, j)) {\n          const currentPiece = board[i][j].getPiece();\n          if (currentPiece && currentPiece.getColor() !== this.color) {\n            if (currentPiece.getType() == PieceType.QUEEN || currentPiece.getType() == PieceType.ROOK) {\n              return true;\n            } else {\n              flag = false;\n            }\n          } else if (currentPiece && currentPiece.getColor() === this.color && currentPiece !== this) {\n            flag = false;\n          }\n        } else flag = false;\n      }\n    });\n    let lookForBishopAndQueen = boardModel.iterateBoard(kingPos, BishopModel.bishopDirections, (board, i, j, value) => {\n      let flag = true;\n      while (flag) {\n        i += value.dy;\n        j += value.dx;\n        if (this.withinBoard(i, j)) {\n          const currentPiece = board[i][j].getPiece();\n          if (currentPiece && currentPiece.getColor() !== this.color) {\n            if (currentPiece.getType() == PieceType.QUEEN || currentPiece.getType() == PieceType.BISHOP) {\n              return true;\n            } else {\n              flag = false;\n            }\n          } else if (currentPiece && currentPiece.getColor() === this.color && currentPiece !== this) {\n            flag = false;\n          }\n        } else flag = false;\n      }\n    });\n    let lookForKnight = boardModel.iterateBoard(kingPos, KnightModel.knightDirections, (board, i, j, value) => {\n      i += value.dy;\n      j += value.dx;\n      if (this.withinBoard(i, j)) {\n        const currentPiece = board[i][j].getPiece();\n        if (currentPiece && currentPiece.getColor() !== this.color) {\n          if (currentPiece.getType() == PieceType.KNIGHT) {\n            return true;\n          } else {\n            return false;\n          }\n        } else if (currentPiece && currentPiece.getColor() === this.color && currentPiece !== this) {\n          return false;\n        }\n      } else return false;\n    });\n    let lookForKing = boardModel.iterateBoard(kingPos, KingModel.kingDirections, (board, i, j, value) => {\n      i += value.dy;\n      j += value.dx;\n      if (this.withinBoard(i, j)) {\n        const currentPiece = board[i][j].getPiece();\n        if (currentPiece && currentPiece.getColor() !== this.color) {\n          if (currentPiece.getType() == PieceType.KING) {\n            return true;\n          } else {\n            return false;\n          }\n        } else if (currentPiece && currentPiece.getColor() === this.color && currentPiece !== this) {\n          return false;\n        }\n      } else return false;\n    });\n    return lookForRookAndQueen || lookForBishopAndQueen || lookForKnight || lookForKing;\n  }\n}\nKingModel.kingDirections = {\n  left: {\n    dx: -1,\n    dy: 0\n  },\n  right: {\n    dx: 1,\n    dy: 0\n  },\n  up: {\n    dx: 0,\n    dy: -1\n  },\n  down: {\n    dx: 0,\n    dy: 1\n  },\n  leftUp: {\n    dx: -1,\n    dy: -1\n  },\n  rightUp: {\n    dx: 1,\n    dy: -1\n  },\n  leftDown: {\n    dx: -1,\n    dy: 1\n  },\n  rightDown: {\n    dx: 1,\n    dy: 1\n  }\n};","map":{"version":3,"names":["PieceType","PieceModel","RookModel","BishopModel","KnightModel","KingModel","constructor","type","color","isChecked","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","updatePossibleMoves","has","square","king","getPiece","board","getChessBoard","possibleMoves","clear","kingDirections","chessNotation","posArray","posToArrayPos","i","j","key","value","Object","entries","checkSquare","dx","dy","console","log","forEach","element","kingWillBeInCheck","delete","kingPos","lookForRookAndQueen","iterateBoard","rookDirections","flag","withinBoard","currentPiece","getColor","getType","QUEEN","ROOK","lookForBishopAndQueen","bishopDirections","BISHOP","lookForKnight","knightDirections","KNIGHT","lookForKing","KING","left","right","up","down","leftUp","rightUp","leftDown","rightDown"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/KingModel.ts"],"sourcesContent":["import { PlayerColor, PieceType, BOARD_SIZE } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\n\nexport class KingModel extends PieceModel{\n\n    public isChecked:boolean;\n\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n        this.isChecked = false;\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.updatePossibleMoves(boardModel,startSquare,playerColor).has(pos); \n        }\n    \n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const king = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(!king) return this.possibleMoves;\n\n        const kingDirections = KingModel.kingDirections;\n        const chessNotation = square.getPos();\n        const posArray = boardModel.posToArrayPos(chessNotation);\n\n        if(!posArray) return this.possibleMoves;\n\n        let i = posArray.i\n        let j = posArray.j; \n        \n        for(const [key,value] of Object.entries(kingDirections)){\n            this.checkSquare(board,i,j,value.dx,value.dy,playerColor);\n        }\n        console.log(this.possibleMoves)\n\n        this.possibleMoves.forEach(element=>{\n            if(this.kingWillBeInCheck(boardModel,element)){\n                this.possibleMoves.delete(element);\n            }\n        });\n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n    private kingWillBeInCheck(boardModel:ChessBoardModel, kingPos:string){\n\n        let lookForRookAndQueen = boardModel.iterateBoard(kingPos, RookModel.rookDirections, \n                         (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=>\n        {\n            let flag = true;\n            while(flag){\n                i += value.dy;\n                j += value.dx;\n                if(this.withinBoard(i,j)){\n                    const currentPiece = board[i][j].getPiece();\n                    if(currentPiece && currentPiece.getColor() !== this.color){\n                        if( currentPiece.getType() == PieceType.QUEEN ||\n                            currentPiece.getType() == PieceType.ROOK\n                        ){\n                                return true;\n                        }\n                        else{\n                            flag = false;\n                        }\n                    }else if( currentPiece && \n                              currentPiece.getColor() === this.color &&\n                              currentPiece !== this){\n                        flag = false;\n                    }\n                }\n                else flag = false;\n            }       \n        });\n\n        let lookForBishopAndQueen = boardModel.iterateBoard(kingPos,BishopModel.bishopDirections,\n                                (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=>\n        {\n            let flag = true;\n            while(flag){\n                i += value.dy;\n                j += value.dx;\n                if(this.withinBoard(i,j)){\n                    const currentPiece = board[i][j].getPiece();\n                    if(currentPiece && currentPiece.getColor() !== this.color){\n                        if( currentPiece.getType() == PieceType.QUEEN ||\n                            currentPiece.getType() == PieceType.BISHOP\n                        ){\n                                return true;\n                        }\n                        else{\n                            flag = false;\n                        }\n                    }else if( currentPiece && \n                              currentPiece.getColor() === this.color &&\n                              currentPiece !== this){\n                        flag = false;\n                    }\n                }\n                else flag = false;\n            }       \n        });\n\n        let lookForKnight = boardModel.iterateBoard(kingPos, KnightModel.knightDirections,\n                        (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=> \n        {\n            i += value.dy;\n            j += value.dx;\n            if(this.withinBoard(i,j)){\n                const currentPiece = board[i][j].getPiece();\n                if(currentPiece && currentPiece.getColor() !== this.color){\n                    if( currentPiece.getType() == PieceType.KNIGHT ){\n                            return true;\n                    }\n                    else{\n                        return false;\n                    }\n                }else if( currentPiece && \n                            currentPiece.getColor() === this.color &&\n                            currentPiece !== this){\n                    return false;\n                }\n            }\n            else return false;\n        });\n\n        let lookForKing = boardModel.iterateBoard(kingPos, KingModel.kingDirections,\n            (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=> \n        {\n            i += value.dy;\n            j += value.dx;\n            if(this.withinBoard(i,j)){\n                const currentPiece = board[i][j].getPiece();\n                if(currentPiece && currentPiece.getColor() !== this.color){\n                    if( currentPiece.getType() == PieceType.KING ){\n                            return true;\n                    }\n                    else{\n                        return false;\n                    }\n                }else if( currentPiece && \n                            currentPiece.getColor() === this.color &&\n                            currentPiece !== this){\n                    return false;\n                }\n            }\n            else return false;\n        })\n\n        return lookForRookAndQueen || lookForBishopAndQueen || lookForKnight || lookForKing;\n    }\n    private static kingDirections = {\n            left:{\n                dx:-1,\n                dy:0\n            },\n            right:{\n                dx:1,\n                dy:0\n            },\n            up:{\n                dx:0,\n                dy:-1\n            },\n            down:{\n                dx:0,\n                dy:1\n            },\n            leftUp:{\n                dx:-1,\n                dy:-1\n            },\n            rightUp:{\n                dx:1,\n                dy:-1\n            },\n            leftDown:{\n                dx:-1,\n                dy:1\n            },\n            rightDown:{\n                dx:1,\n                dy:1\n            }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}