{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx\";\nimport './Chessboard.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(props) {\n  // const playerColor = props.playerColor;\n  // const socket = props.socket;\n  // const boardViewRef = useRef<HTMLDivElement>(null);\n  // const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n  // const [boardModel,setBoardModel] = useState(new ChessBoardModel());\n  // const [boardView, setBoardView] = useState([[],[],[],[],[],[],[],[]]);\n\n  // useEffect(()=>{\n  //     const handleMove = (move:{start:string,end:string}) =>{\n  //         makeMove(move.start,move.end);\n  //     }\n  //     socket.on('connecton', (socket:any)=>{console.log(socket.id)});\n  //     socket.on('move', handleMove);\n  //     return () => {\n  //         socket.off('connecton');\n  //         socket.off('move', handleMove);\n  //       };\n  //  },[boardModel]);\n\n  // useEffect(()=>{\n  //     makeChessBoard();\n  // },[boardModel]);\n\n  // function makeChessBoard(){\n  //     const boardViewTemp:any = [[],[],[],[],[],[],[],[]];\n  //     const currentBoardModel:Array<Array<SquareModel>> = boardModel.getChessBoard();\n  //     if(playerColor === PlayerColor.WHITE){\n  //         for(let i = 0; i<BOARD_SIZE; i++){\n  //             for(let j = 0; j<BOARD_SIZE; j++){\n  //                 boardViewTemp[i].push(\n  //                     <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n  //                 );\n  //             }\n  //         }\n  //     }\n  //     else{\n  //         for(let i = BOARD_SIZE-1; i>=0; i--){\n  //             let k = 0;\n  //             for(let j = BOARD_SIZE-1; j>=0; j--){\n  //                 boardViewTemp[k].push(\n  //                     <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n  //                 );\n  //             }\n  //             k++;\n  //         }\n  //     }\n  //     setBoardView(() => boardViewTemp);\n  // }\n\n  // function handleClick(event: React.MouseEvent){\n  //     if(activePiece){\n  //         movePiece(event);\n  //     }\n  //     else{\n  //         selectPiece(event);\n  //     }\n  // }\n  // function selectPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     const currentBoard = boardViewRef.current;\n  //     if( element.classList.contains(\"piece\") && \n  //         currentBoard && \n  //         !activePiece\n  //       )\n  //     {\n  //         let elementColor:PlayerColor = element.id.includes(\"White\")?\n  //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n  //         if(elementColor === playerColor) setActivePiece(element); \n  //     }       \n  // }\n  // function movePiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     if(activePiece && boardViewRef.current){\n  //         let startSquare = activePiece.parentElement;\n  //         let endSquare: HTMLElement | null = element;\n  //         let activePieceColor:PlayerColor = activePiece.id.includes(\"White\")?\n  //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n  //         if(endSquare.classList.contains(\"piece\")){\n  //             let endPieceColor = endSquare.id.includes(\"White\")?\n  //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n  //             if(endPieceColor === activePieceColor){\n  //                 setActivePiece(endSquare);\n  //                 return;\n  //             }\n  //             endSquare = endSquare.parentElement;\n  //         }\n\n  //         if(startSquare && endSquare){\n  //             makeMove(startSquare.id,endSquare.id);       \n  //             socket.emit(\"move\", {start:startSquare.id,end:endSquare.id});\n  //         }\n  //         setActivePiece(null);\n  //     }\n  // }\n  // function makeMove(start:string,end:string){\n  //     const updatedBoardModel = boardModel.clone();\n  //     updatedBoardModel.move(\n  //         start,\n  //         end\n  //     );        \n\n  //     setBoardModel(updatedBoardModel);\n  // }\n  // function grabPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     const currentBoard = boardViewRef.current;\n  //     setGrabPiecePos(element.parentElement?.id+\"\");\n  //     console.log(element.parentElement?.id);\n  //     if(element.classList.contains(\"piece\") && currentBoard){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n  //         element.style.position = \"absolute\";\n  //         element.style.left = `${x}px`;\n  //         element.style.top = `${y}px`;\n  //         setActivePiece(element);\n  //     }\n  // }\n\n  // function movePiece(event: React.MouseEvent){\n  //     if(activePiece && boardViewRef.current){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n  //         const minX = boardViewRef.current.offsetLeft;\n  //         const minY = boardViewRef.current.offsetTop;\n  //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n  //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n  //         if (x < minX) {\n  //             activePiece.style.left = `${minX}px`;\n  //         }\n  //         else if (x > maxX) {\n  //             activePiece.style.left = `${maxX}px`;\n  //         }\n  //         else {\n  //             activePiece.style.left = `${x}px`;\n  //         }\n\n  //         if (y < minY) {\n  //             activePiece.style.top = `${minY}px`;\n  //         }\n  //         else if (y > maxY) {\n  //             activePiece.style.top = `${maxY}px`;\n  //         }\n  //         else {\n  //             activePiece.style.top = `${y}px`;\n  //         }\n  //     }\n  // }\n\n  // function dropPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     console.log(event);\n  //     if(activePiece && boardViewRef.current){\n  //         setActivePiece(null);\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    onClick: event => handleClick(event),\n    ref: boardViewRef,\n    children: boardView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n}\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Chessboard","props","id","onClick","event","handleClick","ref","boardViewRef","children","boardView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../utils/Constants';\nimport React from 'react';\nimport { SquareModel } from '../../../../model/SquareModel';\n\nexport default function Chessboard(props:{socket:any,playerColor:PlayerColor}){\n    // const playerColor = props.playerColor;\n    // const socket = props.socket;\n    // const boardViewRef = useRef<HTMLDivElement>(null);\n    // const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n    // const [boardModel,setBoardModel] = useState(new ChessBoardModel());\n    // const [boardView, setBoardView] = useState([[],[],[],[],[],[],[],[]]);\n\n    // useEffect(()=>{\n    //     const handleMove = (move:{start:string,end:string}) =>{\n    //         makeMove(move.start,move.end);\n    //     }\n    //     socket.on('connecton', (socket:any)=>{console.log(socket.id)});\n    //     socket.on('move', handleMove);\n    //     return () => {\n    //         socket.off('connecton');\n    //         socket.off('move', handleMove);\n    //       };\n    //  },[boardModel]);\n\n        \n    // useEffect(()=>{\n    //     makeChessBoard();\n    // },[boardModel]);\n    \n    // function makeChessBoard(){\n    //     const boardViewTemp:any = [[],[],[],[],[],[],[],[]];\n    //     const currentBoardModel:Array<Array<SquareModel>> = boardModel.getChessBoard();\n    //     if(playerColor === PlayerColor.WHITE){\n    //         for(let i = 0; i<BOARD_SIZE; i++){\n    //             for(let j = 0; j<BOARD_SIZE; j++){\n    //                 boardViewTemp[i].push(\n    //                     <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n    //                 );\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         for(let i = BOARD_SIZE-1; i>=0; i--){\n    //             let k = 0;\n    //             for(let j = BOARD_SIZE-1; j>=0; j--){\n    //                 boardViewTemp[k].push(\n    //                     <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n    //                 );\n    //             }\n    //             k++;\n    //         }\n    //     }\n    //     setBoardView(() => boardViewTemp);\n    // }\n    \n    // function handleClick(event: React.MouseEvent){\n    //     if(activePiece){\n    //         movePiece(event);\n    //     }\n    //     else{\n    //         selectPiece(event);\n    //     }\n    // }\n    // function selectPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     const currentBoard = boardViewRef.current;\n    //     if( element.classList.contains(\"piece\") && \n    //         currentBoard && \n    //         !activePiece\n    //       )\n    //     {\n    //         let elementColor:PlayerColor = element.id.includes(\"White\")?\n    //             PlayerColor.WHITE:PlayerColor.BLACK;\n            \n    //         if(elementColor === playerColor) setActivePiece(element); \n    //     }       \n    // }\n    // function movePiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     if(activePiece && boardViewRef.current){\n    //         let startSquare = activePiece.parentElement;\n    //         let endSquare: HTMLElement | null = element;\n    //         let activePieceColor:PlayerColor = activePiece.id.includes(\"White\")?\n    //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n    //         if(endSquare.classList.contains(\"piece\")){\n    //             let endPieceColor = endSquare.id.includes(\"White\")?\n    //             PlayerColor.WHITE:PlayerColor.BLACK;\n\n    //             if(endPieceColor === activePieceColor){\n    //                 setActivePiece(endSquare);\n    //                 return;\n    //             }\n    //             endSquare = endSquare.parentElement;\n    //         }\n\n\n    //         if(startSquare && endSquare){\n    //             makeMove(startSquare.id,endSquare.id);       \n    //             socket.emit(\"move\", {start:startSquare.id,end:endSquare.id});\n    //         }\n    //         setActivePiece(null);\n    //     }\n    // }\n    // function makeMove(start:string,end:string){\n    //     const updatedBoardModel = boardModel.clone();\n    //     updatedBoardModel.move(\n    //         start,\n    //         end\n    //     );        \n\n    //     setBoardModel(updatedBoardModel);\n    // }\n    // function grabPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     const currentBoard = boardViewRef.current;\n    //     setGrabPiecePos(element.parentElement?.id+\"\");\n    //     console.log(element.parentElement?.id);\n    //     if(element.classList.contains(\"piece\") && currentBoard){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n    //         element.style.position = \"absolute\";\n    //         element.style.left = `${x}px`;\n    //         element.style.top = `${y}px`;\n    //         setActivePiece(element);\n    //     }\n    // }\n    \n    // function movePiece(event: React.MouseEvent){\n    //     if(activePiece && boardViewRef.current){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n    //         const minX = boardViewRef.current.offsetLeft;\n    //         const minY = boardViewRef.current.offsetTop;\n    //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n    //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n    //         if (x < minX) {\n    //             activePiece.style.left = `${minX}px`;\n    //         }\n    //         else if (x > maxX) {\n    //             activePiece.style.left = `${maxX}px`;\n    //         }\n    //         else {\n    //             activePiece.style.left = `${x}px`;\n    //         }\n    \n    //         if (y < minY) {\n    //             activePiece.style.top = `${minY}px`;\n    //         }\n    //         else if (y > maxY) {\n    //             activePiece.style.top = `${maxY}px`;\n    //         }\n    //         else {\n    //             activePiece.style.top = `${y}px`;\n    //         }\n    //     }\n    // }\n    \n    // function dropPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     console.log(event);\n    //     if(activePiece && boardViewRef.current){\n    //         setActivePiece(null);\n    //     }\n    // }\n    return(\n        <div id = \"chessboard\"\n        onClick={event=>handleClick(event)}\n        ref={boardViewRef}>\n            {boardView}\n        </div>\n    );\n}"],"mappings":";AAAA,OAAO,kBAAkB;AAKzB,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,eAAe,SAASC,UAAUA,CAACC,KAA0C,EAAC;EAC1E;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACIF,OAAA;IAAKG,EAAE,EAAG,YAAY;IACtBC,OAAO,EAAEC,KAAK,IAAEC,WAAW,CAACD,KAAK,CAAE;IACnCE,GAAG,EAAEC,YAAa;IAAAC,QAAA,EACbC;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd;AAACC,EAAA,GA9KuBd,UAAU;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}