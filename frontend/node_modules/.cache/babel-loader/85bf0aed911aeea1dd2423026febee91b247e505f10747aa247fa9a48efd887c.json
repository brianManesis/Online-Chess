{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useRef, useState } from 'react';\nimport { BOARD_SIZE } from '../../../../Constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(props) {\n  _s();\n  const playerColor = props.playerColor;\n  const boardViewRef = useRef(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPiecePos, setGrabPiecePos] = useState(null);\n  const boardModel = new ChessBoardModel(playerColor).genChessBoard();\n  const boardView = [[], [], [], [], [], [], [], []];\n  const [chessboard, setChessBoard] = useState(boardModel);\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      boardView[i].push( /*#__PURE__*/_jsxDEV(Square, {\n        squareModel: boardModel[i][j]\n      }, i + \"\" + j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this));\n    }\n  }\n  function grabPiece(event) {\n    const element = event.target;\n    const currentBoard = boardViewRef.current;\n    if (element.classList.contains(\"piece\") && currentBoard) {\n      const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n      const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n      const grabX = Math.floor((event.clientX - currentBoard.offsetLeft) / BOARD_SIZE);\n      const grabY = Math.abs(Math.ceil((event.clientY - currentBoard.offsetTop - BOARD_VIEW_HEIGHT) / BOARD_SIZE));\n      setGrabPiecePos();\n      const x = event.clientX - BOARD_VIEW_WIDTH / 16;\n      const y = event.clientY - BOARD_VIEW_HEIGHT / 16;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(event) {\n    if (activePiece && boardViewRef.current) {\n      const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n      const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n      const minX = boardViewRef.current.offsetLeft;\n      const minY = boardViewRef.current.offsetTop;\n      const maxX = boardViewRef.current.offsetLeft + 8 / 9 * BOARD_VIEW_WIDTH;\n      const maxY = boardViewRef.current.offsetTop + 8 / 9 * BOARD_VIEW_HEIGHT;\n      const x = event.clientX - BOARD_VIEW_WIDTH / 16;\n      const y = event.clientY - BOARD_VIEW_HEIGHT / 16;\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(event) {\n    console.log(event);\n    if (activePiece && boardViewRef.current) {\n      setActivePiece(null);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    onMouseMove: event => movePiece(event),\n    onMouseDown: event => grabPiece(event),\n    onMouseUp: event => dropPiece(event),\n    ref: boardViewRef,\n    children: boardView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(Chessboard, \"zr/anzTVlegJAHw8n5zSIFN57Z4=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Square","ChessBoardModel","useRef","useState","BOARD_SIZE","jsxDEV","_jsxDEV","Chessboard","props","_s","playerColor","boardViewRef","activePiece","setActivePiece","grabPiecePos","setGrabPiecePos","boardModel","genChessBoard","boardView","chessboard","setChessBoard","i","j","push","squareModel","fileName","_jsxFileName","lineNumber","columnNumber","grabPiece","event","element","target","currentBoard","current","classList","contains","BOARD_VIEW_HEIGHT","clientHeight","BOARD_VIEW_WIDTH","clientWidth","grabX","Math","floor","clientX","offsetLeft","grabY","abs","ceil","clientY","offsetTop","x","y","style","position","left","top","movePiece","minX","minY","maxX","maxY","dropPiece","console","log","id","onMouseMove","onMouseDown","onMouseUp","ref","children","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE } from '../../../../Constants';\n\nexport default function Chessboard(props:{playerColor:string}){\n    const playerColor = props.playerColor;\n    const boardViewRef = useRef<HTMLDivElement>(null);\n    const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n    const [grabPiecePos, setGrabPiecePos] = useState<string | null>(null)\n    const boardModel = new ChessBoardModel(playerColor).genChessBoard();\n    const boardView:any = [[],[],[],[],[],[],[],[]];\n\n    const [chessboard,setChessBoard] = useState(boardModel);\n\n    for(let i = 0; i<BOARD_SIZE; i++){\n        for(let j = 0; j<BOARD_SIZE; j++){\n            boardView[i].push(\n                <Square key={i+\"\"+j} squareModel={boardModel[i][j]}></Square>\n            );\n        }\n    }\n    function grabPiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        const currentBoard = boardViewRef.current;\n        if(element.classList.contains(\"piece\") && currentBoard){\n            const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n            const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n            const grabX = Math.floor((event.clientX - currentBoard.offsetLeft) / BOARD_SIZE);\n            const grabY = Math.abs(Math.ceil((event.clientY - currentBoard.offsetTop - BOARD_VIEW_HEIGHT) / BOARD_SIZE));\n            setGrabPiecePos()\n            const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n            const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n            element.style.position = \"absolute\";\n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element);\n        }\n    }\n    \n    function movePiece(event: React.MouseEvent){\n        if(activePiece && boardViewRef.current){\n            const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n            const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n            const minX = boardViewRef.current.offsetLeft;\n            const minY = boardViewRef.current.offsetTop;\n            const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n            const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n            const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n            const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n            if (x < minX) {\n                activePiece.style.left = `${minX}px`;\n            }\n            else if (x > maxX) {\n                activePiece.style.left = `${maxX}px`;\n            }\n            else {\n                activePiece.style.left = `${x}px`;\n            }\n    \n            if (y < minY) {\n                activePiece.style.top = `${minY}px`;\n            }\n            else if (y > maxY) {\n                activePiece.style.top = `${maxY}px`;\n            }\n            else {\n                activePiece.style.top = `${y}px`;\n            }\n        }\n    }\n    \n    function dropPiece(event: React.MouseEvent){\n        console.log(event);\n        if(activePiece && boardViewRef.current){\n            setActivePiece(null);\n        }\n    }\n    return(\n        <div id = \"chessboard\"\n        onMouseMove={event => movePiece(event)}   \n        onMouseDown={event => grabPiece(event)}\n        onMouseUp={event => dropPiece(event)}\n        ref={boardViewRef}>\n            {boardView}\n        </div>\n    );\n}"],"mappings":";;AAAA,OAAO,kBAAkB;AACzB,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAAoBC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,UAAU,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,UAAUA,CAACC,KAA0B,EAAC;EAAAC,EAAA;EAC1D,MAAMC,WAAW,GAAGF,KAAK,CAACE,WAAW;EACrC,MAAMC,YAAY,GAAGT,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAsB,IAAI,CAAC;EACzE,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EACrE,MAAMa,UAAU,GAAG,IAAIf,eAAe,CAACS,WAAW,CAAC,CAACO,aAAa,CAAC,CAAC;EACnE,MAAMC,SAAa,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;EAE/C,MAAM,CAACC,UAAU,EAACC,aAAa,CAAC,GAAGjB,QAAQ,CAACa,UAAU,CAAC;EAEvD,KAAI,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACjB,UAAU,EAAEiB,CAAC,EAAE,EAAC;IAC7B,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAClB,UAAU,EAAEkB,CAAC,EAAE,EAAC;MAC7BJ,SAAS,CAACG,CAAC,CAAC,CAACE,IAAI,eACbjB,OAAA,CAACN,MAAM;QAAcwB,WAAW,EAAER,UAAU,CAACK,CAAC,CAAC,CAACC,CAAC;MAAE,GAAtCD,CAAC,GAAC,EAAE,GAACC,CAAC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyC,CAChE,CAAC;IACL;EACJ;EACA,SAASC,SAASA,CAACC,KAAuB,EAAC;IACvC,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAqB;IAC3C,MAAMC,YAAY,GAAGtB,YAAY,CAACuB,OAAO;IACzC,IAAGH,OAAO,CAACI,SAAS,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIH,YAAY,EAAC;MACnD,MAAMI,iBAAiB,GAAG1B,YAAY,CAACuB,OAAO,CAACI,YAAY;MAC3D,MAAMC,gBAAgB,GAAG5B,YAAY,CAACuB,OAAO,CAACM,WAAW;MACzD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACb,KAAK,CAACc,OAAO,GAAGX,YAAY,CAACY,UAAU,IAAIzC,UAAU,CAAC;MAChF,MAAM0C,KAAK,GAAGJ,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,IAAI,CAAC,CAAClB,KAAK,CAACmB,OAAO,GAAGhB,YAAY,CAACiB,SAAS,GAAGb,iBAAiB,IAAIjC,UAAU,CAAC,CAAC;MAC5GW,eAAe,CAAC,CAAC;MACjB,MAAMoC,CAAC,GAAGrB,KAAK,CAACc,OAAO,GAAEL,gBAAgB,GAAC,EAAG;MAC7C,MAAMa,CAAC,GAAGtB,KAAK,CAACmB,OAAO,GAAEZ,iBAAiB,GAAC,EAAG;MAC9CN,OAAO,CAACsB,KAAK,CAACC,QAAQ,GAAG,UAAU;MACnCvB,OAAO,CAACsB,KAAK,CAACE,IAAI,GAAI,GAAEJ,CAAE,IAAG;MAC7BpB,OAAO,CAACsB,KAAK,CAACG,GAAG,GAAI,GAAEJ,CAAE,IAAG;MAC5BvC,cAAc,CAACkB,OAAO,CAAC;IAC3B;EACJ;EAEA,SAAS0B,SAASA,CAAC3B,KAAuB,EAAC;IACvC,IAAGlB,WAAW,IAAID,YAAY,CAACuB,OAAO,EAAC;MACnC,MAAMG,iBAAiB,GAAG1B,YAAY,CAACuB,OAAO,CAACI,YAAY;MAC3D,MAAMC,gBAAgB,GAAG5B,YAAY,CAACuB,OAAO,CAACI,YAAY;MAC1D,MAAMoB,IAAI,GAAG/C,YAAY,CAACuB,OAAO,CAACW,UAAU;MAC5C,MAAMc,IAAI,GAAGhD,YAAY,CAACuB,OAAO,CAACgB,SAAS;MAC3C,MAAMU,IAAI,GAAGjD,YAAY,CAACuB,OAAO,CAACW,UAAU,GAAK,CAAC,GAAC,CAAC,GAAEN,gBAAiB;MACvE,MAAMsB,IAAI,GAAGlD,YAAY,CAACuB,OAAO,CAACgB,SAAS,GAAK,CAAC,GAAC,CAAC,GAAEb,iBAAkB;MAEvE,MAAMc,CAAC,GAAGrB,KAAK,CAACc,OAAO,GAAEL,gBAAgB,GAAC,EAAG;MAC7C,MAAMa,CAAC,GAAGtB,KAAK,CAACmB,OAAO,GAAEZ,iBAAiB,GAAC,EAAG;MAE9C,IAAIc,CAAC,GAAGO,IAAI,EAAE;QACV9C,WAAW,CAACyC,KAAK,CAACE,IAAI,GAAI,GAAEG,IAAK,IAAG;MACxC,CAAC,MACI,IAAIP,CAAC,GAAGS,IAAI,EAAE;QACfhD,WAAW,CAACyC,KAAK,CAACE,IAAI,GAAI,GAAEK,IAAK,IAAG;MACxC,CAAC,MACI;QACDhD,WAAW,CAACyC,KAAK,CAACE,IAAI,GAAI,GAAEJ,CAAE,IAAG;MACrC;MAEA,IAAIC,CAAC,GAAGO,IAAI,EAAE;QACV/C,WAAW,CAACyC,KAAK,CAACG,GAAG,GAAI,GAAEG,IAAK,IAAG;MACvC,CAAC,MACI,IAAIP,CAAC,GAAGS,IAAI,EAAE;QACfjD,WAAW,CAACyC,KAAK,CAACG,GAAG,GAAI,GAAEK,IAAK,IAAG;MACvC,CAAC,MACI;QACDjD,WAAW,CAACyC,KAAK,CAACG,GAAG,GAAI,GAAEJ,CAAE,IAAG;MACpC;IACJ;EACJ;EAEA,SAASU,SAASA,CAAChC,KAAuB,EAAC;IACvCiC,OAAO,CAACC,GAAG,CAAClC,KAAK,CAAC;IAClB,IAAGlB,WAAW,IAAID,YAAY,CAACuB,OAAO,EAAC;MACnCrB,cAAc,CAAC,IAAI,CAAC;IACxB;EACJ;EACA,oBACIP,OAAA;IAAK2D,EAAE,EAAG,YAAY;IACtBC,WAAW,EAAEpC,KAAK,IAAI2B,SAAS,CAAC3B,KAAK,CAAE;IACvCqC,WAAW,EAAErC,KAAK,IAAID,SAAS,CAACC,KAAK,CAAE;IACvCsC,SAAS,EAAEtC,KAAK,IAAIgC,SAAS,CAAChC,KAAK,CAAE;IACrCuC,GAAG,EAAE1D,YAAa;IAAA2D,QAAA,EACbpD;EAAS;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd;AAACnB,EAAA,CApFuBF,UAAU;AAAAgE,EAAA,GAAVhE,UAAU;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}