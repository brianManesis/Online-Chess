{"ast":null,"code":"import { PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\nexport class KingModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n    this.isChecked = void 0;\n    this.isChecked = false;\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.updatePossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const king = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (!king) return this.possibleMoves;\n    const kingDirections = KingModel.kingDirections;\n    const chessNotation = square.getPos();\n    const posArray = boardModel.posToArrayPos(chessNotation);\n    if (!posArray) return this.possibleMoves;\n    let i = posArray.i;\n    let j = posArray.j;\n    for (const [key, value] of Object.entries(kingDirections)) {\n      this.checkSquare(board, i, j, value.dx, value.dy, playerColor);\n    }\n    this.possibleMoves.forEach(element => {\n      if (this.kingInCheck(boardModel, element)) {\n        this.possibleMoves.delete(element);\n      }\n    });\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n  kingInCheck(boardModel, kingPos) {\n    let lookForQueen = boardModel.searchBoardFromPos(this, kingPos, QueenModel.queenDirections, PieceType.QUEEN, boardModel.findPieceInDirection);\n    let lookForRook = boardModel.searchBoardFromPos(this, kingPos, RookModel.rookDirections, PieceType.ROOK, boardModel.findPieceInDirection);\n    let lookForBishop = boardModel.searchBoardFromPos(this, kingPos, BishopModel.bishopDirections, PieceType.BISHOP, boardModel.findPieceInDirection);\n    let lookForKnight = boardModel.searchBoardFromPos(this, kingPos, KnightModel.knightDirections, PieceType.KNIGHT, boardModel.findPiece);\n    let lookForKing = boardModel.searchBoardFromPos(this, kingPos, KingModel.kingDirections, PieceType.KING, boardModel.findPiece);\n    let lookForPawn = boardModel.findPawnAttack(this, kingPos);\n    return lookForQueen || lookForRook || lookForBishop || lookForKnight || lookForKing || lookForPawn;\n  }\n}\nKingModel.kingDirections = {\n  left: {\n    dx: -1,\n    dy: 0\n  },\n  right: {\n    dx: 1,\n    dy: 0\n  },\n  up: {\n    dx: 0,\n    dy: -1\n  },\n  down: {\n    dx: 0,\n    dy: 1\n  },\n  leftUp: {\n    dx: -1,\n    dy: -1\n  },\n  rightUp: {\n    dx: 1,\n    dy: -1\n  },\n  leftDown: {\n    dx: -1,\n    dy: 1\n  },\n  rightDown: {\n    dx: 1,\n    dy: 1\n  }\n};","map":{"version":3,"names":["PieceType","PieceModel","QueenModel","RookModel","BishopModel","KnightModel","KingModel","constructor","type","color","isChecked","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","updatePossibleMoves","has","square","king","getPiece","board","getChessBoard","possibleMoves","clear","kingDirections","chessNotation","posArray","posToArrayPos","i","j","key","value","Object","entries","checkSquare","dx","dy","forEach","element","kingInCheck","delete","console","log","kingPos","lookForQueen","searchBoardFromPos","queenDirections","QUEEN","findPieceInDirection","lookForRook","rookDirections","ROOK","lookForBishop","bishopDirections","BISHOP","lookForKnight","knightDirections","KNIGHT","findPiece","lookForKing","KING","lookForPawn","findPawnAttack","left","right","up","down","leftUp","rightUp","leftDown","rightDown"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/KingModel.ts"],"sourcesContent":["import { PlayerColor, PieceType, BOARD_SIZE } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\n\nexport class KingModel extends PieceModel{\n\n    public isChecked:boolean;\n\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n        this.isChecked = false;\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.updatePossibleMoves(boardModel,startSquare,playerColor).has(pos); \n        }\n    \n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const king = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(!king) return this.possibleMoves;\n\n        const kingDirections = KingModel.kingDirections;\n        const chessNotation = square.getPos();\n        const posArray = boardModel.posToArrayPos(chessNotation);\n\n        if(!posArray) return this.possibleMoves;\n\n        let i = posArray.i\n        let j = posArray.j; \n        \n        for(const [key,value] of Object.entries(kingDirections)){\n            this.checkSquare(board,i,j,value.dx,value.dy,playerColor);\n        }\n        \n        this.possibleMoves.forEach(element=>{\n            if(this.kingInCheck(boardModel,element)){\n                this.possibleMoves.delete(element);\n            }\n        });\n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n    public kingInCheck(boardModel:ChessBoardModel, kingPos:string){\n        let lookForQueen = boardModel.searchBoardFromPos\n        (this,kingPos,QueenModel.queenDirections,PieceType.QUEEN,boardModel.findPieceInDirection);\n\n        let lookForRook = boardModel.searchBoardFromPos\n        (this,kingPos,RookModel.rookDirections,PieceType.ROOK,boardModel.findPieceInDirection);\n\n        let lookForBishop = boardModel.searchBoardFromPos\n        (this,kingPos,BishopModel.bishopDirections,PieceType.BISHOP,boardModel.findPieceInDirection);\n\n        let lookForKnight = boardModel.searchBoardFromPos\n        (this,kingPos,KnightModel.knightDirections,PieceType.KNIGHT,boardModel.findPiece);\n\n        let lookForKing = boardModel.searchBoardFromPos\n        (this,kingPos,KingModel.kingDirections,PieceType.KING,boardModel.findPiece);\n\n         let lookForPawn = boardModel.findPawnAttack\n         (this,kingPos);\n\n        return lookForQueen || lookForRook || lookForBishop || lookForKnight || lookForKing || lookForPawn;\n    }\n    private static kingDirections = {\n            left:{\n                dx:-1,\n                dy:0\n            },\n            right:{\n                dx:1,\n                dy:0\n            },\n            up:{\n                dx:0,\n                dy:-1\n            },\n            down:{\n                dx:0,\n                dy:1\n            },\n            leftUp:{\n                dx:-1,\n                dy:-1\n            },\n            rightUp:{\n                dx:1,\n                dy:-1\n            },\n            leftDown:{\n                dx:-1,\n                dy:1\n            },\n            rightDown:{\n                dx:1,\n                dy:1\n            }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}