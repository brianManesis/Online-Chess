{"ast":null,"code":"import { PieceType, PlayerColor } from \"../../utils/Constants\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KingModel } from \"./KingModel\";\nimport { KnightModel } from \"./KnightModel\";\nimport { PawnModel } from \"./PawnModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nexport class PieceModel {\n  constructor(type, color) {\n    this.type = void 0;\n    this.color = void 0;\n    this.possibleMoves = void 0;\n    this.imageURI = void 0;\n    this.beenMoved = void 0;\n    this.type = type;\n    this.color = color;\n    this.imageURI = `/assets/images/${color + type}.png`;\n    this.beenMoved = false;\n    this.possibleMoves = new Set();\n  }\n  getType() {\n    return this.type;\n  }\n  getColor() {\n    return this.color;\n  }\n  checkSquares(board, i, j, dx, dy, playerColor) {\n    let flag = true;\n    while (flag) {\n      flag = this.checkSquare(board, i, j, dx, dy, playerColor);\n      i = i + dy;\n      j = j + dx;\n    }\n  }\n  checkSquare(board, i, j, dx, dy, playerColor) {\n    let dI = i + dy;\n    let dJ = j + dx;\n    if (ChessBoardModel.withinBoard(dI, dJ)) {\n      const tempSquare = board[dI][dJ];\n      const tempPiece = tempSquare.getPiece();\n      if (tempPiece && tempPiece.getColor() !== playerColor) {\n        this.possibleMoves.add(tempSquare.getPos());\n        return false;\n      } else if (!tempPiece) {\n        this.possibleMoves.add(tempSquare.getPos());\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n}\nconst whitePieces = [new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new RookModel(PieceType.ROOK, PlayerColor.WHITE), new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE), new BishopModel(PieceType.BISHOP, PlayerColor.WHITE), new QueenModel(PieceType.QUEEN, PlayerColor.WHITE), new KingModel(PieceType.KING, PlayerColor.WHITE), new BishopModel(PieceType.BISHOP, PlayerColor.WHITE), new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE), new RookModel(PieceType.ROOK, PlayerColor.WHITE)];\nconst blackPieces = [new RookModel(PieceType.ROOK, PlayerColor.BLACK), new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK), new BishopModel(PieceType.BISHOP, PlayerColor.BLACK), new QueenModel(PieceType.QUEEN, PlayerColor.BLACK), new KingModel(PieceType.KING, PlayerColor.BLACK), new BishopModel(PieceType.BISHOP, PlayerColor.BLACK), new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK), new RookModel(PieceType.ROOK, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK)];","map":{"version":3,"names":["PieceType","PlayerColor","ChessBoardModel","BishopModel","KingModel","KnightModel","PawnModel","QueenModel","RookModel","PieceModel","constructor","type","color","possibleMoves","imageURI","beenMoved","Set","getType","getColor","checkSquares","board","i","j","dx","dy","playerColor","flag","checkSquare","dI","dJ","withinBoard","tempSquare","tempPiece","getPiece","add","getPos","whitePieces","PAWN","WHITE","ROOK","KNIGHT","BISHOP","QUEEN","KING","blackPieces","BLACK"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/PieceModel.ts"],"sourcesContent":["import { PieceType, PlayerColor } from \"../../utils/Constants\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KingModel } from \"./KingModel\";\nimport { KnightModel } from \"./KnightModel\";\nimport { PawnModel } from \"./PawnModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\n\nexport abstract class PieceModel{\n    protected type:PieceType;\n    protected color:PlayerColor;\n    protected possibleMoves:Set<string>\n    public imageURI:string;\n    public beenMoved:boolean;\n\n    public constructor(type: PieceType, color: PlayerColor){\n        this.type = type;\n        this.color = color;\n        this.imageURI = `/assets/images/${color+type}.png`;\n        this.beenMoved = false;\n        this.possibleMoves = new Set<string>();\n    }\n    public abstract validMove(boardModel:ChessBoardModel, startSquare:SquareModel, endSquare:SquareModel, playerColor:PlayerColor):boolean;\n\n    public getType(): PieceType{\n        return this.type;\n    }\n    public getColor(): PlayerColor{\n        return this.color;\n    }\n    protected checkSquares(board:Array<Array<SquareModel>>,i:number,j:number,dx:number,\n        dy:number, playerColor:PlayerColor){\n        let flag = true;\n        while(flag){\n            flag = this.checkSquare(board,i,j,dx,dy,playerColor);\n            i = i+dy;\n            j = j+dx;\n        }\n    }\n    protected checkSquare(board:Array<Array<SquareModel>>,i:number,j:number,dx:number,\n        dy:number, playerColor:PlayerColor){\n            let dI:number = i+dy;\n            let dJ:number = j+dx;\n            if(ChessBoardModel.withinBoard(dI,dJ)){\n                const tempSquare:SquareModel = board[dI][dJ];\n                const tempPiece = tempSquare.getPiece()\n                if(tempPiece && tempPiece.getColor() !== playerColor){\n                    this.possibleMoves.add(tempSquare.getPos());\n                    return false;\n                }\n                else if(!tempPiece){\n                    this.possibleMoves.add(tempSquare.getPos());\n                    return true;\n                }\n                else{ return false }\n            }\n            else{ return false; }\n     }\n}\n\nconst whitePieces = [\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n    new RookModel(PieceType.ROOK,PlayerColor.WHITE),\n    new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE),\n    new BishopModel(PieceType.BISHOP, PlayerColor.WHITE),\n    new QueenModel(PieceType.QUEEN, PlayerColor.WHITE),\n    new KingModel(PieceType.KING, PlayerColor.WHITE),\n    new BishopModel(PieceType.BISHOP, PlayerColor.WHITE),\n    new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE),\n    new RookModel(PieceType.ROOK,PlayerColor.WHITE)\n];\n\n const blackPieces = [\n    new RookModel(PieceType.ROOK,PlayerColor.BLACK),\n    new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK),\n    new BishopModel(PieceType.BISHOP, PlayerColor.BLACK),\n    new QueenModel(PieceType.QUEEN, PlayerColor.BLACK),\n    new KingModel(PieceType.KING, PlayerColor.BLACK),\n    new BishopModel(PieceType.BISHOP, PlayerColor.BLACK),\n    new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK),\n    new RookModel(PieceType.ROOK,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n    new PawnModel(PieceType.PAWN,PlayerColor.BLACK)\n];"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}