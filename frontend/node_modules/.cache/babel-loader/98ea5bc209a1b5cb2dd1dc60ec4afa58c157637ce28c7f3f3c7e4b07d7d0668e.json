{"ast":null,"code":"import { PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\nexport class KingModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n    this.isChecked = void 0;\n    this.isChecked = false;\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.getPossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  getPossibleMoves(boardModel, square, playerColor) {\n    const king = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (!king) return this.possibleMoves;\n    const kingDirections = KingModel.kingDirections;\n    const chessNotation = square.getPos();\n    const posArray = boardModel.posToArrayPos(chessNotation);\n    if (!posArray) return this.possibleMoves;\n    let i = posArray.i;\n    let j = posArray.j;\n    for (const [, value] of Object.entries(kingDirections)) {\n      this.checkSquare(board, i, j, value.dx, value.dy, playerColor);\n    }\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n  kingInCheck(boardModel, kingPos) {\n    let lookForQueen = boardModel.searchBoardFromPos(this, kingPos, QueenModel.queenDirections, PieceType.QUEEN, boardModel.findPieceInDirection);\n    let lookForRook = boardModel.searchBoardFromPos(this, kingPos, RookModel.rookDirections, PieceType.ROOK, boardModel.findPieceInDirection);\n    let lookForBishop = boardModel.searchBoardFromPos(this, kingPos, BishopModel.bishopDirections, PieceType.BISHOP, boardModel.findPieceInDirection);\n    let lookForKnight = boardModel.searchBoardFromPos(this, kingPos, KnightModel.knightDirections, PieceType.KNIGHT, boardModel.findPiece);\n    let lookForKing = boardModel.searchBoardFromPos(this, kingPos, KingModel.kingDirections, PieceType.KING, boardModel.findPiece);\n    let lookForPawn = boardModel.findPawnAttack(this, kingPos);\n    return lookForQueen || lookForRook || lookForBishop || lookForKnight || lookForKing || lookForPawn;\n  }\n}\nKingModel.kingDirections = {\n  left: {\n    dx: -1,\n    dy: 0\n  },\n  right: {\n    dx: 1,\n    dy: 0\n  },\n  up: {\n    dx: 0,\n    dy: -1\n  },\n  down: {\n    dx: 0,\n    dy: 1\n  },\n  leftUp: {\n    dx: -1,\n    dy: -1\n  },\n  rightUp: {\n    dx: 1,\n    dy: -1\n  },\n  leftDown: {\n    dx: -1,\n    dy: 1\n  },\n  rightDown: {\n    dx: 1,\n    dy: 1\n  }\n};","map":{"version":3,"names":["PieceType","PieceModel","QueenModel","RookModel","BishopModel","KnightModel","KingModel","constructor","type","color","isChecked","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","getPossibleMoves","has","square","king","getPiece","board","getChessBoard","possibleMoves","clear","kingDirections","chessNotation","posArray","posToArrayPos","i","j","value","Object","entries","checkSquare","dx","dy","console","log","kingInCheck","kingPos","lookForQueen","searchBoardFromPos","queenDirections","QUEEN","findPieceInDirection","lookForRook","rookDirections","ROOK","lookForBishop","bishopDirections","BISHOP","lookForKnight","knightDirections","KNIGHT","findPiece","lookForKing","KING","lookForPawn","findPawnAttack","left","right","up","down","leftUp","rightUp","leftDown","rightDown"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/KingModel.ts"],"sourcesContent":["import { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\n\nexport class KingModel extends PieceModel{\n\n    public isChecked:boolean;\n\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n        this.isChecked = false;\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.getPossibleMoves(boardModel,startSquare,playerColor).has(pos); \n        }\n    \n    private getPossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const king = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(!king) return this.possibleMoves;\n\n        const kingDirections = KingModel.kingDirections;\n        const chessNotation = square.getPos();\n        const posArray = boardModel.posToArrayPos(chessNotation);\n\n        if(!posArray) return this.possibleMoves;\n\n        let i = posArray.i\n        let j = posArray.j; \n        \n        for(const [,value] of Object.entries(kingDirections)){\n            this.checkSquare(board,i,j,value.dx,value.dy,playerColor);\n        }\n        \n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n    public kingInCheck(boardModel:ChessBoardModel, kingPos:string){\n        let lookForQueen = boardModel.searchBoardFromPos\n        (this,kingPos,QueenModel.queenDirections,PieceType.QUEEN,boardModel.findPieceInDirection);\n\n        let lookForRook = boardModel.searchBoardFromPos\n        (this,kingPos,RookModel.rookDirections,PieceType.ROOK,boardModel.findPieceInDirection);\n\n        let lookForBishop = boardModel.searchBoardFromPos\n        (this,kingPos,BishopModel.bishopDirections,PieceType.BISHOP,boardModel.findPieceInDirection);\n\n        let lookForKnight = boardModel.searchBoardFromPos\n        (this,kingPos,KnightModel.knightDirections,PieceType.KNIGHT,boardModel.findPiece);\n\n        let lookForKing = boardModel.searchBoardFromPos\n        (this,kingPos,KingModel.kingDirections,PieceType.KING,boardModel.findPiece);\n\n         let lookForPawn = boardModel.findPawnAttack\n         (this,kingPos);\n\n        return lookForQueen || lookForRook || lookForBishop || lookForKnight || lookForKing || lookForPawn;\n    }\n    private static kingDirections = {\n            left:{\n                dx:-1,\n                dy:0\n            },\n            right:{\n                dx:1,\n                dy:0\n            },\n            up:{\n                dx:0,\n                dy:-1\n            },\n            down:{\n                dx:0,\n                dy:1\n            },\n            leftUp:{\n                dx:-1,\n                dy:-1\n            },\n            rightUp:{\n                dx:1,\n                dy:-1\n            },\n            leftDown:{\n                dx:-1,\n                dy:1\n            },\n            rightDown:{\n                dx:1,\n                dy:1\n            }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}