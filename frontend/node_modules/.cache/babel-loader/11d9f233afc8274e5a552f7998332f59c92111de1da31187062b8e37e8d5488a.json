{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../Constants';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(props) {\n  _s();\n  const playerColor = props.playerColor;\n  const chessBoard = new ChessBoardModel(playerColor);\n  const boardViewRef = useRef(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [boardModel, setBoardModel] = useState(chessBoard);\n  const [boardView, setBoardView] = useState([[], [], [], [], [], [], [], []]);\n  useEffect(() => {\n    makeChessBoard();\n    console.log(boardModel);\n    console.log(boardView);\n  }, [boardModel]);\n  function makeChessBoard() {\n    const boardViewTemp = [[], [], [], [], [], [], [], []];\n    const currentBoardModel = boardModel.getChessBoard();\n    if (playerColor === PlayerColor.WHITE) {\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        for (let j = 0; j < BOARD_SIZE; j++) {\n          boardViewTemp[i].push( /*#__PURE__*/_jsxDEV(Square, {\n            squareModel: currentBoardModel[i][j]\n          }, i + \"\" + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    } else {\n      for (let i = BOARD_SIZE - 1; i >= 0; i--) {\n        let k = 0;\n        for (let j = BOARD_SIZE - 1; j >= 0; j--) {\n          //console.log(i,j);\n          boardViewTemp[j].push( /*#__PURE__*/_jsxDEV(Square, {\n            squareModel: currentBoardModel[j][i]\n          }, j + \"\" + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this));\n          k++;\n        }\n      }\n    }\n    setBoardView(() => boardViewTemp);\n  }\n  function handleClick(event) {\n    if (activePiece) {\n      movePiece(event);\n    } else {\n      selectPiece(event);\n    }\n  }\n  function selectPiece(event) {\n    const element = event.target;\n    const currentBoard = boardViewRef.current;\n    if (element.classList.contains(\"piece\") && currentBoard && !activePiece) {\n      setActivePiece(element);\n    }\n  }\n  function movePiece(event) {\n    const element = event.target;\n    if (activePiece && boardViewRef.current) {\n      let startSquare = activePiece.parentElement;\n      let endSquare = element;\n      let activePieceColor = activePiece.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n      if (endSquare.classList.contains(\"piece\")) {\n        let endPieceColor = endSquare.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n        if (endPieceColor == activePieceColor) {\n          setActivePiece(endSquare);\n          return;\n        }\n        endSquare = endSquare.parentElement;\n      }\n      if (startSquare && endSquare) {\n        const updatedBoardModel = boardModel.clone();\n        const updatedBoard = updatedBoardModel.getChessBoard();\n        let startPos = updatedBoardModel.posToArrayPos(startSquare.id);\n        let endPos = updatedBoardModel.posToArrayPos(endSquare.id);\n        if (startPos && endPos) {\n          updatedBoardModel.pieceMove(updatedBoard[startPos.i][startPos.j], updatedBoard[endPos.i][endPos.j]);\n        }\n        setBoardModel(updatedBoardModel);\n      }\n      setActivePiece(null);\n    }\n  }\n  // function grabPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     const currentBoard = boardViewRef.current;\n  //     setGrabPiecePos(element.parentElement?.id+\"\");\n  //     console.log(element.parentElement?.id);\n  //     if(element.classList.contains(\"piece\") && currentBoard){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n  //         element.style.position = \"absolute\";\n  //         element.style.left = `${x}px`;\n  //         element.style.top = `${y}px`;\n  //         setActivePiece(element);\n  //     }\n  // }\n\n  // function movePiece(event: React.MouseEvent){\n  //     if(activePiece && boardViewRef.current){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n  //         const minX = boardViewRef.current.offsetLeft;\n  //         const minY = boardViewRef.current.offsetTop;\n  //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n  //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n  //         if (x < minX) {\n  //             activePiece.style.left = `${minX}px`;\n  //         }\n  //         else if (x > maxX) {\n  //             activePiece.style.left = `${maxX}px`;\n  //         }\n  //         else {\n  //             activePiece.style.left = `${x}px`;\n  //         }\n\n  //         if (y < minY) {\n  //             activePiece.style.top = `${minY}px`;\n  //         }\n  //         else if (y > maxY) {\n  //             activePiece.style.top = `${maxY}px`;\n  //         }\n  //         else {\n  //             activePiece.style.top = `${y}px`;\n  //         }\n  //     }\n  // }\n\n  // function dropPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     console.log(event);\n  //     if(activePiece && boardViewRef.current){\n  //         setActivePiece(null);\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    onClick: event => handleClick(event),\n    ref: boardViewRef,\n    children: boardView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(Chessboard, \"YMLJKHwzIHECotBJlmUSV9KKheE=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Square","ChessBoardModel","useEffect","useRef","useState","BOARD_SIZE","PlayerColor","React","jsxDEV","_jsxDEV","Chessboard","props","_s","playerColor","chessBoard","boardViewRef","activePiece","setActivePiece","boardModel","setBoardModel","boardView","setBoardView","makeChessBoard","console","log","boardViewTemp","currentBoardModel","getChessBoard","WHITE","i","j","push","squareModel","fileName","_jsxFileName","lineNumber","columnNumber","k","handleClick","event","movePiece","selectPiece","element","target","currentBoard","current","classList","contains","startSquare","parentElement","endSquare","activePieceColor","id","includes","BLACK","endPieceColor","updatedBoardModel","clone","updatedBoard","startPos","posToArrayPos","endPos","pieceMove","onClick","ref","children","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../Constants';\nimport React from 'react';\nimport { possiblePawnMoves } from '../../../../model/PossibleMoves';\nimport { SquareModel } from '../../../../model/SquareModel';\n\nexport default function Chessboard(props:{playerColor:string}){\n    const playerColor = props.playerColor;\n    const chessBoard:ChessBoardModel = new ChessBoardModel(playerColor);\n    const boardViewRef = useRef<HTMLDivElement>(null);\n    const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n    const [boardModel,setBoardModel] = useState(chessBoard);\n    const [boardView, setBoardView] = useState([[],[],[],[],[],[],[],[]]);\n        \n    useEffect(()=>{\n        makeChessBoard();\n        console.log(boardModel);\n        console.log(boardView);\n    },[boardModel]);\n\n    function makeChessBoard(){\n        const boardViewTemp:any = [[],[],[],[],[],[],[],[]];\n        const currentBoardModel:Array<Array<SquareModel>> = boardModel.getChessBoard();\n        if(playerColor === PlayerColor.WHITE){\n            for(let i = 0; i<BOARD_SIZE; i++){\n                for(let j = 0; j<BOARD_SIZE; j++){\n                    boardViewTemp[i].push(\n                        <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n                    );\n                }\n            }\n        }\n        else{\n            for(let i = BOARD_SIZE-1; i>=0; i--){\n                let k = 0;\n                for(let j = BOARD_SIZE-1; j>=0; j--){\n                    //console.log(i,j);\n                    boardViewTemp[j].push(\n                        <Square key={j+\"\"+i} squareModel={currentBoardModel[j][i]}></Square>\n                    );\n                    k++;\n                }\n            }\n        }\n        setBoardView(() => boardViewTemp);\n    }\n    function handleClick(event: React.MouseEvent){\n        if(activePiece){\n            movePiece(event);\n        }\n        else{\n            selectPiece(event);\n        }\n    }\n    function selectPiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        const currentBoard = boardViewRef.current;\n        if(element.classList.contains(\"piece\") && currentBoard && !activePiece){\n            setActivePiece(element); \n        }       \n    }\n    function movePiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        if(activePiece && boardViewRef.current){\n            let startSquare = activePiece.parentElement;\n            let endSquare: HTMLElement | null = element;\n            let activePieceColor:string = activePiece.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n            if(endSquare.classList.contains(\"piece\")){\n                let endPieceColor = endSquare.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n                if(endPieceColor == activePieceColor){\n                    setActivePiece(endSquare);\n                    return;\n                }\n                endSquare = endSquare.parentElement;\n            }\n\n\n            if(startSquare && endSquare){\n                const updatedBoardModel = boardModel.clone();\n                const updatedBoard = updatedBoardModel.getChessBoard();\n                let startPos = updatedBoardModel.posToArrayPos(startSquare.id);\n                let endPos = updatedBoardModel.posToArrayPos(endSquare.id);\n                if(startPos && endPos){\n                    updatedBoardModel.pieceMove(\n                        updatedBoard[startPos.i][startPos.j],\n                        updatedBoard[endPos.i][endPos.j]\n                    );\n                }\n                 setBoardModel(updatedBoardModel);\n            }\n            setActivePiece(null);\n        }\n    }\n    // function grabPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     const currentBoard = boardViewRef.current;\n    //     setGrabPiecePos(element.parentElement?.id+\"\");\n    //     console.log(element.parentElement?.id);\n    //     if(element.classList.contains(\"piece\") && currentBoard){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n    //         element.style.position = \"absolute\";\n    //         element.style.left = `${x}px`;\n    //         element.style.top = `${y}px`;\n    //         setActivePiece(element);\n    //     }\n    // }\n    \n    // function movePiece(event: React.MouseEvent){\n    //     if(activePiece && boardViewRef.current){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n    //         const minX = boardViewRef.current.offsetLeft;\n    //         const minY = boardViewRef.current.offsetTop;\n    //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n    //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n    //         if (x < minX) {\n    //             activePiece.style.left = `${minX}px`;\n    //         }\n    //         else if (x > maxX) {\n    //             activePiece.style.left = `${maxX}px`;\n    //         }\n    //         else {\n    //             activePiece.style.left = `${x}px`;\n    //         }\n    \n    //         if (y < minY) {\n    //             activePiece.style.top = `${minY}px`;\n    //         }\n    //         else if (y > maxY) {\n    //             activePiece.style.top = `${maxY}px`;\n    //         }\n    //         else {\n    //             activePiece.style.top = `${y}px`;\n    //         }\n    //     }\n    // }\n    \n    // function dropPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     console.log(event);\n    //     if(activePiece && boardViewRef.current){\n    //         setActivePiece(null);\n    //     }\n    // }\n    return(\n        <div id = \"chessboard\"\n        onClick={event=>handleClick(event)}\n        ref={boardViewRef}>\n            {boardView}\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}