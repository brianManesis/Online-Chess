{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nexport class BishopModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.updatePossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const rook = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (rook) {\n      const bishopDirections = this.bishopDirections();\n      const left = bishopDirections.leftUp;\n      const right = bishopDirections.rightUp;\n      const up = bishopDirections.leftDown;\n      const down = bishopDirections.rightDown;\n      const chessNotation = square.getPos();\n      const posArray = boardModel.posToArrayPos(chessNotation);\n      if (posArray) {\n        let i = posArray.i;\n        let j = posArray.j;\n        for (const [key, value] of Object.entries(bishopDirections)) {\n          this.checkSquares(board, i, j, value.dx, value.dy, playerColor);\n        }\n      }\n    }\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n  bishopDirections() {\n    return {\n      leftUp: {\n        dx: -1,\n        dy: -1\n      },\n      rightUp: {\n        dx: 1,\n        dy: -1\n      },\n      leftDown: {\n        dx: -1,\n        dy: 1\n      },\n      rightDown: {\n        dx: 1,\n        dy: 1\n      }\n    };\n  }\n}","map":{"version":3,"names":["PieceModel","BishopModel","constructor","type","color","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","updatePossibleMoves","has","square","rook","getPiece","board","getChessBoard","possibleMoves","clear","bishopDirections","left","leftUp","right","rightUp","up","leftDown","down","rightDown","chessNotation","posArray","posToArrayPos","i","j","key","value","Object","entries","checkSquares","dx","dy","console","log"],"sources":["/home/brian/Desktop/Chess/frontend/src/model/pieces/BishopModel.ts"],"sourcesContent":["import { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\n\nexport class BishopModel extends PieceModel{\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.updatePossibleMoves(boardModel,startSquare,playerColor).has(pos);    }\n\n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const rook = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(rook){\n            const bishopDirections = this.bishopDirections();\n            const left = bishopDirections.leftUp;\n            const right = bishopDirections.rightUp;\n            const up = bishopDirections.leftDown;\n            const down = bishopDirections.rightDown;\n\n            const chessNotation = square.getPos();\n            const posArray = boardModel.posToArrayPos(chessNotation);\n\n            if(posArray){\n                let i = posArray.i;\n                let j = posArray.j; \n                for(const [key,value] of Object.entries(bishopDirections)){\n                    this.checkSquares(board,i,j,value.dx,value.dy,playerColor);\n                }\n            }\n        }\n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n\n    private bishopDirections(){\n        return {\n            leftUp:{\n                dx:-1,\n                dy:-1\n            },\n            rightUp:{\n                dx:1,\n                dy:-1\n            },\n            leftDown:{\n                dx:-1,\n                dy:1\n            },\n            rightDown:{\n                dx:1,\n                dy:1\n            }\n        }\n    }\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,cAAc;AAIzC,OAAO,MAAMC,WAAW,SAASD,UAAU;EAChCE,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IACnD,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;EACtB;EAEOC,SAASA,CAACC,UAA0B,EAAEC,WAAuB,EAChEC,SAAqB,EAAEC,WAAuB,EAAW;IACrD,MAAMC,GAAG,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC;IAC9B,OAAO,IAAI,CAACC,mBAAmB,CAACN,UAAU,EAACC,WAAW,EAACE,WAAW,CAAC,CAACI,GAAG,CAACH,GAAG,CAAC;EAAK;EAEjFE,mBAAmBA,CAACN,UAA0B,EAAEQ,MAAkB,EAAEL,WAAuB,EAAa;IAC5G,MAAMM,IAAI,GAAGD,MAAM,CAACE,QAAQ,CAAC,CAAC;IAC9B,MAAMC,KAAK,GAAGX,UAAU,CAACY,aAAa,CAAC,CAAC;IACxC,IAAI,CAACC,aAAa,CAACC,KAAK,CAAC,CAAC;IAE1B,IAAGL,IAAI,EAAC;MACJ,MAAMM,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAAC,CAAC;MAChD,MAAMC,IAAI,GAAGD,gBAAgB,CAACE,MAAM;MACpC,MAAMC,KAAK,GAAGH,gBAAgB,CAACI,OAAO;MACtC,MAAMC,EAAE,GAAGL,gBAAgB,CAACM,QAAQ;MACpC,MAAMC,IAAI,GAAGP,gBAAgB,CAACQ,SAAS;MAEvC,MAAMC,aAAa,GAAGhB,MAAM,CAACH,MAAM,CAAC,CAAC;MACrC,MAAMoB,QAAQ,GAAGzB,UAAU,CAAC0B,aAAa,CAACF,aAAa,CAAC;MAExD,IAAGC,QAAQ,EAAC;QACR,IAAIE,CAAC,GAAGF,QAAQ,CAACE,CAAC;QAClB,IAAIC,CAAC,GAAGH,QAAQ,CAACG,CAAC;QAClB,KAAI,MAAM,CAACC,GAAG,EAACC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACjB,gBAAgB,CAAC,EAAC;UACtD,IAAI,CAACkB,YAAY,CAACtB,KAAK,EAACgB,CAAC,EAACC,CAAC,EAACE,KAAK,CAACI,EAAE,EAACJ,KAAK,CAACK,EAAE,EAAChC,WAAW,CAAC;QAC9D;MACJ;IACJ;IACAiC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACxB,aAAa,CAAC;IAE/B,OAAO,IAAI,CAACA,aAAa;EAC7B;EAEQE,gBAAgBA,CAAA,EAAE;IACtB,OAAO;MACHE,MAAM,EAAC;QACHiB,EAAE,EAAC,CAAC,CAAC;QACLC,EAAE,EAAC,CAAC;MACR,CAAC;MACDhB,OAAO,EAAC;QACJe,EAAE,EAAC,CAAC;QACJC,EAAE,EAAC,CAAC;MACR,CAAC;MACDd,QAAQ,EAAC;QACLa,EAAE,EAAC,CAAC,CAAC;QACLC,EAAE,EAAC;MACP,CAAC;MACDZ,SAAS,EAAC;QACNW,EAAE,EAAC,CAAC;QACJC,EAAE,EAAC;MACP;IACJ,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}