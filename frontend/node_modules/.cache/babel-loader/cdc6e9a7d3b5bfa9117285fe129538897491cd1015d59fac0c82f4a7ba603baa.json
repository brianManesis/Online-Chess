{"ast":null,"code":"import { PawnModel } from \"./PawnModel\";\nimport { SquareModel } from \"./SquareModel\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.playerColor = playerColor;\n    let col = playerColor == \"white\" ? ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'] : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    let row = playerColor == \"white\" ? [1, 2, 3, 4, 5, 6, 7, 8] : [8, 7, 6, 5, 4, 3, 2, 1];\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let pos = col[i] + row[j];\n        let color = (j + i + 2) % 2 == 0 ? \"white\" : \"black\";\n        this.chessBoard[i].push(new SquareModel(color, pos, new PawnModel(\"Pawn\", \"white\")));\n      }\n    }\n    console.log(this.chessBoard);\n  }\n  genChessBoard() {\n    return this.chessBoard;\n  }\n}","map":{"version":3,"names":["PawnModel","SquareModel","ChessBoardModel","constructor","playerColor","chessBoard","col","row","i","j","pos","color","push","console","log","genChessBoard"],"sources":["/home/brian/Desktop/Projects/ChessApp/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PawnModel } from \"./PawnModel\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"./SquareModel\";\n\nexport class ChessBoardModel{\n    private chessBoard: SquareModel[][];\n    private playerColor:string;\n\n    public constructor(playerColor:string){\n        this.playerColor = playerColor;\n\n        let col = playerColor ==\"white\"?\n        ['h','g','f','e','d','c','b','a']:['a','b','c','d','e','f','g','h'];\n\n        let row = playerColor == \"white\"?\n        [1,2,3,4,5,6,7,8]:[8,7,6,5,4,3,2,1];\n\n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i<8; i++){\n            for(let j = 0; j<8; j++){\n                let pos:string = col[i]+row[j];\n                let color = (j+i+2) % 2 == 0? \"white\":\"black\"\n                \n                this.chessBoard[i].push(\n                    new SquareModel(color,pos,new PawnModel(\"Pawn\",\"white\"))\n                );\n            }\n        }\n        console.log(this.chessBoard);\n    }\n\n    public genChessBoard():SquareModel[][]{\n        return this.chessBoard;\n    }\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAEvC,SAASC,WAAW,QAAQ,eAAe;AAE3C,OAAO,MAAMC,eAAe;EAIjBC,WAAWA,CAACC,WAAkB,EAAC;IAAA,KAH9BC,UAAU;IAAA,KACVD,WAAW;IAGf,IAAI,CAACA,WAAW,GAAGA,WAAW;IAE9B,IAAIE,GAAG,GAAGF,WAAW,IAAG,OAAO,GAC/B,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,GAAC,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC;IAEnE,IAAIG,GAAG,GAAGH,WAAW,IAAI,OAAO,GAChC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAEnC,IAAI,CAACC,UAAU,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;IAC3C,KAAI,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;MACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;QACpB,IAAIC,GAAU,GAAGJ,GAAG,CAACE,CAAC,CAAC,GAACD,GAAG,CAACE,CAAC,CAAC;QAC9B,IAAIE,KAAK,GAAG,CAACF,CAAC,GAACD,CAAC,GAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAE,OAAO,GAAC,OAAO;QAE7C,IAAI,CAACH,UAAU,CAACG,CAAC,CAAC,CAACI,IAAI,CACnB,IAAIX,WAAW,CAACU,KAAK,EAACD,GAAG,EAAC,IAAIV,SAAS,CAAC,MAAM,EAAC,OAAO,CAAC,CAC3D,CAAC;MACL;IACJ;IACAa,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,UAAU,CAAC;EAChC;EAEOU,aAAaA,CAAA,EAAkB;IAClC,OAAO,IAAI,CAACV,UAAU;EAC1B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}