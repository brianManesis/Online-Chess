{"ast":null,"code":"import { BOARD_SIZE } from \"../../utils/Constants\";\nexport class PieceModel {\n  constructor(type, color) {\n    this.type = void 0;\n    this.color = void 0;\n    this.possibleMoves = void 0;\n    this.imageURI = void 0;\n    this.beenMoved = void 0;\n    this.type = type;\n    this.color = color;\n    this.imageURI = `/assets/images/${color + type}.png`;\n    this.beenMoved = false;\n    this.possibleMoves = new Set();\n  }\n  getType() {\n    return this.type;\n  }\n  getColor() {\n    return this.color;\n  }\n  withinBoard(i, j) {\n    return i >= 0 && i < BOARD_SIZE && j >= 0 && j < BOARD_SIZE;\n  }\n  checkSquares(board, i, j, dx, dy, playerColor) {\n    let flag = true;\n    while (flag) {\n      let dI = i + dy;\n      let dJ = j + dx;\n      flag = this.checkSquare(board, i, j, dx, dy, playerColor);\n      i = dI;\n      j = dJ;\n    }\n  }\n  checkSquare(board, i, j, dx, dy, playerColor) {\n    let dI = i + dy;\n    let dJ = j + dx;\n    if (this.withinBoard(dI, dJ)) {\n      const tempSquare = board[dI][dJ];\n      const tempPiece = tempSquare.getPiece();\n      if (tempPiece && tempPiece.getColor() !== playerColor) {\n        this.possibleMoves.add(tempSquare.getPos());\n        return true;\n      } else if (!tempSquare.getPiece()) {\n        this.possibleMoves.add(tempSquare.getPos());\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["BOARD_SIZE","PieceModel","constructor","type","color","possibleMoves","imageURI","beenMoved","Set","getType","getColor","withinBoard","i","j","checkSquares","board","dx","dy","playerColor","flag","dI","dJ","checkSquare","tempSquare","tempPiece","getPiece","add","getPos"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/PieceModel.ts"],"sourcesContent":["import { PieceType, PlayerColor, BOARD_SIZE } from \"../../utils/Constants\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { SquareModel } from \"../SquareModel\";\n\nexport abstract class PieceModel{\n    protected type:PieceType;\n    protected color:PlayerColor;\n    protected possibleMoves:Set<string>\n    public imageURI:string;\n    public beenMoved:boolean;\n\n    public constructor(type: PieceType, color: PlayerColor){\n        this.type = type;\n        this.color = color;\n        this.imageURI = `/assets/images/${color+type}.png`;\n        this.beenMoved = false;\n        this.possibleMoves = new Set<string>();\n    }\n    public abstract validMove(boardModel:ChessBoardModel, startSquare:SquareModel, endSquare:SquareModel, playerColor:PlayerColor):boolean;\n\n    public getType(): PieceType{\n        return this.type;\n    }\n    public getColor(): PlayerColor{\n        return this.color;\n    }\n    public withinBoard(i:number, j:number){\n        return i>=0 &&\n               i<BOARD_SIZE &&\n               j>=0 &&\n               j<BOARD_SIZE;\n    }\n    protected checkSquares(board:Array<Array<SquareModel>>,i:number,j:number,dx:number,\n        dy:number, playerColor:PlayerColor){\n        let flag = true;\n        while(flag){\n            let dI:number = i+dy;\n            let dJ:number = j+dx;\n            flag = this.checkSquare(board,i,j,dx,dy,playerColor);\n            i = dI;\n            j = dJ;\n        }\n    }\n    protected checkSquare(board:Array<Array<SquareModel>>,i:number,j:number,dx:number,\n        dy:number, playerColor:PlayerColor){\n            let dI:number = i+dy;\n            let dJ:number = j+dx;\n            if(this.withinBoard(dI,dJ)){\n                const tempSquare:SquareModel = board[dI][dJ];\n                const tempPiece = tempSquare.getPiece()\n                if(tempPiece && tempPiece.getColor() !== playerColor){\n                    this.possibleMoves.add(tempSquare.getPos());\n                    return true;\n                }\n                else if(!tempSquare.getPiece()){\n                    this.possibleMoves.add(tempSquare.getPos());\n                    return true;\n                }\n                else{ return false }\n            }\n            else{ return false; }\n     }\n}"],"mappings":"AAAA,SAAiCA,UAAU,QAAQ,uBAAuB;AAI1E,OAAO,MAAeC,UAAU;EAOrBC,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IAAA,KAN7CD,IAAI;IAAA,KACJC,KAAK;IAAA,KACLC,aAAa;IAAA,KAChBC,QAAQ;IAAA,KACRC,SAAS;IAGZ,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,QAAQ,GAAI,kBAAiBF,KAAK,GAACD,IAAK,MAAK;IAClD,IAAI,CAACI,SAAS,GAAG,KAAK;IACtB,IAAI,CAACF,aAAa,GAAG,IAAIG,GAAG,CAAS,CAAC;EAC1C;EAGOC,OAAOA,CAAA,EAAa;IACvB,OAAO,IAAI,CAACN,IAAI;EACpB;EACOO,QAAQA,CAAA,EAAe;IAC1B,OAAO,IAAI,CAACN,KAAK;EACrB;EACOO,WAAWA,CAACC,CAAQ,EAAEC,CAAQ,EAAC;IAClC,OAAOD,CAAC,IAAE,CAAC,IACJA,CAAC,GAACZ,UAAU,IACZa,CAAC,IAAE,CAAC,IACJA,CAAC,GAACb,UAAU;EACvB;EACUc,YAAYA,CAACC,KAA+B,EAACH,CAAQ,EAACC,CAAQ,EAACG,EAAS,EAC9EC,EAAS,EAAEC,WAAuB,EAAC;IACnC,IAAIC,IAAI,GAAG,IAAI;IACf,OAAMA,IAAI,EAAC;MACP,IAAIC,EAAS,GAAGR,CAAC,GAACK,EAAE;MACpB,IAAII,EAAS,GAAGR,CAAC,GAACG,EAAE;MACpBG,IAAI,GAAG,IAAI,CAACG,WAAW,CAACP,KAAK,EAACH,CAAC,EAACC,CAAC,EAACG,EAAE,EAACC,EAAE,EAACC,WAAW,CAAC;MACpDN,CAAC,GAAGQ,EAAE;MACNP,CAAC,GAAGQ,EAAE;IACV;EACJ;EACUC,WAAWA,CAACP,KAA+B,EAACH,CAAQ,EAACC,CAAQ,EAACG,EAAS,EAC7EC,EAAS,EAAEC,WAAuB,EAAC;IAC/B,IAAIE,EAAS,GAAGR,CAAC,GAACK,EAAE;IACpB,IAAII,EAAS,GAAGR,CAAC,GAACG,EAAE;IACpB,IAAG,IAAI,CAACL,WAAW,CAACS,EAAE,EAACC,EAAE,CAAC,EAAC;MACvB,MAAME,UAAsB,GAAGR,KAAK,CAACK,EAAE,CAAC,CAACC,EAAE,CAAC;MAC5C,MAAMG,SAAS,GAAGD,UAAU,CAACE,QAAQ,CAAC,CAAC;MACvC,IAAGD,SAAS,IAAIA,SAAS,CAACd,QAAQ,CAAC,CAAC,KAAKQ,WAAW,EAAC;QACjD,IAAI,CAACb,aAAa,CAACqB,GAAG,CAACH,UAAU,CAACI,MAAM,CAAC,CAAC,CAAC;QAC3C,OAAO,IAAI;MACf,CAAC,MACI,IAAG,CAACJ,UAAU,CAACE,QAAQ,CAAC,CAAC,EAAC;QAC3B,IAAI,CAACpB,aAAa,CAACqB,GAAG,CAACH,UAAU,CAACI,MAAM,CAAC,CAAC,CAAC;QAC3C,OAAO,IAAI;MACf,CAAC,MACG;QAAE,OAAO,KAAK;MAAC;IACvB,CAAC,MACG;MAAE,OAAO,KAAK;IAAE;EAC3B;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}