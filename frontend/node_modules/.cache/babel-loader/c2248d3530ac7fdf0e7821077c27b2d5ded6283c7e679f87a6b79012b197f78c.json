{"ast":null,"code":"export function possiblePawnMoves(square, playerColor) {\n  //need to add way of calculating possible moves depending on playerColor\n  let pawn = square.getPiece();\n  let pos = square.getPos();\n  let col = pos.charAt(0);\n  let row = parseInt(pos.charAt(1));\n  let possibleMoves = new Set();\n  let lastRow = playerColor == \"White\" && row == 8;\n  console.log(col, row);\n  if (pawn && !pawn.beenMoved && !lastRow) {\n    possibleMoves.add(col + (row + 1));\n  } else if (pawn && pawn.beenMoved && row < 9) {\n    possibleMoves.add(col + (row + 1));\n    console.log(pawn && !pawn.beenMoved && row < 9);\n    if (row + 2 <= 8) {\n      possibleMoves.add(col + (row + 2));\n    }\n  }\n  return possibleMoves;\n}","map":{"version":3,"names":["possiblePawnMoves","square","playerColor","pawn","getPiece","pos","getPos","col","charAt","row","parseInt","possibleMoves","Set","lastRow","console","log","beenMoved","add"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/PossibleMoves.ts"],"sourcesContent":["import { SquareModel } from \"./SquareModel\";\n\nexport function possiblePawnMoves(square:SquareModel, playerColor:string){\n    //need to add way of calculating possible moves depending on playerColor\n    let pawn = square.getPiece();\n    let pos = square.getPos();\n    let col = pos.charAt(0);\n    let row = parseInt(pos.charAt(1));\n    let possibleMoves:Set<string> = new Set();\n    let lastRow = playerColor==\"White\" && row==8; \n    console.log(col,row);\n    if(pawn && !pawn.beenMoved && !lastRow){\n        possibleMoves.add(col+(row+1));\n    }\n    else if(pawn && pawn.beenMoved && (row < 9)){\n        possibleMoves.add(col+(row+1));\n        console.log(pawn && (!pawn.beenMoved) && (row < 9));\n        if(row+2 <= 8){\n            possibleMoves.add(col+(row+2));\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AAEA,OAAO,SAASA,iBAAiBA,CAACC,MAAkB,EAAEC,WAAkB,EAAC;EACrE;EACA,IAAIC,IAAI,GAAGF,MAAM,CAACG,QAAQ,CAAC,CAAC;EAC5B,IAAIC,GAAG,GAAGJ,MAAM,CAACK,MAAM,CAAC,CAAC;EACzB,IAAIC,GAAG,GAAGF,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;EACvB,IAAIC,GAAG,GAAGC,QAAQ,CAACL,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;EACjC,IAAIG,aAAyB,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzC,IAAIC,OAAO,GAAGX,WAAW,IAAE,OAAO,IAAIO,GAAG,IAAE,CAAC;EAC5CK,OAAO,CAACC,GAAG,CAACR,GAAG,EAACE,GAAG,CAAC;EACpB,IAAGN,IAAI,IAAI,CAACA,IAAI,CAACa,SAAS,IAAI,CAACH,OAAO,EAAC;IACnCF,aAAa,CAACM,GAAG,CAACV,GAAG,IAAEE,GAAG,GAAC,CAAC,CAAC,CAAC;EAClC,CAAC,MACI,IAAGN,IAAI,IAAIA,IAAI,CAACa,SAAS,IAAKP,GAAG,GAAG,CAAE,EAAC;IACxCE,aAAa,CAACM,GAAG,CAACV,GAAG,IAAEE,GAAG,GAAC,CAAC,CAAC,CAAC;IAC9BK,OAAO,CAACC,GAAG,CAACZ,IAAI,IAAK,CAACA,IAAI,CAACa,SAAU,IAAKP,GAAG,GAAG,CAAE,CAAC;IACnD,IAAGA,GAAG,GAAC,CAAC,IAAI,CAAC,EAAC;MACVE,aAAa,CAACM,GAAG,CAACV,GAAG,IAAEE,GAAG,GAAC,CAAC,CAAC,CAAC;IAClC;EACJ;EACA,OAAOE,aAAa;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}