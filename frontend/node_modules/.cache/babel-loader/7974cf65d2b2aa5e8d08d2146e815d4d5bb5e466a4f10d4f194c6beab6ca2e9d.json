{"ast":null,"code":"export class PieceModel {\n  constructor(type, color) {\n    this.type = void 0;\n    this.color = void 0;\n    this.possibleMoves = void 0;\n    this.imageURI = void 0;\n    this.beenMoved = void 0;\n    this.type = type;\n    this.color = color;\n    this.imageURI = `/assets/images/${color + type}.png`;\n    this.beenMoved = false;\n    this.possibleMoves = new Set();\n  }\n  getType() {\n    return this.type;\n  }\n  getColor() {\n    return this.color;\n  }\n  // public withinBoard(i:number, j:number){\n  //     return i>=0 &&\n  //            i<BOARD_SIZE &&\n  //            j>=0 &&\n  //            j<BOARD_SIZE;\n  // }\n  checkSquares(board, i, j, dx, dy, playerColor) {\n    let flag = true;\n    while (flag) {\n      flag = this.checkSquare(board, i, j, dx, dy, playerColor);\n      i = i + dy;\n      j = j + dx;\n    }\n  }\n  checkSquare(board, i, j, dx, dy, playerColor) {\n    let dI = i + dy;\n    let dJ = j + dx;\n    if (this.withinBoard(dI, dJ)) {\n      const tempSquare = board[dI][dJ];\n      const tempPiece = tempSquare.getPiece();\n      if (tempPiece && tempPiece.getColor() !== playerColor) {\n        this.possibleMoves.add(tempSquare.getPos());\n        return false;\n      } else if (!tempPiece) {\n        this.possibleMoves.add(tempSquare.getPos());\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["PieceModel","constructor","type","color","possibleMoves","imageURI","beenMoved","Set","getType","getColor","checkSquares","board","i","j","dx","dy","playerColor","flag","checkSquare","dI","dJ","withinBoard","tempSquare","tempPiece","getPiece","add","getPos"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/PieceModel.ts"],"sourcesContent":["import { PieceType, PlayerColor, BOARD_SIZE } from \"../../utils/Constants\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { SquareModel } from \"../SquareModel\";\n\nexport abstract class PieceModel{\n    protected type:PieceType;\n    protected color:PlayerColor;\n    protected possibleMoves:Set<string>\n    public imageURI:string;\n    public beenMoved:boolean;\n\n    public constructor(type: PieceType, color: PlayerColor){\n        this.type = type;\n        this.color = color;\n        this.imageURI = `/assets/images/${color+type}.png`;\n        this.beenMoved = false;\n        this.possibleMoves = new Set<string>();\n    }\n    public abstract validMove(boardModel:ChessBoardModel, startSquare:SquareModel, endSquare:SquareModel, playerColor:PlayerColor):boolean;\n\n    public getType(): PieceType{\n        return this.type;\n    }\n    public getColor(): PlayerColor{\n        return this.color;\n    }\n    // public withinBoard(i:number, j:number){\n    //     return i>=0 &&\n    //            i<BOARD_SIZE &&\n    //            j>=0 &&\n    //            j<BOARD_SIZE;\n    // }\n    protected checkSquares(board:Array<Array<SquareModel>>,i:number,j:number,dx:number,\n        dy:number, playerColor:PlayerColor){\n        let flag = true;\n        while(flag){\n            flag = this.checkSquare(board,i,j,dx,dy,playerColor);\n            i = i+dy;\n            j = j+dx;\n        }\n    }\n    protected checkSquare(board:Array<Array<SquareModel>>,i:number,j:number,dx:number,\n        dy:number, playerColor:PlayerColor){\n            let dI:number = i+dy;\n            let dJ:number = j+dx;\n            if(this.withinBoard(dI,dJ)){\n                const tempSquare:SquareModel = board[dI][dJ];\n                const tempPiece = tempSquare.getPiece()\n                if(tempPiece && tempPiece.getColor() !== playerColor){\n                    this.possibleMoves.add(tempSquare.getPos());\n                    return false;\n                }\n                else if(!tempPiece){\n                    this.possibleMoves.add(tempSquare.getPos());\n                    return true;\n                }\n                else{ return false }\n            }\n            else{ return false; }\n     }\n}"],"mappings":"AAIA,OAAO,MAAeA,UAAU;EAOrBC,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IAAA,KAN7CD,IAAI;IAAA,KACJC,KAAK;IAAA,KACLC,aAAa;IAAA,KAChBC,QAAQ;IAAA,KACRC,SAAS;IAGZ,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,QAAQ,GAAI,kBAAiBF,KAAK,GAACD,IAAK,MAAK;IAClD,IAAI,CAACI,SAAS,GAAG,KAAK;IACtB,IAAI,CAACF,aAAa,GAAG,IAAIG,GAAG,CAAS,CAAC;EAC1C;EAGOC,OAAOA,CAAA,EAAa;IACvB,OAAO,IAAI,CAACN,IAAI;EACpB;EACOO,QAAQA,CAAA,EAAe;IAC1B,OAAO,IAAI,CAACN,KAAK;EACrB;EACA;EACA;EACA;EACA;EACA;EACA;EACUO,YAAYA,CAACC,KAA+B,EAACC,CAAQ,EAACC,CAAQ,EAACC,EAAS,EAC9EC,EAAS,EAAEC,WAAuB,EAAC;IACnC,IAAIC,IAAI,GAAG,IAAI;IACf,OAAMA,IAAI,EAAC;MACPA,IAAI,GAAG,IAAI,CAACC,WAAW,CAACP,KAAK,EAACC,CAAC,EAACC,CAAC,EAACC,EAAE,EAACC,EAAE,EAACC,WAAW,CAAC;MACpDJ,CAAC,GAAGA,CAAC,GAACG,EAAE;MACRF,CAAC,GAAGA,CAAC,GAACC,EAAE;IACZ;EACJ;EACUI,WAAWA,CAACP,KAA+B,EAACC,CAAQ,EAACC,CAAQ,EAACC,EAAS,EAC7EC,EAAS,EAAEC,WAAuB,EAAC;IAC/B,IAAIG,EAAS,GAAGP,CAAC,GAACG,EAAE;IACpB,IAAIK,EAAS,GAAGP,CAAC,GAACC,EAAE;IACpB,IAAG,IAAI,CAACO,WAAW,CAACF,EAAE,EAACC,EAAE,CAAC,EAAC;MACvB,MAAME,UAAsB,GAAGX,KAAK,CAACQ,EAAE,CAAC,CAACC,EAAE,CAAC;MAC5C,MAAMG,SAAS,GAAGD,UAAU,CAACE,QAAQ,CAAC,CAAC;MACvC,IAAGD,SAAS,IAAIA,SAAS,CAACd,QAAQ,CAAC,CAAC,KAAKO,WAAW,EAAC;QACjD,IAAI,CAACZ,aAAa,CAACqB,GAAG,CAACH,UAAU,CAACI,MAAM,CAAC,CAAC,CAAC;QAC3C,OAAO,KAAK;MAChB,CAAC,MACI,IAAG,CAACH,SAAS,EAAC;QACf,IAAI,CAACnB,aAAa,CAACqB,GAAG,CAACH,UAAU,CAACI,MAAM,CAAC,CAAC,CAAC;QAC3C,OAAO,IAAI;MACf,CAAC,MACG;QAAE,OAAO,KAAK;MAAC;IACvB,CAAC,MACG;MAAE,OAAO,KAAK;IAAE;EAC3B;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}