{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE } from \"../Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.posMap = new Map();\n    this.playerColor = playerColor;\n    let col = playerColor == \"White\" ? ROW_VALUES : [...ROW_VALUES].reverse();\n    let row = playerColor == \"White\" ? [...COL_VALUES].reverse() : COL_VALUES;\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let pos = col[j] + row[i];\n        this.posMap.set(pos, {\n          i: i,\n          j: j\n        });\n        let color = (j + i + 2) % 2 == 0 ? PlayerColor.WHITE : PlayerColor.BLACK;\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n  }\n  getChessBoard() {\n    return this.chessBoard;\n  }\n  getPosMap() {\n    return this.posMap;\n  }\n  pieceMove(fromSquare, toSquare) {\n    if (fromSquare && toSquare) {\n      let fromSquarePos = fromSquare.getPos();\n      let toSquarePos = toSquare.getPos();\n      let pieceOnFromSquare = fromSquare.getPiece();\n      let pieceOnToSquare = toSquare.getPiece();\n      if (pieceOnFromSquare) {\n        fromSquare.setPiece(undefined);\n        toSquare.setPiece(pieceOnFromSquare);\n      }\n      // else if(pieceOnFromSquare && !pieceOnToSquare){\n      //     //fromSquare.setPiece(undefined);\n      //     toSquare.setPiece(pieceOnFromSquare);\n      // }\n    }\n  }\n\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PieceModel(PieceType.PAWN, \"White\");\n    } else if (row == 7) {\n      return new PieceModel(PieceType.PAWN, \"Black\");\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new PieceModel(PieceType.ROOK, \"White\");\n      } else if (col == 'b' || col == 'g') {\n        return new PieceModel(PieceType.KNIGHT, \"White\");\n      } else if (col == 'c' || col == 'f') {\n        return new PieceModel(PieceType.BISHOP, \"White\");\n      } else if (col == 'd') {\n        return new PieceModel(PieceType.QUEEN, \"White\");\n      } else {\n        return new PieceModel(PieceType.KING, \"White\");\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new PieceModel(PieceType.ROOK, \"Black\");\n      } else if (col == 'b' || col == 'g') {\n        return new PieceModel(PieceType.KNIGHT, \"Black\");\n      } else if (col == 'c' || col == 'f') {\n        return new PieceModel(PieceType.BISHOP, \"Black\");\n      } else if (col == 'd') {\n        return new PieceModel(PieceType.QUEEN, \"Black\");\n      } else {\n        return new PieceModel(PieceType.KING, \"Black\");\n      }\n    } else {\n      return undefined;\n    }\n  }\n  clone() {\n    const clone = new ChessBoardModel(this.playerColor);\n    clone.chessBoard = this.chessBoard.map(row => row.map(square => {\n      const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n      const piece = square.getPiece();\n      if (piece) {\n        const clonedPiece = new PieceModel(piece.getType(), piece.getColor());\n        clonedSquare.setPiece(clonedPiece);\n      }\n      return clonedSquare;\n    }));\n    clone.posMap = new Map(this.posMap);\n    console.log(clone);\n    return clone;\n  }\n}","map":{"version":3,"names":["PieceModel","SquareModel","ROW_VALUES","COL_VALUES","PlayerColor","PieceType","BOARD_SIZE","ChessBoardModel","constructor","playerColor","chessBoard","posMap","Map","col","reverse","row","i","j","pos","set","color","WHITE","BLACK","piece","genPiece","push","getChessBoard","getPosMap","pieceMove","fromSquare","toSquare","fromSquarePos","getPos","toSquarePos","pieceOnFromSquare","getPiece","pieceOnToSquare","setPiece","undefined","PAWN","ROOK","KNIGHT","BISHOP","QUEEN","KING","clone","map","square","clonedSquare","getColor","clonedPiece","getType","console","log"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE} from \"../Constants\";\n\nexport class ChessBoardModel{\n    public chessBoard: Array<Array<SquareModel>>;\n    private playerColor:string;\n    private posMap:Map<string,{i:number,j:number}> = new Map();\n\n    public constructor(playerColor:string){\n        this.playerColor = playerColor;\n        let col = playerColor ==\"White\"?\n        ROW_VALUES:[...ROW_VALUES].reverse();\n\n        let row = playerColor == \"White\"?\n        [...COL_VALUES].reverse():COL_VALUES;\n       \n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i< BOARD_SIZE; i++){\n            for(let j = 0; j< BOARD_SIZE; j++){\n\n                let pos:string = col[j]+row[i];\n                this.posMap.set(pos,{i:i, j:j});\n                let color = (j+i+2) % 2 == 0? PlayerColor.WHITE:PlayerColor.BLACK\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n    }\n\n    public getChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    public getPosMap():Map<string,{i:number,j:number}>{\n        return this.posMap;\n    }\n    public pieceMove(fromSquare:SquareModel, toSquare:SquareModel){\n        if(fromSquare && toSquare){\n            let fromSquarePos:string = fromSquare.getPos();\n            let toSquarePos:string = toSquare.getPos();\n            let pieceOnFromSquare: PieceModel | undefined = fromSquare.getPiece();\n            let pieceOnToSquare: PieceModel | undefined = toSquare.getPiece();\n\n            if(pieceOnFromSquare){\n                fromSquare.setPiece(undefined);\n                toSquare.setPiece(pieceOnFromSquare);\n            }\n            // else if(pieceOnFromSquare && !pieceOnToSquare){\n            //     //fromSquare.setPiece(undefined);\n            //     toSquare.setPiece(pieceOnFromSquare);\n            // }\n\n        }\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PieceModel(PieceType.PAWN,\"White\");\n        }\n        else if(row == 7){\n            return new PieceModel(PieceType.PAWN,\"Black\");\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new PieceModel(PieceType.ROOK,\"White\");\n            }\n            else if(col== 'b' || col == 'g'){\n                return new PieceModel(PieceType.KNIGHT, \"White\");\n            }\n            else if(col== 'c' || col == 'f'){\n                return new PieceModel(PieceType.BISHOP, \"White\");\n            }\n            else if(col == 'd'){\n                return new PieceModel(PieceType.QUEEN, \"White\");\n            }\n            else{\n                return new PieceModel(PieceType.KING, \"White\");\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new PieceModel(PieceType.ROOK,\"Black\");\n            }\n            else if(col== 'b' || col == 'g'){\n                return new PieceModel(PieceType.KNIGHT, \"Black\");\n            }\n            else if(col== 'c' || col == 'f'){\n                return new PieceModel(PieceType.BISHOP, \"Black\");\n            }\n            else if(col == 'd'){\n                return new PieceModel(PieceType.QUEEN, \"Black\");\n            }\n            else{\n                return new PieceModel(PieceType.KING, \"Black\");\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n\n    public clone():ChessBoardModel{\n        const clone = new ChessBoardModel(this.playerColor);\n\n        clone.chessBoard = this.chessBoard.map((row) =>\n            row.map((square) => {\n            const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n            const piece = square.getPiece();\n            if (piece) {\n                const clonedPiece = new PieceModel(piece.getType(), piece.getColor());\n                clonedSquare.setPiece(clonedPiece);\n            }\n            return clonedSquare;\n            })\n        );\n\n        clone.posMap = new Map(this.posMap);\n            console.log(clone);\n        return clone;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}