{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../Constants';\nimport React from 'react';\nimport { findModelSquareFromView } from '../../../../utils/View-ModelLocater';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(props) {\n  _s();\n  const playerColor = props.playerColor;\n  const chessBoard = new ChessBoardModel(playerColor);\n  const boardViewRef = useRef(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [boardModel, setBoardModel] = useState(chessBoard);\n  const [boardView, setBoardView] = useState([[], [], [], [], [], [], [], []]);\n  useEffect(() => {\n    makeChessBoard();\n  }, [boardModel]);\n  function makeChessBoard() {\n    const boardViewTemp = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        boardViewTemp[i].push( /*#__PURE__*/_jsxDEV(Square, {\n          squareModel: boardModel.getChessBoard()[i][j]\n        }, i + \"\" + j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    setBoardView(boardViewTemp);\n  }\n  function handleClick(event) {\n    if (activePiece) {\n      movePiece(event);\n    } else {\n      selectPiece(event);\n    }\n  }\n  function selectPiece(event) {\n    const element = event.target;\n    const currentBoard = boardViewRef.current;\n    if (element.classList.contains(\"piece\") && currentBoard && !activePiece) {\n      setActivePiece(element);\n    }\n  }\n  function movePiece(event) {\n    const element = event.target;\n    if (activePiece && boardViewRef.current) {\n      //need to update model\n      let startSquare = activePiece.parentElement;\n      let endSquare = element;\n      let activePieceColor = activePiece.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n      if (endSquare.classList.contains(\"piece\")) {\n        let endPieceColor = endSquare.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n        if (endPieceColor == activePieceColor) {\n          setActivePiece(endSquare);\n          return;\n        }\n        endSquare = endSquare.parentElement;\n      }\n      if (startSquare && endSquare) {\n        if (endSquare.children.length > 0) {\n          endSquare.innerHTML = '';\n          //endSquare.removeChild(endSquare.children[0]);\n        }\n\n        if (startSquare.children.length > 0) {\n          startSquare.removeChild(activePiece);\n        }\n        const updatedBoardModel = structuredClone(boardModel);\n        let start = findModelSquareFromView(startSquare, updatedBoardModel);\n        let end = findModelSquareFromView(endSquare, updatedBoardModel);\n        console.log(start, end);\n        //updatedBoardModel.pieceMove(updatedBoardModel[start.charAt],end);\n        // setBoardModel(updatedBoardModel);\n        // setBoardView(boardView);\n        endSquare.appendChild(activePiece);\n      }\n      setActivePiece(null);\n    }\n  }\n  // function grabPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     const currentBoard = boardViewRef.current;\n  //     setGrabPiecePos(element.parentElement?.id+\"\");\n  //     console.log(element.parentElement?.id);\n  //     if(element.classList.contains(\"piece\") && currentBoard){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n  //         element.style.position = \"absolute\";\n  //         element.style.left = `${x}px`;\n  //         element.style.top = `${y}px`;\n  //         setActivePiece(element);\n  //     }\n  // }\n\n  // function movePiece(event: React.MouseEvent){\n  //     if(activePiece && boardViewRef.current){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n  //         const minX = boardViewRef.current.offsetLeft;\n  //         const minY = boardViewRef.current.offsetTop;\n  //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n  //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n  //         if (x < minX) {\n  //             activePiece.style.left = `${minX}px`;\n  //         }\n  //         else if (x > maxX) {\n  //             activePiece.style.left = `${maxX}px`;\n  //         }\n  //         else {\n  //             activePiece.style.left = `${x}px`;\n  //         }\n\n  //         if (y < minY) {\n  //             activePiece.style.top = `${minY}px`;\n  //         }\n  //         else if (y > maxY) {\n  //             activePiece.style.top = `${maxY}px`;\n  //         }\n  //         else {\n  //             activePiece.style.top = `${y}px`;\n  //         }\n  //     }\n  // }\n\n  // function dropPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     console.log(event);\n  //     if(activePiece && boardViewRef.current){\n  //         setActivePiece(null);\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    onClick: event => handleClick(event),\n    ref: boardViewRef,\n    children: boardView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n}\n_s(Chessboard, \"YMLJKHwzIHECotBJlmUSV9KKheE=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Square","ChessBoardModel","useEffect","useRef","useState","BOARD_SIZE","PlayerColor","React","findModelSquareFromView","jsxDEV","_jsxDEV","Chessboard","props","_s","playerColor","chessBoard","boardViewRef","activePiece","setActivePiece","boardModel","setBoardModel","boardView","setBoardView","makeChessBoard","boardViewTemp","i","j","push","squareModel","getChessBoard","fileName","_jsxFileName","lineNumber","columnNumber","handleClick","event","movePiece","selectPiece","element","target","currentBoard","current","classList","contains","startSquare","parentElement","endSquare","activePieceColor","id","includes","WHITE","BLACK","endPieceColor","children","length","innerHTML","removeChild","updatedBoardModel","structuredClone","start","end","console","log","appendChild","onClick","ref","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PlayerColor } from '../../../../Constants';\nimport React from 'react';\nimport { possiblePawnMoves } from '../../../../model/PossibleMoves';\nimport { findModelSquareFromView } from '../../../../utils/View-ModelLocater';\nimport { SquareModel } from '../../../../model/SquareModel';\n\nexport default function Chessboard(props:{playerColor:string}){\n    const playerColor = props.playerColor;\n    const chessBoard:ChessBoardModel = new ChessBoardModel(playerColor);\n    const boardViewRef = useRef<HTMLDivElement>(null);\n    const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n    const [boardModel,setBoardModel] = useState(chessBoard);\n    const [boardView, setBoardView] = useState([[],[],[],[],[],[],[],[]]);\n        \n    useEffect(()=>{\n        makeChessBoard();\n    },[boardModel]);\n\n    function makeChessBoard(){\n        const boardViewTemp:any = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i<BOARD_SIZE; i++){\n            for(let j = 0; j<BOARD_SIZE; j++){\n                boardViewTemp[i].push(\n                    <Square key={i+\"\"+j} squareModel={boardModel.getChessBoard()[i][j]}></Square>\n                );\n            }\n        }\n        setBoardView(boardViewTemp);\n    }\n    function handleClick(event: React.MouseEvent){\n        if(activePiece){\n            movePiece(event);\n        }\n        else{\n            selectPiece(event);\n        }\n    }\n    function selectPiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        const currentBoard = boardViewRef.current;\n        if(element.classList.contains(\"piece\") && currentBoard && !activePiece){\n            setActivePiece(element); \n        }       \n    }\n      \n    function movePiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        if(activePiece && boardViewRef.current){\n            //need to update model\n            let startSquare = activePiece.parentElement;\n            let endSquare: HTMLElement | null = element;\n            let activePieceColor:string = activePiece.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n            if(endSquare.classList.contains(\"piece\")){\n                let endPieceColor = endSquare.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n                if(endPieceColor == activePieceColor){\n                    setActivePiece(endSquare);\n                    return;\n                }\n                endSquare = endSquare.parentElement;\n            }\n\n\n            if(startSquare && endSquare){\n                if(endSquare.children.length > 0){\n                    endSquare.innerHTML = '';\n                    //endSquare.removeChild(endSquare.children[0]);\n                }\n                if(startSquare.children.length > 0){\n                    startSquare.removeChild(activePiece);\n\n                }\n                const updatedBoardModel = structuredClone(boardModel);\n                let start = findModelSquareFromView(startSquare,updatedBoardModel);\n                let end = findModelSquareFromView(endSquare, updatedBoardModel);\n                console.log(start,end);\n                //updatedBoardModel.pieceMove(updatedBoardModel[start.charAt],end);\n                // setBoardModel(updatedBoardModel);\n                // setBoardView(boardView);\n                endSquare.appendChild(activePiece);\n            }\n            setActivePiece(null);\n        }\n    }\n    // function grabPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     const currentBoard = boardViewRef.current;\n    //     setGrabPiecePos(element.parentElement?.id+\"\");\n    //     console.log(element.parentElement?.id);\n    //     if(element.classList.contains(\"piece\") && currentBoard){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n    //         element.style.position = \"absolute\";\n    //         element.style.left = `${x}px`;\n    //         element.style.top = `${y}px`;\n    //         setActivePiece(element);\n    //     }\n    // }\n    \n    // function movePiece(event: React.MouseEvent){\n    //     if(activePiece && boardViewRef.current){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n    //         const minX = boardViewRef.current.offsetLeft;\n    //         const minY = boardViewRef.current.offsetTop;\n    //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n    //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n    //         if (x < minX) {\n    //             activePiece.style.left = `${minX}px`;\n    //         }\n    //         else if (x > maxX) {\n    //             activePiece.style.left = `${maxX}px`;\n    //         }\n    //         else {\n    //             activePiece.style.left = `${x}px`;\n    //         }\n    \n    //         if (y < minY) {\n    //             activePiece.style.top = `${minY}px`;\n    //         }\n    //         else if (y > maxY) {\n    //             activePiece.style.top = `${maxY}px`;\n    //         }\n    //         else {\n    //             activePiece.style.top = `${y}px`;\n    //         }\n    //     }\n    // }\n    \n    // function dropPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     console.log(event);\n    //     if(activePiece && boardViewRef.current){\n    //         setActivePiece(null);\n    //     }\n    // }\n    return(\n        <div id = \"chessboard\"\n        onClick={event=>handleClick(event)}\n        ref={boardViewRef}>\n            {boardView}\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}