{"ast":null,"code":"import { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE } from \"../utils/Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.posMap = new Map();\n    this.moveList = void 0;\n    this.playerColor = playerColor;\n    this.moveList = [];\n    let col =\n    //playerColor ==\"White\"?\n    ROW_VALUES; //:[...ROW_VALUES].reverse();\n\n    let row =\n    //playerColor == \"White\"?\n    [...COL_VALUES].reverse(); //:COL_VALUES;\n\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let pos = col[j] + row[i];\n        this.posMap.set(pos, {\n          i: i,\n          j: j\n        });\n        let color = (j + i + 2) % 2 == 0 ? PlayerColor.WHITE : PlayerColor.BLACK;\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n  }\n  getChessBoard() {\n    return this.chessBoard;\n  }\n  getMoveList() {\n    return this.moveList;\n  }\n  getPosMap() {\n    return this.posMap;\n  }\n  pieceMove(fromSquare, toSquare) {\n    if (fromSquare && toSquare) {\n      let pieceOnFromSquare = fromSquare.getPiece();\n      if (pieceOnFromSquare) {\n        pieceOnFromSquare.beenMoved = true;\n        fromSquare.setPiece(undefined);\n        toSquare.setPiece(pieceOnFromSquare);\n        console.log(this.isKingInCheck(pieceOnFromSquare));\n      }\n    }\n  }\n  validMove(startSquare, endSquare, playerColor) {\n    const pieceMove = startSquare.getPiece();\n    if (pieceMove && pieceMove.validMove(this, startSquare, endSquare, playerColor)) {\n      return true;\n    }\n    return false;\n  }\n  isKingInCheck(king) {\n    let kingPos;\n    const playerColor = king.getColor();\n    const opponentColor = playerColor === PlayerColor.WHITE ? PlayerColor.BLACK : PlayerColor.WHITE;\n    this.chessBoard.forEach(row => {\n      row.forEach(square => {\n        const piece = square.getPiece();\n        if ((piece === null || piece === void 0 ? void 0 : piece.getType()) === PieceType.KING && piece.getColor() === playerColor) {\n          kingPos = square.getPos();\n        }\n      });\n    });\n    if (kingPos) {\n      let kingSquare = this.getSquareByPos(kingPos);\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        for (let j = 0; j < BOARD_SIZE; j++) {\n          const square = this.chessBoard[i][j];\n          const piece = square.getPiece();\n          if (piece && piece.getColor() !== playerColor && kingSquare && this.validMove(square, kingSquare, opponentColor)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  posToArrayPos(pos) {\n    return this.posMap.get(pos);\n  }\n  getSquareByPos(pos) {\n    let arrayPos = this.posMap.get(pos);\n    if (!arrayPos) return null;\n    let iPos = arrayPos.i;\n    let jPos = arrayPos.j;\n    if (!iPos || !jPos) return null;\n    return this.chessBoard[iPos][jPos];\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.WHITE);\n    } else if (row == 7) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.BLACK);\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.WHITE);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.WHITE);\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.BLACK);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.BLACK);\n      }\n    } else {\n      return undefined;\n    }\n  }\n  clone() {\n    const clone = new ChessBoardModel(this.playerColor);\n    clone.chessBoard = this.chessBoard.map(row => row.map(square => {\n      const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n      const piece = square.getPiece();\n      if (piece) {\n        const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece);\n        clonedSquare.setPiece(clonedPiece);\n      }\n      return clonedSquare;\n    }));\n    clone.posMap = new Map(this.posMap);\n    return clone;\n  }\n}","map":{"version":3,"names":["PawnModel","RookModel","KnightModel","BishopModel","QueenModel","KingModel","SquareModel","ROW_VALUES","COL_VALUES","PlayerColor","PieceType","BOARD_SIZE","ChessBoardModel","constructor","playerColor","chessBoard","posMap","Map","moveList","col","row","reverse","i","j","pos","set","color","WHITE","BLACK","piece","genPiece","push","getChessBoard","getMoveList","getPosMap","pieceMove","fromSquare","toSquare","pieceOnFromSquare","getPiece","beenMoved","setPiece","undefined","console","log","isKingInCheck","validMove","startSquare","endSquare","king","kingPos","getColor","opponentColor","forEach","square","getType","KING","getPos","kingSquare","getSquareByPos","posToArrayPos","get","arrayPos","iPos","jPos","PAWN","ROOK","KNIGHT","BISHOP","QUEEN","clone","map","clonedSquare","clonedPiece","Object","assign","create","getPrototypeOf"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./pieces/PieceModel\";\nimport { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE} from \"../utils/Constants\";\n\nexport class ChessBoardModel{\n    private chessBoard: Array<Array<SquareModel>>;\n    private playerColor:PlayerColor;\n    private posMap:Map<string,{i:number,j:number}> = new Map();\n    private moveList:Array<{fromSquare:string, toSquare:string}>;\n\n    public constructor(playerColor:PlayerColor){\n        this.playerColor = playerColor;\n        this.moveList = [];\n        let col = //playerColor ==\"White\"?\n        ROW_VALUES;//:[...ROW_VALUES].reverse();\n\n        let row = //playerColor == \"White\"?\n        [...COL_VALUES].reverse();//:COL_VALUES;\n       \n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i< BOARD_SIZE; i++){\n            for(let j = 0; j< BOARD_SIZE; j++){\n\n                let pos:string = col[j]+row[i];\n                this.posMap.set(pos,{i:i, j:j});\n                let color = (j+i+2) % 2 == 0? PlayerColor.WHITE:PlayerColor.BLACK\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n    }\n\n    public getChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    public getMoveList(){\n        return this.moveList;\n    }\n    public getPosMap():Map<string,{i:number,j:number}>{\n        return this.posMap;\n    }\n    public pieceMove(fromSquare:SquareModel, toSquare:SquareModel){\n        if(fromSquare && toSquare){\n            let pieceOnFromSquare: PieceModel | undefined = fromSquare.getPiece();\n            if(pieceOnFromSquare){\n                pieceOnFromSquare.beenMoved = true;\n                fromSquare.setPiece(undefined);\n                toSquare.setPiece(pieceOnFromSquare);\n               console.log( this.isKingInCheck(pieceOnFromSquare));\n            }\n        }\n    }\n    public validMove(startSquare:SquareModel, endSquare:SquareModel, playerColor:PlayerColor){\n        const pieceMove = startSquare.getPiece();\n        if(pieceMove &&\n           pieceMove.validMove(this,startSquare,endSquare,playerColor)){\n           return true;\n        }\n        return false;\n    }\n\n    public isKingInCheck(king: PieceModel): boolean {\n        let kingPos: string | undefined;\n        const playerColor = king.getColor();\n        const opponentColor = playerColor === PlayerColor.WHITE ? PlayerColor.BLACK : PlayerColor.WHITE;\n\n        this.chessBoard.forEach((row) => {\n          row.forEach((square) => {\n            const piece = square.getPiece();\n            if (piece?.getType() === PieceType.KING && piece.getColor() === playerColor) {\n              kingPos = square.getPos();\n            }\n          });\n        });\n\n        if (kingPos) {\n            let kingSquare = this.getSquareByPos(kingPos);\n\n            for (let i = 0; i < BOARD_SIZE; i++) {\n                for (let j = 0; j < BOARD_SIZE; j++) {\n                    const square = this.chessBoard[i][j];\n                    const piece = square.getPiece();\n                    \n                    if (piece && piece.getColor() !== playerColor && kingSquare &&\n                        this.validMove(square, kingSquare, opponentColor)) {\n                        return true;\n                    }\n                }\n            }\n        }\n      \n        return false;\n    }\n\n    public posToArrayPos(pos: string){\n        return this.posMap.get(pos);\n    }\n\n    public getSquareByPos(pos: string){\n        let arrayPos = this.posMap.get(pos);\n        if(!arrayPos) return null;\n\n        let iPos = arrayPos.i;\n        let jPos = arrayPos.j;\n\n        if(!iPos || !jPos) return null;\n\n        return this.chessBoard[iPos][jPos];\n    }\n\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PawnModel(PieceType.PAWN,PlayerColor.WHITE);\n        }\n        else if(row == 7){\n            return new PawnModel(PieceType.PAWN,PlayerColor.BLACK);\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.WHITE);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.WHITE);\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.BLACK);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.BLACK);\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n\n    public clone():ChessBoardModel{\n        const clone = new ChessBoardModel(this.playerColor);\n\n        clone.chessBoard = this.chessBoard.map((row) =>\n            row.map((square) => {\n            const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n            const piece = square.getPiece();\n            if (piece) {\n                const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece)\n                clonedSquare.setPiece(clonedPiece);\n            }\n            return clonedSquare;\n            })\n        );\n\n        clone.posMap = new Map(this.posMap);\n        return clone;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}