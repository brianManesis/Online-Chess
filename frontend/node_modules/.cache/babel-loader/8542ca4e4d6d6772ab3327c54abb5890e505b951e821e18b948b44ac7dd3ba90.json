{"ast":null,"code":"import { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE } from \"../utils/Constants\";\nexport class ChessBoardModel {\n  constructor(playerColor) {\n    this.chessBoard = void 0;\n    this.playerColor = void 0;\n    this.posMap = new Map();\n    this.moveList = void 0;\n    this.playerColor = playerColor;\n    this.moveList = [];\n    let col = ROW_VALUES;\n    let row = [...COL_VALUES].reverse();\n    this.chessBoard = [[], [], [], [], [], [], [], []];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let pos = col[j] + row[i];\n        this.posMap.set(pos, {\n          i: i,\n          j: j\n        });\n        let color = (j + i + 2) % 2 == 0 ? PlayerColor.WHITE : PlayerColor.BLACK;\n        let piece = this.genPiece(col[j], row[i]);\n        if (piece) {\n          this.chessBoard[i].push(new SquareModel(color, pos, piece));\n        } else {\n          this.chessBoard[i].push(new SquareModel(color, pos));\n        }\n      }\n    }\n  }\n  getChessBoard() {\n    return this.chessBoard;\n  }\n  getMoveList() {\n    return this.moveList;\n  }\n  getPosMap() {\n    return this.posMap;\n  }\n  move(fromSquare, toSquare) {\n    if (fromSquare && toSquare) {\n      let pieceOnFromSquare = fromSquare.getPiece();\n      if (!pieceOnFromSquare) return;\n      let pieceColor = pieceOnFromSquare.getColor();\n      if (this.castleMove(fromSquare, toSquare)) return;\n      if (this.queeningMove(fromSquare, toSquare)) return;\n      if (!this.validMove(fromSquare, toSquare, pieceColor)) return;\n      pieceOnFromSquare.beenMoved = true;\n      fromSquare.setPiece(undefined);\n      toSquare.setPiece(pieceOnFromSquare);\n      this.moveList.push({\n        fromSquare: fromSquare.getPos(),\n        toSquare: toSquare.getPos()\n      });\n    }\n  }\n  validMove(startSquare, endSquare, playerColor) {\n    const pieceMove = startSquare.getPiece();\n    if (pieceMove && pieceMove.validMove(this, startSquare, endSquare, playerColor)) {\n      return true;\n    }\n    return false;\n  }\n  castleMove(startSquare, endSquare) {\n    const king = startSquare.getPiece();\n    let rookSquare = null;\n    let newRookSquare = null;\n    const endSquarePos = endSquare.getPos();\n    console.log(endSquarePos);\n    if (!king || king.getType() !== PieceType.KING) return false;\n    if (king.beenMoved) return false;\n    if (endSquarePos !== \"c1\" && endSquarePos !== \"g1\" && endSquarePos !== \"c8\" && endSquarePos !== \"g8\") return false;\n    const kingColor = king.getColor();\n    const row = kingColor === PlayerColor.WHITE ? 7 : 0;\n    if (endSquarePos.charAt(0) === \"g\") {\n      rookSquare = this.chessBoard[row][7];\n      if (this.chessBoard[row][6].getPiece() || this.chessBoard[row][5].getPiece()) return false;\n      newRookSquare = this.chessBoard[row][5];\n    } else {\n      rookSquare = this.chessBoard[row][0];\n      if (this.chessBoard[row][3].getPiece() || this.chessBoard[row][2].getPiece() || this.chessBoard[row][1].getPiece()) return false;\n      newRookSquare = this.chessBoard[row][3];\n    }\n    const rook = rookSquare.getPiece();\n    if (!rook || rook.getType() !== PieceType.ROOK) return false;\n    if (rook.beenMoved) return false;\n    rookSquare.setPiece(undefined);\n    startSquare.setPiece(undefined);\n    newRookSquare.setPiece(rook);\n    endSquare.setPiece(king);\n    king.beenMoved = true;\n    rook.beenMoved = true;\n    this.moveList.push({\n      fromSquare: startSquare.getPos(),\n      toSquare: endSquare.getPos()\n    });\n    return true;\n  }\n  queeningMove(startSquare, endSquare) {\n    const pawn = startSquare.getPiece();\n    const endSquarePos = this.posToArrayPos(endSquare.getPos());\n    if (!pawn || pawn.getType() !== PieceType.PAWN) return false;\n    if (!endSquarePos) return false;\n    const pawnColor = pawn.getColor();\n    let endRow = pawnColor === PlayerColor.WHITE ? 0 : 7;\n    let endSquareRow = endSquarePos.i;\n    if (pawnColor === PlayerColor.WHITE && endSquareRow !== endRow) return false;else if (pawnColor === PlayerColor.BLACK && endSquareRow !== endRow) return false;\n    startSquare.setPiece(undefined);\n    endSquare.setPiece(new QueenModel(PieceType.QUEEN, pawnColor));\n    this.moveList.push({\n      fromSquare: startSquare.getPos(),\n      toSquare: endSquare.getPos()\n    });\n    return true;\n  }\n  enPassant(startSquare, endSquare) {\n    const board = this.chessBoard;\n    const pawn = startSquare.getPiece();\n    const startSquarePos = this.posToArrayPos(startSquare.getPos());\n    const lastMove = this.getMoveList().slice(-1)[0];\n    const pieceLastMovedNewPos = this.posToArrayPos(lastMove.toSquare);\n    const pieceLastMovedOldPos = this.posToArrayPos(lastMove.fromSquare);\n    if (!pawn || pawn.getType() !== PieceType.PAWN) return false;\n    if (!startSquarePos) return false;\n    if (!pieceLastMovedNewPos || !pieceLastMovedOldPos) return false;\n    let direction = PawnModel.pawnDirections(pawn.getColor());\n    const pieceLastMoved = board[pieceLastMovedNewPos.i][pieceLastMovedNewPos.j];\n    let pieceLeft;\n    let pieceRight;\n    if (ChessBoardModel.withinBoard(startSquarePos.i, startSquarePos.j - 1)) {\n      pieceLeft = board[startSquarePos.i][startSquarePos.j - 1];\n    }\n    if (ChessBoardModel.withinBoard(startSquarePos.i, startSquarePos.j - 1)) {\n      pieceRight = board[startSquarePos.i][startSquarePos.j + 1];\n    }\n    let pieceLeftTakes = board[startSquarePos.i + direction.takes.left.dx][startSquarePos.j + direction.takes.left.dy];\n    let pieceRightTakes = board[startSquarePos.i + direction.takes.right.dx][startSquarePos.j + direction.takes.right.dy];\n    let pieceLastMovedDx = Math.abs(pieceLastMovedNewPos.j - pieceLastMovedOldPos.j);\n    let pieceLastMovedDy = Math.abs(pieceLastMovedNewPos.i - pieceLastMovedOldPos.i);\n    if (pieceLastMoved == pieceLeft && pieceLastMovedDx === 0 && pieceLastMovedDy === 2 && endSquare === pieceLeftTakes) {\n      startSquare.setPiece(undefined);\n      pieceLeftTakes.setPiece(pawn);\n    }\n    if (pieceLastMoved == pieceRight && pieceLastMovedDx === 0 && pieceLastMovedDy === 2 && endSquare === pieceRightTakes) {\n      startSquare.setPiece(undefined);\n      pieceRightTakes.setPiece(pawn);\n    }\n  }\n  isKingInCheck(kingColor) {\n    const kingLocation = this.searchBoardForPiece(PieceType.KING, kingColor);\n    const kingPos = kingLocation.pos;\n    if (!kingPos) return false;\n    const king = kingLocation.piece;\n    if (!king) return false;\n    return king.kingInCheck(this, kingPos);\n  }\n  searchBoardForPiece(pieceType, pieceColor) {\n    for (let row of this.chessBoard) {\n      for (let square of row) {\n        const piece = square.getPiece();\n        if (piece && piece.getType() === pieceType && piece.getColor() === pieceColor) return {\n          pos: square.getPos(),\n          piece: piece\n        };\n      }\n    }\n    return {\n      pos: undefined,\n      piece: undefined\n    };\n  }\n  searchBoardFromPos(ignorePiece, startPos, directions, pieceType, callback) {\n    const board = this.getChessBoard();\n    const posArray = this.posToArrayPos(startPos);\n    if (!posArray) return false;\n    for (const [key, value] of Object.entries(directions)) {\n      let i = posArray.i;\n      let j = posArray.j;\n      let result = callback(board, ignorePiece, i, j, value, pieceType);\n      if (result) return true;\n    }\n    return false;\n  }\n  findPiece(board, ignorePiece, i, j, direction, pieceType) {\n    i += direction.dy;\n    j += direction.dx;\n    if (ChessBoardModel.withinBoard(i, j)) {\n      const currentPiece = board[i][j].getPiece();\n      if (currentPiece && currentPiece.getColor() !== ignorePiece.getColor()) {\n        if (currentPiece.getType() == pieceType) {\n          return true;\n        } else {\n          return false;\n        }\n      } else if (currentPiece && currentPiece.getColor() === ignorePiece.getColor() && currentPiece !== ignorePiece) {\n        return false;\n      }\n    }\n    return false;\n  }\n  findPieceInDirection(board, ignorePiece, i, j, direction, pieceType) {\n    let flag = true;\n    while (flag) {\n      i += direction.dy;\n      j += direction.dx;\n      if (ChessBoardModel.withinBoard(i, j)) {\n        const currentPiece = board[i][j].getPiece();\n        if (currentPiece && currentPiece.getColor() !== ignorePiece.getColor()) {\n          if (currentPiece.getType() == pieceType) {\n            return true;\n          } else {\n            flag = false;\n          }\n        } else if (currentPiece && currentPiece.getColor() === ignorePiece.getColor() && currentPiece !== ignorePiece) {\n          flag = false;\n        }\n      } else flag = false;\n    }\n    return false;\n  }\n  findPawnAttack(ignorePiece, kingPos) {\n    let pawnDirection = PawnModel.pawnDirections(ignorePiece.getColor());\n    const posArray = this.posToArrayPos(kingPos);\n    if (!posArray) return false;\n    let leftTakes = pawnDirection.takes.left;\n    let rightTakes = pawnDirection.takes.right;\n    return this.findPiece(this.chessBoard, ignorePiece, posArray.i, posArray.j, leftTakes, PieceType.PAWN) || this.findPiece(this.chessBoard, ignorePiece, posArray.i, posArray.j, rightTakes, PieceType.PAWN);\n  }\n  posToArrayPos(pos) {\n    return this.posMap.get(pos);\n  }\n  getSquareByPos(pos) {\n    let arrayPos = this.posMap.get(pos);\n    if (!arrayPos) return null;\n    let iPos = arrayPos.i;\n    let jPos = arrayPos.j;\n    if (!iPos || !jPos) return null;\n    return this.chessBoard[iPos][jPos];\n  }\n  static withinBoard(i, j) {\n    return i >= 0 && i < BOARD_SIZE && j >= 0 && j < BOARD_SIZE;\n  }\n  genPiece(col, row) {\n    if (row == 2) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.WHITE);\n    } else if (row == 7) {\n      return new PawnModel(PieceType.PAWN, PlayerColor.BLACK);\n    } else if (row == 1) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.WHITE);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.WHITE);\n      }\n    } else if (row == 8) {\n      if (col == 'a' || col == 'h') {\n        return new RookModel(PieceType.ROOK, PlayerColor.BLACK);\n      } else if (col == 'b' || col == 'g') {\n        return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n      } else if (col == 'c' || col == 'f') {\n        return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n      } else if (col == 'd') {\n        return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n      } else {\n        return new KingModel(PieceType.KING, PlayerColor.BLACK);\n      }\n    } else {\n      return undefined;\n    }\n  }\n  clone() {\n    const clone = new ChessBoardModel(this.playerColor);\n    clone.chessBoard = this.chessBoard.map(row => row.map(square => {\n      const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n      const piece = square.getPiece();\n      if (piece) {\n        const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece);\n        clonedSquare.setPiece(clonedPiece);\n      }\n      return clonedSquare;\n    }));\n    clone.posMap = new Map(this.posMap);\n    return clone;\n  }\n}","map":{"version":3,"names":["PawnModel","RookModel","KnightModel","BishopModel","QueenModel","KingModel","SquareModel","ROW_VALUES","COL_VALUES","PlayerColor","PieceType","BOARD_SIZE","ChessBoardModel","constructor","playerColor","chessBoard","posMap","Map","moveList","col","row","reverse","i","j","pos","set","color","WHITE","BLACK","piece","genPiece","push","getChessBoard","getMoveList","getPosMap","move","fromSquare","toSquare","pieceOnFromSquare","getPiece","pieceColor","getColor","castleMove","queeningMove","validMove","beenMoved","setPiece","undefined","getPos","startSquare","endSquare","pieceMove","king","rookSquare","newRookSquare","endSquarePos","console","log","getType","KING","kingColor","charAt","rook","ROOK","pawn","posToArrayPos","PAWN","pawnColor","endRow","endSquareRow","QUEEN","enPassant","board","startSquarePos","lastMove","slice","pieceLastMovedNewPos","pieceLastMovedOldPos","direction","pawnDirections","pieceLastMoved","pieceLeft","pieceRight","withinBoard","pieceLeftTakes","takes","left","dx","dy","pieceRightTakes","right","pieceLastMovedDx","Math","abs","pieceLastMovedDy","isKingInCheck","kingLocation","searchBoardForPiece","kingPos","kingInCheck","pieceType","square","searchBoardFromPos","ignorePiece","startPos","directions","callback","posArray","key","value","Object","entries","result","findPiece","currentPiece","findPieceInDirection","flag","findPawnAttack","pawnDirection","leftTakes","rightTakes","get","getSquareByPos","arrayPos","iPos","jPos","KNIGHT","BISHOP","clone","map","clonedSquare","clonedPiece","assign","create","getPrototypeOf"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/ChessBoardModel.ts"],"sourcesContent":["import { PieceModel } from \"./pieces/PieceModel\";\nimport { PawnModel } from \"./pieces/PawnModel\";\nimport { RookModel } from \"./pieces/RookModel\";\nimport { KnightModel } from \"./pieces/KnightModel\";\nimport { BishopModel } from \"./pieces/BishopModel\";\nimport { QueenModel } from \"./pieces/QueenModel\";\nimport { KingModel } from \"./pieces/KingModel\";\nimport { SquareModel } from \"./SquareModel\";\nimport { ROW_VALUES, COL_VALUES, PlayerColor, PieceType, BOARD_SIZE} from \"../utils/Constants\";\n\nexport class ChessBoardModel{\n    private chessBoard: Array<Array<SquareModel>>;\n    private playerColor:PlayerColor;\n    private posMap:Map<string,{i:number,j:number}> = new Map();\n    private moveList:Array<{fromSquare:string, toSquare:string}>;\n\n    public constructor(playerColor:PlayerColor){\n        this.playerColor = playerColor;\n        this.moveList = [];\n        let col = ROW_VALUES;\n        let row = [...COL_VALUES].reverse();\n       \n        this.chessBoard = [[],[],[],[],[],[],[],[]];\n        for(let i = 0; i< BOARD_SIZE; i++){\n            for(let j = 0; j< BOARD_SIZE; j++){\n\n                let pos:string = col[j]+row[i];\n                this.posMap.set(pos,{i:i, j:j});\n                let color = (j+i+2) % 2 == 0? PlayerColor.WHITE:PlayerColor.BLACK\n                let piece:PieceModel | undefined = this.genPiece(col[j],row[i]);\n                \n                if(piece){\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos,piece)\n                    );\n                }else{\n                    this.chessBoard[i].push(\n                        new SquareModel(color,pos)\n                    );\n                }\n            }\n        }\n    }\n\n    public getChessBoard():Array<Array<SquareModel>>{\n        return this.chessBoard;\n    }\n    public getMoveList(){\n        return this.moveList;\n    }\n    public getPosMap():Map<string,{i:number,j:number}>{\n        return this.posMap;\n    }\n    public move(fromSquare:SquareModel, toSquare:SquareModel){\n        if(fromSquare && toSquare){\n            let pieceOnFromSquare: PieceModel | undefined = fromSquare.getPiece();\n            if(!pieceOnFromSquare) return;\n            \n            let pieceColor = pieceOnFromSquare.getColor();\n            if(this.castleMove(fromSquare,toSquare)) return;\n            if(this.queeningMove(fromSquare,toSquare)) return;\n            if(!this.validMove(fromSquare,toSquare,pieceColor)) return;\n            \n            pieceOnFromSquare.beenMoved = true;\n            fromSquare.setPiece(undefined);\n            toSquare.setPiece(pieceOnFromSquare);\n            this.moveList.push({fromSquare:fromSquare.getPos(),toSquare:toSquare.getPos()});\n        }\n    }\n    public validMove(startSquare:SquareModel, endSquare:SquareModel, playerColor:PlayerColor){\n        const pieceMove = startSquare.getPiece();\n        if(pieceMove &&\n           pieceMove.validMove(this,startSquare,endSquare,playerColor)){\n           return true;\n        }\n        return false;\n    }\n\n    public castleMove(startSquare:SquareModel, endSquare:SquareModel){\n        const king = startSquare.getPiece();\n        let rookSquare = null;\n        let newRookSquare = null;\n        const endSquarePos = endSquare.getPos();\n        console.log(endSquarePos);\n\n        if(!king || king.getType() !== PieceType.KING) return false;\n        if(king.beenMoved) return false;\n        if( endSquarePos !== \"c1\" && endSquarePos !== \"g1\" &&\n            endSquarePos !== \"c8\" && endSquarePos !== \"g8\") return false;\n        const kingColor = king.getColor();\n        const row = kingColor === PlayerColor.WHITE? 7:0;\n\n        if(endSquarePos.charAt(0) === \"g\"){\n            rookSquare = this.chessBoard[row][7];\n            if( this.chessBoard[row][6].getPiece() ||\n                this.chessBoard[row][5].getPiece()\n            ) return false;\n            newRookSquare = this.chessBoard[row][5];\n        }\n        else{\n            rookSquare = this.chessBoard[row][0]; \n            if( this.chessBoard[row][3].getPiece() ||\n                this.chessBoard[row][2].getPiece() ||\n                this.chessBoard[row][1].getPiece()\n            ) return false;\n            newRookSquare = this.chessBoard[row][3];\n        }\n        const rook = rookSquare.getPiece();\n        if(!rook || rook.getType() !== PieceType.ROOK) return false;\n        if(rook.beenMoved) return false;\n\n        rookSquare.setPiece(undefined);\n        startSquare.setPiece(undefined);\n        newRookSquare.setPiece(rook);\n        endSquare.setPiece(king);\n        king.beenMoved = true;\n        rook.beenMoved = true;\n        this.moveList.push({fromSquare:startSquare.getPos(),toSquare:endSquare.getPos()});\n        return true;\n    }\n    private queeningMove(startSquare:SquareModel, endSquare:SquareModel){\n        const pawn = startSquare.getPiece();\n        const endSquarePos = this.posToArrayPos(endSquare.getPos());\n        if(!pawn || pawn.getType() !== PieceType.PAWN) return false;\n        if(!endSquarePos) return false;\n        \n        const pawnColor = pawn.getColor();\n        let endRow = pawnColor === PlayerColor.WHITE? 0:7;\n        let endSquareRow = endSquarePos.i;\n        \n        if(pawnColor===PlayerColor.WHITE && endSquareRow!==endRow) return false;\n        else if(pawnColor===PlayerColor.BLACK && endSquareRow!==endRow) return false;\n\n        startSquare.setPiece(undefined);\n        endSquare.setPiece(new QueenModel(PieceType.QUEEN,pawnColor));\n        this.moveList.push({fromSquare:startSquare.getPos(),toSquare:endSquare.getPos()});\n        return true;\n    }\n    private enPassant(startSquare:SquareModel, endSquare:SquareModel){\n        const board = this.chessBoard;\n        const pawn = startSquare.getPiece();\n        const startSquarePos = this.posToArrayPos(startSquare.getPos());\n        const lastMove = this.getMoveList().slice(-1)[0];\n        const pieceLastMovedNewPos = this.posToArrayPos(lastMove.toSquare);\n        const pieceLastMovedOldPos = this.posToArrayPos(lastMove.fromSquare);\n\n        if(!pawn || pawn.getType() !== PieceType.PAWN) return false;\n        if(!startSquarePos) return false;\n        if(!pieceLastMovedNewPos || !pieceLastMovedOldPos) return false;\n\n        let direction = PawnModel.pawnDirections(pawn.getColor());\n        \n        const pieceLastMoved = board[pieceLastMovedNewPos.i][pieceLastMovedNewPos.j];\n\n        let pieceLeft;\n        let pieceRight;\n        if(ChessBoardModel.withinBoard(startSquarePos.i,startSquarePos.j-1)){\n             pieceLeft = board[startSquarePos.i][startSquarePos.j-1];\n        }\n        if(ChessBoardModel.withinBoard(startSquarePos.i,startSquarePos.j-1)){\n            pieceRight = board[startSquarePos.i][startSquarePos.j+1];\n        }\n        let pieceLeftTakes = board[startSquarePos.i+direction.takes.left.dx][startSquarePos.j+direction.takes.left.dy];\n        let pieceRightTakes = board[startSquarePos.i+direction.takes.right.dx][startSquarePos.j+direction.takes.right.dy];\n        let pieceLastMovedDx = Math.abs(pieceLastMovedNewPos.j-pieceLastMovedOldPos.j);\n        let pieceLastMovedDy = Math.abs(pieceLastMovedNewPos.i-pieceLastMovedOldPos.i);\n        if(pieceLastMoved == pieceLeft && pieceLastMovedDx===0 && pieceLastMovedDy===2 && endSquare === pieceLeftTakes){\n            startSquare.setPiece(undefined);\n            pieceLeftTakes.setPiece(pawn);\n        }\n        if(pieceLastMoved == pieceRight && pieceLastMovedDx===0 && pieceLastMovedDy===2 && endSquare === pieceRightTakes){\n            startSquare.setPiece(undefined);\n            pieceRightTakes.setPiece(pawn);\n        }\n    }\n    public isKingInCheck(kingColor:PlayerColor): boolean {\n        const kingLocation = this.searchBoardForPiece(PieceType.KING, kingColor)\n        const kingPos = kingLocation.pos;\n        if(!kingPos) return false;\n\n        const king = kingLocation.piece as KingModel;\n        if(!king) return false;\n\n        return king.kingInCheck(this,kingPos);\n    }\n    public searchBoardForPiece(pieceType:PieceType,pieceColor:PlayerColor):{pos:string | undefined, piece:PieceModel | undefined}{\n        for(let row of this.chessBoard){\n            for(let square of row){\n                const piece = square.getPiece();\n                if(piece && \n                   piece.getType() === pieceType &&\n                   piece.getColor() === pieceColor\n                   ) return {pos: square.getPos(), piece: piece};\n            }\n        }\n        return {pos:undefined, piece:undefined};\n    }\n    public searchBoardFromPos(ignorePiece:PieceModel,startPos:string, directions:Object, pieceType:PieceType, callback:Function){\n        const board = this.getChessBoard();\n        const posArray = this.posToArrayPos(startPos);\n        if(!posArray) return false;\n\n        for(const [key,value] of Object.entries(directions)){\n            let i = posArray.i;\n            let j = posArray.j;\n\n            let result = callback(board,ignorePiece,i,j,value,pieceType);\n            if(result) return true;\n        }\n\n        return false;\n    }\n    public findPiece(board: Array<Array<SquareModel>>,ignorePiece:PieceModel,i:number,j:number,direction:{dx:number,dy:number}, pieceType:PieceType){\n        i += direction.dy;\n        j += direction.dx;\n        if(ChessBoardModel.withinBoard(i,j)){\n            const currentPiece = board[i][j].getPiece();\n            if(currentPiece && currentPiece.getColor() !== ignorePiece.getColor()){\n                if( currentPiece.getType() == pieceType ){\n                        return true;\n                }\n                else{\n                    return false;\n                }\n            }else if( currentPiece && \n                        currentPiece.getColor() === ignorePiece.getColor() &&\n                        currentPiece !== ignorePiece){\n                return false;\n            }\n        }\n        return false;\n    }\n    public findPieceInDirection(board: Array<Array<SquareModel>>,ignorePiece:PieceModel,i:number,j:number,direction:{dx:number,dy:number}, pieceType:PieceType){\n        let flag = true;\n        while(flag){\n            i += direction.dy;\n            j += direction.dx;\n\n\n            if(ChessBoardModel.withinBoard(i,j)){\n                const currentPiece = board[i][j].getPiece();\n                if(currentPiece && currentPiece.getColor() !== ignorePiece.getColor()){\n                    if( currentPiece.getType() == pieceType){\n                            return true;\n                    }\n                    else{\n                        flag = false;\n                    }\n                }else if( currentPiece && \n                            currentPiece.getColor() === ignorePiece.getColor() &&\n                            currentPiece !== ignorePiece){\n                    flag = false;\n                }\n            }\n            else flag = false;\n        }       \n        return false;  \n    }\n    public findPawnAttack(ignorePiece:PieceModel,kingPos:string){\n        let pawnDirection = PawnModel.pawnDirections(ignorePiece.getColor());\n        const posArray = this.posToArrayPos(kingPos);\n        if(!posArray) return false;\n        let leftTakes = pawnDirection.takes.left;\n        let rightTakes = pawnDirection.takes.right;\n\n        return this.findPiece(this.chessBoard,ignorePiece,posArray.i,posArray.j,leftTakes,PieceType.PAWN) ||\n               this.findPiece(this.chessBoard,ignorePiece,posArray.i,posArray.j,rightTakes,PieceType.PAWN)\n    }\n    public posToArrayPos(pos: string){\n        return this.posMap.get(pos);\n    }\n\n    public getSquareByPos(pos: string){\n        let arrayPos = this.posMap.get(pos);\n        if(!arrayPos) return null;\n\n        let iPos = arrayPos.i;\n        let jPos = arrayPos.j;\n\n        if(!iPos || !jPos) return null;\n\n        return this.chessBoard[iPos][jPos];\n    }\n    public static withinBoard(i:number, j:number){\n        return i>=0 &&\n               i<BOARD_SIZE &&\n               j>=0 &&\n               j<BOARD_SIZE;\n    }\n    private genPiece(col:string,row:number): PieceModel | undefined{\n        if(row == 2){\n            return new PawnModel(PieceType.PAWN,PlayerColor.WHITE);\n        }\n        else if(row == 7){\n            return new PawnModel(PieceType.PAWN,PlayerColor.BLACK);\n        }\n        else if(row == 1){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.WHITE);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.WHITE);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.WHITE);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.WHITE);\n            }\n        }\n        else if(row == 8){\n            if(col == 'a' || col == 'h'){\n                return new RookModel(PieceType.ROOK,PlayerColor.BLACK);\n            }\n            else if(col== 'b' || col == 'g'){\n                return new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK);\n            }\n            else if(col== 'c' || col == 'f'){\n                return new BishopModel(PieceType.BISHOP, PlayerColor.BLACK);\n            }\n            else if(col == 'd'){\n                return new QueenModel(PieceType.QUEEN, PlayerColor.BLACK);\n            }\n            else{\n                return new KingModel(PieceType.KING, PlayerColor.BLACK);\n            }\n        }\n        else{\n            return undefined;\n        }\n    }\n\n    public clone():ChessBoardModel{\n        const clone = new ChessBoardModel(this.playerColor);\n\n        clone.chessBoard = this.chessBoard.map((row) =>\n            row.map((square) => {\n            const clonedSquare = new SquareModel(square.getColor(), square.getPos());\n            const piece = square.getPiece();\n            if (piece) {\n                const clonedPiece = Object.assign(Object.create(Object.getPrototypeOf(piece)), piece)\n                clonedSquare.setPiece(clonedPiece);\n            }\n            return clonedSquare;\n            })\n        );\n\n        clone.posMap = new Map(this.posMap);\n        return clone;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}