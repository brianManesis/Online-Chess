{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nexport class RookModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.updatePossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const rook = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (rook) {\n      const rookDirections = this.rookDirections();\n      const left = rookDirections.left;\n      const right = rookDirections.right;\n      const up = rookDirections.up;\n      const down = rookDirections.down;\n      const chessNotation = square.getPos();\n      const posArray = boardModel.posToArrayPos(chessNotation);\n      if (posArray) {\n        let i = posArray.i;\n        let j = posArray.j;\n        this.checkSquares(board, i, j, left.dx, left.dy, playerColor);\n        this.checkSquares(board, i, j, right.dx, right.dy, playerColor);\n        this.checkSquares(board, i, j, up.dx, up.dy, playerColor);\n        this.checkSquares(board, i, j, down.dx, down.dy, playerColor);\n      }\n    }\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n  rookDirections() {\n    return {\n      left: {\n        dx: -1,\n        dy: 0\n      },\n      right: {\n        dx: 1,\n        dy: 0\n      },\n      up: {\n        dx: 0,\n        dy: -1\n      },\n      down: {\n        dx: 0,\n        dy: 1\n      }\n    };\n  }\n}","map":{"version":3,"names":["PieceModel","RookModel","constructor","type","color","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","updatePossibleMoves","has","square","rook","getPiece","board","getChessBoard","possibleMoves","clear","rookDirections","left","right","up","down","chessNotation","posArray","posToArrayPos","i","j","checkSquares","dx","dy","console","log"],"sources":["/home/brian/Desktop/Chess/frontend/src/model/pieces/RookModel.ts"],"sourcesContent":["import { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\n\nexport class RookModel extends PieceModel{\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.updatePossibleMoves(boardModel,startSquare,playerColor).has(pos);    }\n\n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const rook = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(rook){\n            const rookDirections = this.rookDirections();\n            const left = rookDirections.left;\n            const right = rookDirections.right;\n            const up = rookDirections.up;\n            const down = rookDirections.down;\n\n            const chessNotation = square.getPos();\n            const posArray = boardModel.posToArrayPos(chessNotation);\n\n            if(posArray){\n                let i = posArray.i;\n                let j = posArray.j; \n\n                this.checkSquares(board,i,j,left.dx,left.dy,playerColor);\n                this.checkSquares(board,i,j,right.dx,right.dy,playerColor);\n                this.checkSquares(board,i,j,up.dx,up.dy,playerColor);\n                this.checkSquares(board,i,j,down.dx,down.dy,playerColor);\n            }\n        }\n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n\n    private rookDirections(){\n        return {\n            left:{\n                dx:-1,\n                dy:0\n            },\n            right:{\n                dx:1,\n                dy:0\n            },\n            up:{\n                dx:0,\n                dy:-1\n            },\n            down:{\n                dx:0,\n                dy:1\n            }\n        }\n    }\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,cAAc;AAIzC,OAAO,MAAMC,SAAS,SAASD,UAAU;EAC9BE,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IACnD,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;EACtB;EAEOC,SAASA,CAACC,UAA0B,EAAEC,WAAuB,EAChEC,SAAqB,EAAEC,WAAuB,EAAW;IACrD,MAAMC,GAAG,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC;IAC9B,OAAO,IAAI,CAACC,mBAAmB,CAACN,UAAU,EAACC,WAAW,EAACE,WAAW,CAAC,CAACI,GAAG,CAACH,GAAG,CAAC;EAAK;EAEjFE,mBAAmBA,CAACN,UAA0B,EAAEQ,MAAkB,EAAEL,WAAuB,EAAa;IAC5G,MAAMM,IAAI,GAAGD,MAAM,CAACE,QAAQ,CAAC,CAAC;IAC9B,MAAMC,KAAK,GAAGX,UAAU,CAACY,aAAa,CAAC,CAAC;IACxC,IAAI,CAACC,aAAa,CAACC,KAAK,CAAC,CAAC;IAE1B,IAAGL,IAAI,EAAC;MACJ,MAAMM,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC,CAAC;MAC5C,MAAMC,IAAI,GAAGD,cAAc,CAACC,IAAI;MAChC,MAAMC,KAAK,GAAGF,cAAc,CAACE,KAAK;MAClC,MAAMC,EAAE,GAAGH,cAAc,CAACG,EAAE;MAC5B,MAAMC,IAAI,GAAGJ,cAAc,CAACI,IAAI;MAEhC,MAAMC,aAAa,GAAGZ,MAAM,CAACH,MAAM,CAAC,CAAC;MACrC,MAAMgB,QAAQ,GAAGrB,UAAU,CAACsB,aAAa,CAACF,aAAa,CAAC;MAExD,IAAGC,QAAQ,EAAC;QACR,IAAIE,CAAC,GAAGF,QAAQ,CAACE,CAAC;QAClB,IAAIC,CAAC,GAAGH,QAAQ,CAACG,CAAC;QAElB,IAAI,CAACC,YAAY,CAACd,KAAK,EAACY,CAAC,EAACC,CAAC,EAACR,IAAI,CAACU,EAAE,EAACV,IAAI,CAACW,EAAE,EAACxB,WAAW,CAAC;QACxD,IAAI,CAACsB,YAAY,CAACd,KAAK,EAACY,CAAC,EAACC,CAAC,EAACP,KAAK,CAACS,EAAE,EAACT,KAAK,CAACU,EAAE,EAACxB,WAAW,CAAC;QAC1D,IAAI,CAACsB,YAAY,CAACd,KAAK,EAACY,CAAC,EAACC,CAAC,EAACN,EAAE,CAACQ,EAAE,EAACR,EAAE,CAACS,EAAE,EAACxB,WAAW,CAAC;QACpD,IAAI,CAACsB,YAAY,CAACd,KAAK,EAACY,CAAC,EAACC,CAAC,EAACL,IAAI,CAACO,EAAE,EAACP,IAAI,CAACQ,EAAE,EAACxB,WAAW,CAAC;MAC5D;IACJ;IACAyB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChB,aAAa,CAAC;IAE/B,OAAO,IAAI,CAACA,aAAa;EAC7B;EAEQE,cAAcA,CAAA,EAAE;IACpB,OAAO;MACHC,IAAI,EAAC;QACDU,EAAE,EAAC,CAAC,CAAC;QACLC,EAAE,EAAC;MACP,CAAC;MACDV,KAAK,EAAC;QACFS,EAAE,EAAC,CAAC;QACJC,EAAE,EAAC;MACP,CAAC;MACDT,EAAE,EAAC;QACCQ,EAAE,EAAC,CAAC;QACJC,EAAE,EAAC,CAAC;MACR,CAAC;MACDR,IAAI,EAAC;QACDO,EAAE,EAAC,CAAC;QACJC,EAAE,EAAC;MACP;IACJ,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}