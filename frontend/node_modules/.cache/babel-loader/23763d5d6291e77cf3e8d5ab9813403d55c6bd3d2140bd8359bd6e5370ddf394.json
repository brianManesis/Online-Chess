{"ast":null,"code":"import { PieceModel } from \"./PieceModel\";\nexport class KnightModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.getPossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  getPossibleMoves(boardModel, square, playerColor) {\n    const knight = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (!knight) return this.possibleMoves;\n    const knightDirections = KnightModel.knightDirections;\n    const chessNotation = square.getPos();\n    const posArray = boardModel.posToArrayPos(chessNotation);\n    if (!posArray) return this.possibleMoves;\n    let i = posArray.i;\n    let j = posArray.j;\n    for (const [, value] of Object.entries(knightDirections)) {\n      this.checkSquare(board, i, j, value.dx, value.dy, playerColor);\n    }\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n}\nKnightModel.knightDirections = {\n  one: {\n    dx: -2,\n    dy: -1\n  },\n  two: {\n    dx: 2,\n    dy: -1\n  },\n  three: {\n    dx: -2,\n    dy: 1\n  },\n  four: {\n    dx: 2,\n    dy: 1\n  },\n  five: {\n    dx: -1,\n    dy: -2\n  },\n  six: {\n    dx: -1,\n    dy: 2\n  },\n  seven: {\n    dx: 1,\n    dy: -2\n  },\n  eight: {\n    dx: 1,\n    dy: 2\n  }\n};","map":{"version":3,"names":["PieceModel","KnightModel","constructor","type","color","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","getPossibleMoves","has","square","knight","getPiece","board","getChessBoard","possibleMoves","clear","knightDirections","chessNotation","posArray","posToArrayPos","i","j","value","Object","entries","checkSquare","dx","dy","console","log","one","two","three","four","five","six","seven","eight"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/KnightModel.ts"],"sourcesContent":["import { PlayerColor, PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\n\nexport class KnightModel extends PieceModel{\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.getPossibleMoves(boardModel,startSquare,playerColor).has(pos);  \n    }\n\n    private getPossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const knight = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(!knight) return this.possibleMoves;\n\n        const knightDirections = KnightModel.knightDirections;\n        const chessNotation = square.getPos();\n        const posArray = boardModel.posToArrayPos(chessNotation);\n\n        if(!posArray) return this.possibleMoves;\n\n        let i = posArray.i;\n        let j = posArray.j; \n        for(const [,value] of Object.entries(knightDirections)){\n            this.checkSquare(board,i,j,value.dx,value.dy,playerColor);\n        }\n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n\n    public static knightDirections = {\n        one:{\n            dx:-2,\n            dy:-1\n        },\n        two:{\n            dx:2,\n            dy:-1\n        },\n        three:{\n            dx:-2,\n            dy:1\n        },\n        four:{\n            dx:2,\n            dy:1\n        },\n        five:{\n            dx:-1,\n            dy:-2\n        },\n        six:{\n            dx:-1,\n            dy:2\n        },\n        seven:{\n            dx:1,\n            dy:-2\n        },\n        eight:{\n            dx:1,\n            dy:2\n        }\n    }\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,cAAc;AAIzC,OAAO,MAAMC,WAAW,SAASD,UAAU;EAChCE,WAAWA,CAACC,IAAe,EAAEC,KAAkB,EAAC;IACnD,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;EACtB;EAEOC,SAASA,CAACC,UAA0B,EAAEC,WAAuB,EAChEC,SAAqB,EAAEC,WAAuB,EAAW;IACrD,MAAMC,GAAG,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC;IAC9B,OAAO,IAAI,CAACC,gBAAgB,CAACN,UAAU,EAACC,WAAW,EAACE,WAAW,CAAC,CAACI,GAAG,CAACH,GAAG,CAAC;EACjF;EAEQE,gBAAgBA,CAACN,UAA0B,EAAEQ,MAAkB,EAAEL,WAAuB,EAAa;IACzG,MAAMM,MAAM,GAAGD,MAAM,CAACE,QAAQ,CAAC,CAAC;IAChC,MAAMC,KAAK,GAAGX,UAAU,CAACY,aAAa,CAAC,CAAC;IACxC,IAAI,CAACC,aAAa,CAACC,KAAK,CAAC,CAAC;IAE1B,IAAG,CAACL,MAAM,EAAE,OAAO,IAAI,CAACI,aAAa;IAErC,MAAME,gBAAgB,GAAGpB,WAAW,CAACoB,gBAAgB;IACrD,MAAMC,aAAa,GAAGR,MAAM,CAACH,MAAM,CAAC,CAAC;IACrC,MAAMY,QAAQ,GAAGjB,UAAU,CAACkB,aAAa,CAACF,aAAa,CAAC;IAExD,IAAG,CAACC,QAAQ,EAAE,OAAO,IAAI,CAACJ,aAAa;IAEvC,IAAIM,CAAC,GAAGF,QAAQ,CAACE,CAAC;IAClB,IAAIC,CAAC,GAAGH,QAAQ,CAACG,CAAC;IAClB,KAAI,MAAM,GAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACR,gBAAgB,CAAC,EAAC;MACnD,IAAI,CAACS,WAAW,CAACb,KAAK,EAACQ,CAAC,EAACC,CAAC,EAACC,KAAK,CAACI,EAAE,EAACJ,KAAK,CAACK,EAAE,EAACvB,WAAW,CAAC;IAC7D;IACAwB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,aAAa,CAAC;IAE/B,OAAO,IAAI,CAACA,aAAa;EAC7B;AAoCJ;AApEalB,WAAW,CAkCNoB,gBAAgB,GAAG;EAC7Bc,GAAG,EAAC;IACAJ,EAAE,EAAC,CAAC,CAAC;IACLC,EAAE,EAAC,CAAC;EACR,CAAC;EACDI,GAAG,EAAC;IACAL,EAAE,EAAC,CAAC;IACJC,EAAE,EAAC,CAAC;EACR,CAAC;EACDK,KAAK,EAAC;IACFN,EAAE,EAAC,CAAC,CAAC;IACLC,EAAE,EAAC;EACP,CAAC;EACDM,IAAI,EAAC;IACDP,EAAE,EAAC,CAAC;IACJC,EAAE,EAAC;EACP,CAAC;EACDO,IAAI,EAAC;IACDR,EAAE,EAAC,CAAC,CAAC;IACLC,EAAE,EAAC,CAAC;EACR,CAAC;EACDQ,GAAG,EAAC;IACAT,EAAE,EAAC,CAAC,CAAC;IACLC,EAAE,EAAC;EACP,CAAC;EACDS,KAAK,EAAC;IACFV,EAAE,EAAC,CAAC;IACJC,EAAE,EAAC,CAAC;EACR,CAAC;EACDU,KAAK,EAAC;IACFX,EAAE,EAAC,CAAC;IACJC,EAAE,EAAC;EACP;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}