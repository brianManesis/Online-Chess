{"ast":null,"code":"var _jsxFileName = \"/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PieceType, PlayerColor } from '../../../../utils/Constants';\nimport React from 'react';\nimport { RookModel } from '../../../../model/pieces/RookModel';\nimport { KnightModel } from '../../../../model/pieces/KnightModel';\nimport { BishopModel } from '../../../../model/pieces/BishopModel';\nimport { QueenModel } from '../../../../model/pieces/QueenModel';\nimport { KingModel } from '../../../../model/pieces/KingModel';\nimport { PawnModel } from '../../../../model/pieces/PawnModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard(props) {\n  _s();\n  const playerColor = props.playerColor;\n  const chessBoard = new ChessBoardModel();\n  const boardViewRef = useRef(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [boardModel, setBoardModel] = useState(chessBoard);\n  const [boardView, setBoardView] = useState([[], [], [], [], [], [], [], []]);\n  useEffect(() => {\n    makeChessBoard();\n    const whitePieces = [new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new PawnModel(PieceType.PAWN, PlayerColor.WHITE), new RookModel(PieceType.ROOK, PlayerColor.WHITE), new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE), new BishopModel(PieceType.BISHOP, PlayerColor.WHITE), new QueenModel(PieceType.QUEEN, PlayerColor.WHITE), new KingModel(PieceType.KING, PlayerColor.WHITE), new BishopModel(PieceType.BISHOP, PlayerColor.WHITE), new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE), new RookModel(PieceType.ROOK, PlayerColor.WHITE)];\n    const blackPieces = [new RookModel(PieceType.ROOK, PlayerColor.BLACK), new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK), new BishopModel(PieceType.BISHOP, PlayerColor.BLACK), new QueenModel(PieceType.QUEEN, PlayerColor.BLACK), new KingModel(PieceType.KING, PlayerColor.BLACK), new BishopModel(PieceType.BISHOP, PlayerColor.BLACK), new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK), new RookModel(PieceType.ROOK, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK), new PawnModel(PieceType.PAWN, PlayerColor.BLACK)];\n  }, [boardModel]);\n  function makeChessBoard() {\n    const boardViewTemp = [[], [], [], [], [], [], [], []];\n    const currentBoardModel = boardModel.getChessBoard();\n    if (playerColor === PlayerColor.WHITE) {\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        for (let j = 0; j < BOARD_SIZE; j++) {\n          boardViewTemp[i].push( /*#__PURE__*/_jsxDEV(Square, {\n            squareModel: currentBoardModel[i][j]\n          }, i + \"\" + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    } else {\n      for (let i = BOARD_SIZE - 1; i >= 0; i--) {\n        let k = 0;\n        for (let j = BOARD_SIZE - 1; j >= 0; j--) {\n          boardViewTemp[k].push( /*#__PURE__*/_jsxDEV(Square, {\n            squareModel: currentBoardModel[i][j]\n          }, i + \"\" + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this));\n        }\n        k++;\n      }\n    }\n    setBoardView(() => boardViewTemp);\n  }\n  function handleClick(event) {\n    if (activePiece) {\n      movePiece(event);\n    } else {\n      selectPiece(event);\n    }\n  }\n  function selectPiece(event) {\n    const element = event.target;\n    const currentBoard = boardViewRef.current;\n    if (element.classList.contains(\"piece\") && currentBoard && !activePiece) {\n      setActivePiece(element);\n    }\n  }\n  function movePiece(event) {\n    const element = event.target;\n    if (activePiece && boardViewRef.current) {\n      let startSquare = activePiece.parentElement;\n      let endSquare = element;\n      let activePieceColor = activePiece.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n      if (endSquare.classList.contains(\"piece\")) {\n        let endPieceColor = endSquare.id.includes(\"White\") ? PlayerColor.WHITE : PlayerColor.BLACK;\n        if (endPieceColor === activePieceColor) {\n          setActivePiece(endSquare);\n          return;\n        }\n        endSquare = endSquare.parentElement;\n      }\n      if (startSquare && endSquare) {\n        const updatedBoardModel = boardModel.clone();\n        updatedBoardModel.move(startSquare.id, endSquare.id);\n        setBoardModel(updatedBoardModel);\n      }\n      setActivePiece(null);\n    }\n  }\n  // function grabPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     const currentBoard = boardViewRef.current;\n  //     setGrabPiecePos(element.parentElement?.id+\"\");\n  //     console.log(element.parentElement?.id);\n  //     if(element.classList.contains(\"piece\") && currentBoard){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n  //         element.style.position = \"absolute\";\n  //         element.style.left = `${x}px`;\n  //         element.style.top = `${y}px`;\n  //         setActivePiece(element);\n  //     }\n  // }\n\n  // function movePiece(event: React.MouseEvent){\n  //     if(activePiece && boardViewRef.current){\n  //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n  //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n  //         const minX = boardViewRef.current.offsetLeft;\n  //         const minY = boardViewRef.current.offsetTop;\n  //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n  //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n  //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n  //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n  //         if (x < minX) {\n  //             activePiece.style.left = `${minX}px`;\n  //         }\n  //         else if (x > maxX) {\n  //             activePiece.style.left = `${maxX}px`;\n  //         }\n  //         else {\n  //             activePiece.style.left = `${x}px`;\n  //         }\n\n  //         if (y < minY) {\n  //             activePiece.style.top = `${minY}px`;\n  //         }\n  //         else if (y > maxY) {\n  //             activePiece.style.top = `${maxY}px`;\n  //         }\n  //         else {\n  //             activePiece.style.top = `${y}px`;\n  //         }\n  //     }\n  // }\n\n  // function dropPiece(event: React.MouseEvent){\n  //     const element = event.target as HTMLElement;\n  //     console.log(event);\n  //     if(activePiece && boardViewRef.current){\n  //         setActivePiece(null);\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    onClick: event => handleClick(event),\n    ref: boardViewRef,\n    children: boardView\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n_s(Chessboard, \"YMLJKHwzIHECotBJlmUSV9KKheE=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Square","ChessBoardModel","useEffect","useRef","useState","BOARD_SIZE","PieceType","PlayerColor","React","RookModel","KnightModel","BishopModel","QueenModel","KingModel","PawnModel","jsxDEV","_jsxDEV","Chessboard","props","_s","playerColor","chessBoard","boardViewRef","activePiece","setActivePiece","boardModel","setBoardModel","boardView","setBoardView","makeChessBoard","whitePieces","PAWN","WHITE","ROOK","KNIGHT","BISHOP","QUEEN","KING","blackPieces","BLACK","boardViewTemp","currentBoardModel","getChessBoard","i","j","push","squareModel","fileName","_jsxFileName","lineNumber","columnNumber","k","handleClick","event","movePiece","selectPiece","element","target","currentBoard","current","classList","contains","startSquare","parentElement","endSquare","activePieceColor","id","includes","endPieceColor","updatedBoardModel","clone","move","onClick","ref","children","_c","$RefreshReg$"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/components/chess/game/board/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Square from './Square';\nimport { ChessBoardModel } from '../../../../model/ChessBoardModel';\nimport { useEffect, useRef, useState } from 'react';\nimport { BOARD_SIZE, PieceType, PlayerColor } from '../../../../utils/Constants';\nimport React from 'react';\nimport { SquareModel } from '../../../../model/SquareModel';\nimport { RookModel } from '../../../../model/pieces/RookModel';\nimport { KnightModel } from '../../../../model/pieces/KnightModel';\nimport { BishopModel } from '../../../../model/pieces/BishopModel';\nimport { QueenModel } from '../../../../model/pieces/QueenModel';\nimport { KingModel } from '../../../../model/pieces/KingModel';\nimport { PawnModel } from '../../../../model/pieces/PawnModel';\n\nexport default function Chessboard(props:{playerColor:PlayerColor}){\n    const playerColor = props.playerColor;\n    const chessBoard:ChessBoardModel = new ChessBoardModel();\n    const boardViewRef = useRef<HTMLDivElement>(null);\n    const [activePiece, setActivePiece] = useState< HTMLElement | null>(null);\n    const [boardModel,setBoardModel] = useState(chessBoard);\n    const [boardView, setBoardView] = useState([[],[],[],[],[],[],[],[]]);\n        \n    useEffect(()=>{\n        makeChessBoard();\n        const whitePieces = [\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new PawnModel(PieceType.PAWN,PlayerColor.WHITE),\n            new RookModel(PieceType.ROOK,PlayerColor.WHITE),\n            new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE),\n            new BishopModel(PieceType.BISHOP, PlayerColor.WHITE),\n            new QueenModel(PieceType.QUEEN, PlayerColor.WHITE),\n            new KingModel(PieceType.KING, PlayerColor.WHITE),\n            new BishopModel(PieceType.BISHOP, PlayerColor.WHITE),\n            new KnightModel(PieceType.KNIGHT, PlayerColor.WHITE),\n            new RookModel(PieceType.ROOK,PlayerColor.WHITE)\n        ];\n        \n         const blackPieces = [\n            new RookModel(PieceType.ROOK,PlayerColor.BLACK),\n            new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK),\n            new BishopModel(PieceType.BISHOP, PlayerColor.BLACK),\n            new QueenModel(PieceType.QUEEN, PlayerColor.BLACK),\n            new KingModel(PieceType.KING, PlayerColor.BLACK),\n            new BishopModel(PieceType.BISHOP, PlayerColor.BLACK),\n            new KnightModel(PieceType.KNIGHT, PlayerColor.BLACK),\n            new RookModel(PieceType.ROOK,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK),\n            new PawnModel(PieceType.PAWN,PlayerColor.BLACK)\n        ];\n    },[boardModel]);\n    \n    function makeChessBoard(){\n        const boardViewTemp:any = [[],[],[],[],[],[],[],[]];\n        const currentBoardModel:Array<Array<SquareModel>> = boardModel.getChessBoard();\n        if(playerColor === PlayerColor.WHITE){\n            for(let i = 0; i<BOARD_SIZE; i++){\n                for(let j = 0; j<BOARD_SIZE; j++){\n                    boardViewTemp[i].push(\n                        <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n                    );\n                }\n            }\n        }\n        else{\n            for(let i = BOARD_SIZE-1; i>=0; i--){\n                let k = 0;\n                for(let j = BOARD_SIZE-1; j>=0; j--){\n                    boardViewTemp[k].push(\n                        <Square key={i+\"\"+j} squareModel={currentBoardModel[i][j]}></Square>\n                    );\n                }\n                k++;\n            }\n        }\n        setBoardView(() => boardViewTemp);\n    }\n    \n    function handleClick(event: React.MouseEvent){\n        if(activePiece){\n            movePiece(event);\n        }\n        else{\n            selectPiece(event);\n        }\n    }\n    function selectPiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        const currentBoard = boardViewRef.current;\n        if(element.classList.contains(\"piece\") && currentBoard && !activePiece){\n            setActivePiece(element); \n        }       \n    }\n    function movePiece(event: React.MouseEvent){\n        const element = event.target as HTMLElement;\n        if(activePiece && boardViewRef.current){\n            let startSquare = activePiece.parentElement;\n            let endSquare: HTMLElement | null = element;\n            let activePieceColor:PlayerColor = activePiece.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n            if(endSquare.classList.contains(\"piece\")){\n                let endPieceColor = endSquare.id.includes(\"White\")?\n                PlayerColor.WHITE:PlayerColor.BLACK;\n\n                if(endPieceColor === activePieceColor){\n                    setActivePiece(endSquare);\n                    return;\n                }\n                endSquare = endSquare.parentElement;\n            }\n\n\n            if(startSquare && endSquare){\n                const updatedBoardModel = boardModel.clone();\n                updatedBoardModel.move(\n                    startSquare.id,\n                    endSquare.id\n                );        \n                setBoardModel(updatedBoardModel);\n            }\n            setActivePiece(null);\n        }\n    }\n    // function grabPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     const currentBoard = boardViewRef.current;\n    //     setGrabPiecePos(element.parentElement?.id+\"\");\n    //     console.log(element.parentElement?.id);\n    //     if(element.classList.contains(\"piece\") && currentBoard){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientWidth;\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n    //         element.style.position = \"absolute\";\n    //         element.style.left = `${x}px`;\n    //         element.style.top = `${y}px`;\n    //         setActivePiece(element);\n    //     }\n    // }\n    \n    // function movePiece(event: React.MouseEvent){\n    //     if(activePiece && boardViewRef.current){\n    //         const BOARD_VIEW_HEIGHT = boardViewRef.current.clientHeight;\n    //         const BOARD_VIEW_WIDTH = boardViewRef.current.clientHeight;\n    //         const minX = boardViewRef.current.offsetLeft;\n    //         const minY = boardViewRef.current.offsetTop;\n    //         const maxX = boardViewRef.current.offsetLeft + ((8/9)*BOARD_VIEW_WIDTH);\n    //         const maxY = boardViewRef.current.offsetTop + ((8/9)*BOARD_VIEW_HEIGHT);\n\n    //         const x = event.clientX-(BOARD_VIEW_WIDTH/16);\n    //         const y = event.clientY-(BOARD_VIEW_HEIGHT/16);\n\n    //         if (x < minX) {\n    //             activePiece.style.left = `${minX}px`;\n    //         }\n    //         else if (x > maxX) {\n    //             activePiece.style.left = `${maxX}px`;\n    //         }\n    //         else {\n    //             activePiece.style.left = `${x}px`;\n    //         }\n    \n    //         if (y < minY) {\n    //             activePiece.style.top = `${minY}px`;\n    //         }\n    //         else if (y > maxY) {\n    //             activePiece.style.top = `${maxY}px`;\n    //         }\n    //         else {\n    //             activePiece.style.top = `${y}px`;\n    //         }\n    //     }\n    // }\n    \n    // function dropPiece(event: React.MouseEvent){\n    //     const element = event.target as HTMLElement;\n    //     console.log(event);\n    //     if(activePiece && boardViewRef.current){\n    //         setActivePiece(null);\n    //     }\n    // }\n    return(\n        <div id = \"chessboard\"\n        onClick={event=>handleClick(event)}\n        ref={boardViewRef}>\n            {boardView}\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}