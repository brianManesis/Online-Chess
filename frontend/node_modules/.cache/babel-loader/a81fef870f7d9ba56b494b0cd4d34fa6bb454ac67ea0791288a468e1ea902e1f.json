{"ast":null,"code":"import { PieceType } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\nexport class KingModel extends PieceModel {\n  constructor(type, color) {\n    super(type, color);\n    this.isChecked = void 0;\n    this.isChecked = false;\n    console.log(this);\n  }\n  validMove(boardModel, startSquare, endSquare, playerColor) {\n    const pos = endSquare.getPos();\n    return this.updatePossibleMoves(boardModel, startSquare, playerColor).has(pos);\n  }\n  updatePossibleMoves(boardModel, square, playerColor) {\n    const king = square.getPiece();\n    const board = boardModel.getChessBoard();\n    this.possibleMoves.clear();\n    if (!king) return this.possibleMoves;\n    const kingDirections = KingModel.kingDirections;\n    const chessNotation = square.getPos();\n    const posArray = boardModel.posToArrayPos(chessNotation);\n    if (!posArray) return this.possibleMoves;\n    let i = posArray.i;\n    let j = posArray.j;\n    for (const [key, value] of Object.entries(kingDirections)) {\n      this.checkSquare(board, i, j, value.dx, value.dy, playerColor);\n    }\n    console.log(this.possibleMoves);\n    this.possibleMoves.forEach(element => {\n      if (this.kingWillBeInCheck(boardModel, element)) {\n        this.possibleMoves.delete(element);\n      }\n    });\n    console.log(this.possibleMoves);\n    return this.possibleMoves;\n  }\n  kingWillBeInCheck(boardModel, kingPos) {\n    // let lookForRookAndQueen = boardModel.iterateBoard(kingPos, RookModel.rookDirections, \n    //                  (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=>\n    // {\n    //     let flag = true;\n    //     while(flag){\n    //         i += value.dy;\n    //         j += value.dx;\n    //         if(this.withinBoard(i,j)){\n    //             const currentPiece = board[i][j].getPiece();\n    //             if(currentPiece && currentPiece.getColor() !== this.color){\n    //                 if( currentPiece.getType() == PieceType.QUEEN ||\n    //                     currentPiece.getType() == PieceType.ROOK\n    //                 ){\n    //                         return true;\n    //                 }\n    //                 else{\n    //                     flag = false;\n    //                 }\n    //             }else if( currentPiece && \n    //                       currentPiece.getColor() === this.color &&\n    //                       currentPiece !== this){\n    //                 flag = false;\n    //             }\n    //         }\n    //         else flag = false;\n    //     }       \n    // });\n\n    // let lookForBishopAndQueen = boardModel.iterateBoard(kingPos,BishopModel.bishopDirections,\n    //                         (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=>\n    // {\n    //     let flag = true;\n    //     while(flag){\n    //         i += value.dy;\n    //         j += value.dx;\n    //         if(this.withinBoard(i,j)){\n    //             const currentPiece = board[i][j].getPiece();\n    //             if(currentPiece && currentPiece.getColor() !== this.color){\n    //                 if( currentPiece.getType() == PieceType.QUEEN ||\n    //                     currentPiece.getType() == PieceType.BISHOP\n    //                 ){\n    //                         return true;\n    //                 }\n    //                 else{\n    //                     flag = false;\n    //                 }\n    //             }else if( currentPiece && \n    //                       currentPiece.getColor() === this.color &&\n    //                       currentPiece !== this){\n    //                 flag = false;\n    //             }\n    //         }\n    //         else flag = false;\n    //     }       \n    // });\n    let lookForQueen = boardModel.searchBoard(kingPos, QueenModel.queenDirections, PieceType.QUEEN, this.findPieceInDirection);\n    let lookForRook = boardModel.searchBoard(kingPos, RookModel.rookDirections, PieceType.ROOK, this.findPieceInDirection);\n    let lookForBishop = boardModel.searchBoard(kingPos, BishopModel.bishopDirections, PieceType.BISHOP, this.findPieceInDirection);\n    let lookForKnight = boardModel.searchBoard(kingPos, KnightModel.knightDirections, PieceType.KNIGHT, this.findPiece);\n    let lookForKing = boardModel.searchBoard(kingPos, KingModel.kingDirections, PieceType.KING, this.findPiece);\n    return lookForQueen || lookForRook || lookForBishop || lookForKnight || lookForKing;\n  }\n  findPiece(board, i, j, direction, pieceType) {\n    i += direction.dy;\n    j += direction.dx;\n    if (this.withinBoard(i, j)) {\n      const currentPiece = board[i][j].getPiece();\n      if (currentPiece && currentPiece.getColor() !== this.color) {\n        if (currentPiece.getType() == pieceType) {\n          return true;\n        } else {\n          return false;\n        }\n      } else if (currentPiece && currentPiece.getColor() === this.color && currentPiece !== this) {\n        return false;\n      }\n    }\n    return false;\n  }\n  findPieceInDirection(board, i, j, direction, pieceType) {\n    let flag = true;\n    while (flag) {\n      i += direction.dy;\n      j += direction.dx;\n      if (this.withinBoard(i, j)) {\n        const currentPiece = board[i][j].getPiece();\n        if (currentPiece && currentPiece.getColor() !== this.color) {\n          if (currentPiece.getType() == pieceType) {\n            return true;\n          } else {\n            flag = false;\n          }\n        } else if (currentPiece && currentPiece.getColor() === this.color && currentPiece !== this) {\n          flag = false;\n        }\n      } else flag = false;\n    }\n    return false;\n  }\n}\nKingModel.kingDirections = {\n  left: {\n    dx: -1,\n    dy: 0\n  },\n  right: {\n    dx: 1,\n    dy: 0\n  },\n  up: {\n    dx: 0,\n    dy: -1\n  },\n  down: {\n    dx: 0,\n    dy: 1\n  },\n  leftUp: {\n    dx: -1,\n    dy: -1\n  },\n  rightUp: {\n    dx: 1,\n    dy: -1\n  },\n  leftDown: {\n    dx: -1,\n    dy: 1\n  },\n  rightDown: {\n    dx: 1,\n    dy: 1\n  }\n};","map":{"version":3,"names":["PieceType","PieceModel","QueenModel","RookModel","BishopModel","KnightModel","KingModel","constructor","type","color","isChecked","console","log","validMove","boardModel","startSquare","endSquare","playerColor","pos","getPos","updatePossibleMoves","has","square","king","getPiece","board","getChessBoard","possibleMoves","clear","kingDirections","chessNotation","posArray","posToArrayPos","i","j","key","value","Object","entries","checkSquare","dx","dy","forEach","element","kingWillBeInCheck","delete","kingPos","lookForQueen","searchBoard","queenDirections","QUEEN","findPieceInDirection","lookForRook","rookDirections","ROOK","lookForBishop","bishopDirections","BISHOP","lookForKnight","knightDirections","KNIGHT","findPiece","lookForKing","KING","direction","pieceType","withinBoard","currentPiece","getColor","getType","flag","left","right","up","down","leftUp","rightUp","leftDown","rightDown"],"sources":["/home/brian/Desktop/Projects/Chess/frontend/src/model/pieces/KingModel.ts"],"sourcesContent":["import { PlayerColor, PieceType, BOARD_SIZE } from \"../../utils/Constants\";\nimport { PieceModel } from \"./PieceModel\";\nimport { SquareModel } from \"../SquareModel\";\nimport { ChessBoardModel } from \"../ChessBoardModel\";\nimport { QueenModel } from \"./QueenModel\";\nimport { RookModel } from \"./RookModel\";\nimport { BishopModel } from \"./BishopModel\";\nimport { KnightModel } from \"./KnightModel\";\n\nexport class KingModel extends PieceModel{\n\n    public isChecked:boolean;\n\n    public constructor(type: PieceType, color: PlayerColor){\n        super(type, color);\n        this.isChecked = false;\n        console.log(this);\n    }\n\n    public validMove(boardModel:ChessBoardModel, startSquare:SquareModel,\n        endSquare:SquareModel, playerColor:PlayerColor): boolean {\n            const pos = endSquare.getPos();\n            return this.updatePossibleMoves(boardModel,startSquare,playerColor).has(pos); \n        }\n    \n    private updatePossibleMoves(boardModel:ChessBoardModel, square:SquareModel, playerColor:PlayerColor):Set<string>{\n        const king = square.getPiece();\n        const board = boardModel.getChessBoard();\n        this.possibleMoves.clear();\n\n        if(!king) return this.possibleMoves;\n\n        const kingDirections = KingModel.kingDirections;\n        const chessNotation = square.getPos();\n        const posArray = boardModel.posToArrayPos(chessNotation);\n\n        if(!posArray) return this.possibleMoves;\n\n        let i = posArray.i\n        let j = posArray.j; \n        \n        for(const [key,value] of Object.entries(kingDirections)){\n            this.checkSquare(board,i,j,value.dx,value.dy,playerColor);\n        }\n        console.log(this.possibleMoves)\n\n        this.possibleMoves.forEach(element=>{\n            if(this.kingWillBeInCheck(boardModel,element)){\n                this.possibleMoves.delete(element);\n            }\n        });\n        console.log(this.possibleMoves)\n\n        return this.possibleMoves;\n    }\n    private kingWillBeInCheck(boardModel:ChessBoardModel, kingPos:string){\n\n        // let lookForRookAndQueen = boardModel.iterateBoard(kingPos, RookModel.rookDirections, \n        //                  (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=>\n        // {\n        //     let flag = true;\n        //     while(flag){\n        //         i += value.dy;\n        //         j += value.dx;\n        //         if(this.withinBoard(i,j)){\n        //             const currentPiece = board[i][j].getPiece();\n        //             if(currentPiece && currentPiece.getColor() !== this.color){\n        //                 if( currentPiece.getType() == PieceType.QUEEN ||\n        //                     currentPiece.getType() == PieceType.ROOK\n        //                 ){\n        //                         return true;\n        //                 }\n        //                 else{\n        //                     flag = false;\n        //                 }\n        //             }else if( currentPiece && \n        //                       currentPiece.getColor() === this.color &&\n        //                       currentPiece !== this){\n        //                 flag = false;\n        //             }\n        //         }\n        //         else flag = false;\n        //     }       \n        // });\n\n        // let lookForBishopAndQueen = boardModel.iterateBoard(kingPos,BishopModel.bishopDirections,\n        //                         (board: Array<Array<SquareModel>>,i:number,j:number,value:any)=>\n        // {\n        //     let flag = true;\n        //     while(flag){\n        //         i += value.dy;\n        //         j += value.dx;\n        //         if(this.withinBoard(i,j)){\n        //             const currentPiece = board[i][j].getPiece();\n        //             if(currentPiece && currentPiece.getColor() !== this.color){\n        //                 if( currentPiece.getType() == PieceType.QUEEN ||\n        //                     currentPiece.getType() == PieceType.BISHOP\n        //                 ){\n        //                         return true;\n        //                 }\n        //                 else{\n        //                     flag = false;\n        //                 }\n        //             }else if( currentPiece && \n        //                       currentPiece.getColor() === this.color &&\n        //                       currentPiece !== this){\n        //                 flag = false;\n        //             }\n        //         }\n        //         else flag = false;\n        //     }       \n        // });\n        let lookForQueen = boardModel.searchBoard\n        (kingPos,\n         QueenModel.queenDirections, \n         PieceType.QUEEN,\n         this.findPieceInDirection\n        );\n        let lookForRook = boardModel.searchBoard\n        (kingPos,\n         RookModel.rookDirections, \n         PieceType.ROOK,\n         this.findPieceInDirection\n        );\n        let lookForBishop = boardModel.searchBoard\n        (kingPos,\n         BishopModel.bishopDirections, \n         PieceType.BISHOP,\n         this.findPieceInDirection\n        );\n        let lookForKnight = boardModel.searchBoard\n        (kingPos,\n         KnightModel.knightDirections,\n         PieceType.KNIGHT,\n         this.findPiece\n        );\n\n        let lookForKing = boardModel.searchBoard\n        (kingPos,\n         KingModel.kingDirections, \n         PieceType.KING,\n         this.findPiece\n         );\n\n        return lookForQueen || lookForRook || lookForBishop || lookForKnight || lookForKing;\n    }\n    public findPiece(board: Array<Array<SquareModel>>,i:number,j:number,direction:any, pieceType:PieceType){\n        i += direction.dy;\n        j += direction.dx;\n        if(this.withinBoard(i,j)){\n            const currentPiece = board[i][j].getPiece();\n            if(currentPiece && currentPiece.getColor() !== this.color){\n                if( currentPiece.getType() == pieceType ){\n                        return true;\n                }\n                else{\n                    return false;\n                }\n            }else if( currentPiece && \n                        currentPiece.getColor() === this.color &&\n                        currentPiece !== this){\n                return false;\n            }\n        }\n        return false;\n    }\n    public findPieceInDirection(board: Array<Array<SquareModel>>,i:number,j:number,direction:any, pieceType:PieceType){\n        let flag = true;\n\n            while(flag){\n                i += direction.dy;\n                j += direction.dx;\n\n\n                if(this.withinBoard(i,j)){\n                    const currentPiece = board[i][j].getPiece();\n                    if(currentPiece && currentPiece.getColor() !== this.color){\n                        if( currentPiece.getType() == pieceType){\n                                return true;\n                        }\n                        else{\n                            flag = false;\n                        }\n                    }else if( currentPiece && \n                              currentPiece.getColor() === this.color &&\n                              currentPiece !== this){\n                        flag = false;\n                    }\n                }\n                else flag = false;\n            }       \n        return false;  \n    }\n    private static kingDirections = {\n            left:{\n                dx:-1,\n                dy:0\n            },\n            right:{\n                dx:1,\n                dy:0\n            },\n            up:{\n                dx:0,\n                dy:-1\n            },\n            down:{\n                dx:0,\n                dy:1\n            },\n            leftUp:{\n                dx:-1,\n                dy:-1\n            },\n            rightUp:{\n                dx:1,\n                dy:-1\n            },\n            leftDown:{\n                dx:-1,\n                dy:1\n            },\n            rightDown:{\n                dx:1,\n                dy:1\n            }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}